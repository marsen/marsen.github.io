<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Marsen&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/c2458ad941ad5f8ca05b12c705fd4912</icon>
  <subtitle>waiting to load</subtitle>
  <link href="https://blog.marsen.me/atom.xml" rel="self"/>
  
  <link href="https://blog.marsen.me/"/>
  <updated>2025-06-05T11:34:38.348Z</updated>
  <id>https://blog.marsen.me/</id>
  
  <author>
    <name>Marsen L.</name>
    <email>admin@marsen.me</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title> [實作筆記] 用 GitLab CI/CD 實現自動打 Tag、Build 與 Push Docker Image 到 Registry</title>
    <link href="https://blog.marsen.me/2025/06/05/2025/gitlab-cicd-to-registry/"/>
    <id>https://blog.marsen.me/2025/06/05/2025/gitlab-cicd-to-registry/</id>
    <published>2025-06-05T11:11:43.000Z</published>
    <updated>2025-06-05T11:34:38.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>在專案自動化部署流程中，讓 CI&#x2F;CD pipeline 自動產生遞增 tag、build Docker image 並推送到 GitLab Container Registry，是現代 DevOps 的常見需求。</p><p>這篇文章記錄我在 GitLab CI&#x2F;CD 上實作這一流程的經驗。</p><h3 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h3><ul><li><strong>自動產生遞增 tag</strong>（如 ver.1.0.1）</li><li><strong>自動 build 並 push Docker image</strong>，image tag 與 git tag 同步</li><li><strong>支援多專案共用同一份 CI 設定</strong></li><li><strong>僅 main 分支觸發</strong></li></ul><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><ol><li><p>變數抽象化，支援多專案共用</p><p> 首先，將專案名稱、群組路徑等資訊抽成變數，方便不同專案複用：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">PROJECT_NAME:</span> <span class="string">my-proj</span></span><br><span class="line">  <span class="attr">GROUP_PATH:</span> <span class="string">my-group</span></span><br><span class="line">  <span class="attr">REGISTRY_PATH:</span> <span class="string">registry.gitlab.com/$GROUP_PATH/$PROJECT_NAME</span></span><br></pre></td></tr></table></figure></li><li><p>多階段 Dockerfile 精簡 image</p><p> 使用 multi-stage build，確保 production image 只包含必要檔案與 production dependencies：</p> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">23</span>-alpine AS builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package*.json ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">23</span>-alpine AS production</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package*.json ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install --production</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /app/dist ./dist</span></span><br><span class="line"><span class="keyword">ENV</span> NODE_ENV=production</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;npm&quot;</span>, <span class="string">&quot;start&quot;</span>]</span></span><br></pre></td></tr></table></figure><p> 建議搭配 .dockerignore 避免多餘檔案進入 image。</p></li><li><p>GitLab CI&#x2F;CD Pipeline 設定只在 main 分支執行</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">&#x27;$CI_COMMIT_BRANCH == &quot;main&quot;&#x27;</span></span><br><span class="line">    <span class="attr">when:</span> <span class="string">always</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">when:</span> <span class="string">never</span></span><br></pre></td></tr></table></figure></li><li><p>自動產生遞增 tag</p><ol><li>採用 major.minor.patch 的版本規則，啟始版號為 ver.1.0.0</li><li>先同步 remote tag，避免本地殘留影響</li><li>取得最大 patch 號，自動 +1</li><li>檢查 tag 是否已存在，確保唯一</li></ol> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">fetch</span> <span class="string">--prune</span> <span class="string">--tags</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">tag</span> <span class="string">-l</span> <span class="string">|</span> <span class="string">xargs</span> <span class="string">-n</span> <span class="number">1</span> <span class="string">git</span> <span class="string">tag</span> <span class="string">-d</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">fetch</span> <span class="string">--tags</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">    prefix=&quot;ver.&quot;</span></span><br><span class="line"><span class="string">    max_patch=$(git tag -l &quot;$&#123;prefix&#125;[0-9]*.[0-9]*.[0-9]*&quot; | grep -oE &#x27;[0-9]+\.[0-9]+\.[0-9]+&#x27; | sort -t. -k1,1nr -k2,2nr -k3,3nr | head -n1 | awk -F. &#x27;&#123;print $3&#125;&#x27;)</span></span><br><span class="line"><span class="string">    if [ -z &quot;$max_patch&quot; ]; then</span></span><br><span class="line"><span class="string">      new_tag=&quot;$&#123;prefix&#125;1.0.0&quot;</span></span><br><span class="line"><span class="string">    else</span></span><br><span class="line"><span class="string">      major=$(git tag -l &quot;$&#123;prefix&#125;[0-9]*.[0-9]*.[0-9]*&quot; | grep -oE &#x27;[0-9]+\.[0-9]+\.[0-9]+&#x27; | sort -t. -k1,1nr -k2,2nr -k3,3nr | head -n1 | cut -d. -f1)</span></span><br><span class="line"><span class="string">      minor=$(git tag -l &quot;$&#123;prefix&#125;[0-9]*.[0-9]*.[0-9]*&quot; | grep -oE &#x27;[0-9]+\.[0-9]+\.[0-9]+&#x27; | sort -t. -k1,1nr -k2,2nr -k3,3nr | head -n1 | cut -d. -f2)</span></span><br><span class="line"><span class="string">      patch=$((max_patch + 1))</span></span><br><span class="line"><span class="string">      new_tag=&quot;$&#123;prefix&#125;$&#123;major&#125;.$&#123;minor&#125;.$&#123;patch&#125;&quot;</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">    # 確保 tag 唯一</span></span><br><span class="line"><span class="string">    while git rev-parse &quot;$new_tag&quot; &gt;/dev/null 2&gt;&amp;1; do</span></span><br><span class="line"><span class="string">      patch=$((patch + 1))</span></span><br><span class="line"><span class="string">      new_tag=&quot;$&#123;prefix&#125;$&#123;major&#125;.$&#123;minor&#125;.$&#123;patch&#125;&quot;</span></span><br><span class="line"><span class="string">    done</span></span><br><span class="line"><span class="string">    echo &quot;new tag is $new_tag&quot;</span></span><br><span class="line"><span class="string">    echo &quot;NEW_TAG=$new_tag&quot; &gt;&gt; build.env</span></span><br><span class="line"><span class="string"></span>  <span class="bullet">-</span> <span class="string">source</span> <span class="string">build.env</span></span><br></pre></td></tr></table></figure></li><li><p>自動打 tag 並 push</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;rd@example.com&quot;</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;gitlab-runner&quot;</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">remote</span> <span class="string">set-url</span> <span class="string">origin</span> <span class="string">https://gitlab-runner:$RAG_CICD_TOKEN@gitlab.com/$GITLAB_REPO.git</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">tag</span> <span class="string">&quot;$NEW_TAG&quot;</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">origin</span> <span class="string">&quot;$NEW_TAG&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>Loging、Build &amp; Push Docker image</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">docker</span> <span class="string">login</span> <span class="string">-u</span> <span class="string">&quot;$CI_REGISTRY_USER&quot;</span> <span class="string">-p</span> <span class="string">&quot;$CI_REGISTRY_PASSWORD&quot;</span> <span class="string">$CI_REGISTRY</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">$REGISTRY_PATH:$NEW_TAG</span> <span class="string">.</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">$REGISTRY_PATH:$NEW_TAG</span></span><br></pre></td></tr></table></figure></li><li><p>Docker-in-Docker 設定</p><p> DOCKER_TLS_CERTDIR&#x3D;’’ 是為了讓 dind 關閉 TLS，讓 CI job 可以直接用明文 TCP 連線 docker daemon，避免 TLS 憑證錯誤。</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">docker:dind</span></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">DOCKER_HOST:</span> <span class="string">tcp://docker:2375/</span></span><br><span class="line">  <span class="attr">DOCKER_TLS_CERTDIR:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p> <a href="https://about.gitlab.com/blog/docker-in-docker-with-docker-19-dot-03/">可以參考本文</a></p></li><li><p>一些要注意的小問題</p></li></ol><ul><li><p><strong>DOCKER_TLS_CERTDIR 不能不設定。</strong></p></li><li><p><strong>tag 跳號或重複？</strong><br>請務必先刪除本地 tag 再 fetch remote tag。</p></li><li><p><strong>無法 push tag？</strong><br>請確認 Deploy Token&#x2F;PAT 權限，且 remote url 正確。</p></li><li><p><strong>docker build 失敗，daemon 連不到？</strong><br>請檢查　gitlab runner 是否有 privileged mode，且 dind 有啟動。<br>在<code>/etc/gitlab-runner/config.toml</code>中</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[[runners]]</span></span><br><span class="line">  <span class="attr">name</span> = <span class="string">&quot;docker-runner&quot;</span></span><br><span class="line">  <span class="attr">executor</span> = <span class="string">&quot;docker&quot;</span></span><br><span class="line">  <span class="section">[runners.docker]</span></span><br><span class="line">    <span class="attr">privileged</span> = <span class="literal">true</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li></ul><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>完整 .gitlab-ci.yml 範例如下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">PROJECT_NAME:</span> <span class="string">my-proj</span></span><br><span class="line">  <span class="attr">GROUP_PATH:</span> <span class="string">my-group</span></span><br><span class="line">  <span class="attr">REGISTRY_PATH:</span> <span class="string">registry.gitlab.com/$GROUP_PATH/$PROJECT_NAME</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build-image:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">docker:latest</span></span><br><span class="line">  <span class="attr">services:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker:dind</span></span><br><span class="line">  <span class="attr">variables:</span></span><br><span class="line">    <span class="attr">DOCKER_HOST:</span> <span class="string">tcp://docker:2375/</span></span><br><span class="line">    <span class="attr">DOCKER_TLS_CERTDIR:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">&#x27;$CI_COMMIT_BRANCH == &quot;main&quot;&#x27;</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">always</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">when:</span> <span class="string">never</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">fetch</span> <span class="string">--prune</span> <span class="string">--tags</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">tag</span> <span class="string">-l</span> <span class="string">|</span> <span class="string">xargs</span> <span class="string">-n</span> <span class="number">1</span> <span class="string">git</span> <span class="string">tag</span> <span class="string">-d</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">fetch</span> <span class="string">--tags</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">      prefix=&quot;ver.&quot;</span></span><br><span class="line"><span class="string">      max_patch=$(git tag -l &quot;$&#123;prefix&#125;[0-9]*.[0-9]*.[0-9]*&quot; | grep -oE &#x27;[0-9]+\.[0-9]+\.[0-9]+&#x27; | sort -t. -k1,1nr -k2,2nr -k3,3nr | head -n1 | awk -F. &#x27;&#123;print $3&#125;&#x27;)</span></span><br><span class="line"><span class="string">      if [ -z &quot;$max_patch&quot; ]; then</span></span><br><span class="line"><span class="string">        new_tag=&quot;$&#123;prefix&#125;1.0.0&quot;</span></span><br><span class="line"><span class="string">      else</span></span><br><span class="line"><span class="string">        major=$(git tag -l &quot;$&#123;prefix&#125;[0-9]*.[0-9]*.[0-9]*&quot; | grep -oE &#x27;[0-9]+\.[0-9]+\.[0-9]+&#x27; | sort -t. -k1,1nr -k2,2nr -k3,3nr | head -n1 | cut -d. -f1)</span></span><br><span class="line"><span class="string">        minor=$(git tag -l &quot;$&#123;prefix&#125;[0-9]*.[0-9]*.[0-9]*&quot; | grep -oE &#x27;[0-9]+\.[0-9]+\.[0-9]+&#x27; | sort -t. -k1,1nr -k2,2nr -k3,3nr | head -n1 | cut -d. -f2)</span></span><br><span class="line"><span class="string">        patch=$((max_patch + 1))</span></span><br><span class="line"><span class="string">        new_tag=&quot;$&#123;prefix&#125;$&#123;major&#125;.$&#123;minor&#125;.$&#123;patch&#125;&quot;</span></span><br><span class="line"><span class="string">      fi</span></span><br><span class="line"><span class="string">      while git rev-parse &quot;$new_tag&quot; &gt;/dev/null 2&gt;&amp;1; do</span></span><br><span class="line"><span class="string">        patch=$((patch + 1))</span></span><br><span class="line"><span class="string">        new_tag=&quot;$&#123;prefix&#125;$&#123;major&#125;.$&#123;minor&#125;.$&#123;patch&#125;&quot;</span></span><br><span class="line"><span class="string">      done</span></span><br><span class="line"><span class="string">      echo &quot;new tag is $new_tag&quot;</span></span><br><span class="line"><span class="string">      echo &quot;NEW_TAG=$new_tag&quot; &gt;&gt; build.env</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="string">source</span> <span class="string">build.env</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;rd@example.com&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;rag-cicd&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">remote</span> <span class="string">set-url</span> <span class="string">origin</span> <span class="string">https://rag-cicd:$RAG_CICD_TOKEN@gitlab.com/$GITLAB_REPO.git</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">tag</span> <span class="string">&quot;$NEW_TAG&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">origin</span> <span class="string">&quot;$NEW_TAG&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">login</span> <span class="string">-u</span> <span class="string">&quot;$CI_REGISTRY_USER&quot;</span> <span class="string">-p</span> <span class="string">&quot;$CI_REGISTRY_PASSWORD&quot;</span> <span class="string">$CI_REGISTRY</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">$REGISTRY_PATH:$NEW_TAG</span> <span class="string">.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">$REGISTRY_PATH:$NEW_TAG</span></span><br></pre></td></tr></table></figure><p>這樣設定後，每次 main 分支有 commit，CI&#x2F;CD 就會自動產生新 tag、build 並推送對應版本的 Docker image 讓大家共用。</p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;在專案自動化部署流程中，讓 CI&amp;#x2F;CD pipeline 自動產生遞增 tag、build Docker imag</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] GCP Cloud Run 私有化部署：透過 Load Balancer 實現內網存取與 IP 限制</title>
    <link href="https://blog.marsen.me/2025/06/04/2025/gcp-internal-lb-serivce/"/>
    <id>https://blog.marsen.me/2025/06/04/2025/gcp-internal-lb-serivce/</id>
    <published>2025-06-04T03:42:01.000Z</published>
    <updated>2025-06-05T11:34:38.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>我用 cloud run 建立一個 api 並且有 webhook 的功能<br>並且希望提供一個對外網址給客戶，而不是 <code>*.run.app</code> 結尾的網址。  </p><p>在某些場景下，我們不希望 GCP Cloud Run 對外暴露，</p><p>例如內部 API Gateway 呼叫、CI&#x2F;CD 系統內部流程、或僅提供給 VPC 內特定服務存取的微服務。</p><p>這次的例子是希望加上 IP 的防護，只允許特定的 IP 呼叫，這時候就會希望：</p><ul><li><p>Cloud Run 不對外公開（Private）</p></li><li><p>僅允許 內網 IP 或 Internal Load Balancer 存取</p></li></ul><p>看似簡單，但 GCP Cloud Run 原生是無伺服器架構，預設就是「公開網址」，要讓它只對內部可見，需要搭配一些 GCP 網路元件操作。這篇筆記會帶你逐步設定，並避開一些常見坑洞。</p><h2 id="實作記錄"><a href="#實作記錄" class="headerlink" title="實作記錄"></a>實作記錄</h2><ol><li><p>將 Cloud Run 設為「不公開」<br> 預設 Cloud Run 是公開的，要改為「只有授權的主體可以存取」：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gcloud run services update YOUR_SERVICE \</span><br><span class="line">  --ingress internal-and-cloud-load-balancing \</span><br><span class="line">  --allow-unauthenticated \</span><br><span class="line">  --region YOUR_REGION \</span><br><span class="line">  --project YOUR_PROJECT</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 這樣只有內部的網路才能呼叫 Cloud Run。</p><p> 也可以透過 GUI 設定，選擇你的 Cloud Run &gt;  </p><p> Networking &gt; Ingress 選 internal 勾選 Allow Traffic from external Application Load Balancers</p><p> 可以<a href="https://cloud.google.com/run/docs/securing/ingress#gcloud">參考</a></p></li><li><p>建立 Serverless NEG（Network Endpoint Group）<br>可以用 GUI 建立 Loading Blancer &gt;  </p><p>Edit &gt; Backend configuration &gt;  </p><p>下拉選單選 Create backend service &gt;  </p><p>Backend Type 選 Serverless network endpoint group  </p><p><em>因為是 Cloud Run</em></p></li><li><p>設定 Loading Blancer 的 Backend Service”<br>LB &gt; Edit backend service</p><p>Regions 選擇 Cloud Run 所在的 Region</p><p>預設會有一組 Security Policy</p><p>Cloud Armor policies &gt; 找到這組 Policy 可以作更細緻的設定，Ex:指定 Ip 呼叫</p></li><li><p>Loading Blancer URL Map<br>這是一個額外的設定，情境是原本我已有一組 Domain 與 Backend Service  </p><p>並且已經設定在 LB 上面，在想要共用 Domain 的情況下，我需要設定 URL Map</p><p>保留一組 Path 讓流量打向 Cloud Run，但仍保留其他 API 可以用</p><p>LB &gt; Edit &gt; Routing rules &gt; Mode 選擇 Advanced host and path rule  </p><p>找到指定的 Domain，設定參考如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">defaultService:</span> <span class="string">projects/my-gcp-proj/global/backendServices/my-api</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">path-matcher-7</span></span><br><span class="line"><span class="attr">pathRules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">paths:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/api/v1/*</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">projects/my-gcp-proj/global/backendServices/my-api</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">paths:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/cloud-run-app/*</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">projects/my-gcp-proj/global/backendServices/my-cloud-run-app</span></span><br><span class="line">    <span class="attr">routeAction:</span></span><br><span class="line">      <span class="attr">urlRewrite:</span></span><br><span class="line">        <span class="attr">pathPrefixRewrite:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><p> 以上設定簡單說明如下，</p><ul><li>&#x2F;api&#x2F;v1&#x2F;*：導向 my-api，保留原始路徑。</li><li>&#x2F;cloud-run-app&#x2F;*：導向 my-cloud-run-app，並將路徑重寫為去除 &#x2F;cloud-run-app 前綴。</li><li>其他路徑：預設導向 my-api。</li></ul><p> 這樣設定可讓多個服務共用同一個負載平衡器並支援乾淨的 URL 管理。</p></li></ol><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://webhook.site/">好用測試 Callback 的工具</a></li><li><a href="https://cloud.google.com/run/docs/securing/ingress#gcloud">Restrict network ingress for Cloud Run</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;我用 cloud run 建立一個 api 並且有 webhook 的功能&lt;br&gt;並且希望提供一個對外網址給客戶，而不是 &lt;</summary>
      
    
    
    
    
    <category term="學習筆記" scheme="https://blog.marsen.me/tags/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] 我的 Vim 設定</title>
    <link href="https://blog.marsen.me/2025/05/24/2025/vim_setting/"/>
    <id>https://blog.marsen.me/2025/05/24/2025/vim_setting/</id>
    <published>2025-05-24T05:06:05.000Z</published>
    <updated>2025-06-05T11:34:38.348Z</updated>
    
    <content type="html"><![CDATA[<p>我的 Vim 快捷鍵設定總表，<strong>IdeaVim 與 JetBrain</strong>：</p><hr><table><thead><tr><th>快捷鍵</th><th>模式</th><th>功能說明</th><th>IdeaVim 設定寫法</th></tr></thead><tbody><tr><td>zcc</td><td>n</td><td>清除所有自訂映射</td><td><code>nmap zcc :mapclear!&lt;CR&gt;</code></td></tr><tr><td>zso</td><td>n</td><td>重新載入主 vimrc</td><td><code>nmap zso :source ~/_ideavimrc&lt;CR&gt;</code></td></tr><tr><td>zf</td><td>n&#x2F;i</td><td>跳到定義（Goto Declaration）</td><td><code>nmap zf :action GotoDeclaration&lt;CR&gt;</code><br><code>imap zf &lt;Esc&gt;:action GotoDeclaration&lt;CR&gt;</code></td></tr><tr><td>zrc, zo</td><td>n&#x2F;i</td><td>格式化程式碼（Reformat Code）</td><td><code>nmap zrc :action ReformatCode&lt;CR&gt;</code><br><code>imap zrc &lt;Esc&gt;:action ReformatCode&lt;CR&gt;</code><br><code>nmap zo :action ReformatCode&lt;CR&gt;</code></td></tr><tr><td>zk</td><td>n&#x2F;i</td><td>返回（Back）</td><td><code>nmap zk :action Back&lt;CR&gt;</code><br><code>imap zk &lt;Esc&gt;:action Back&lt;CR&gt;</code></td></tr><tr><td>zj</td><td>n&#x2F;i</td><td>AceAction（自訂動作）</td><td><code>nmap zj :action AceAction&lt;CR&gt;</code><br><code>imap zj &lt;Esc&gt;:action AceAction&lt;CR&gt;</code></td></tr><tr><td>ztt</td><td>n&#x2F;i</td><td>複製區塊並格式化（自訂巨集）</td><td><code>nmap ztt y?[F&lt;CR&gt;/&#123;&lt;CR&gt;%o&lt;Esc&gt;p:action ReformatCode&lt;CR&gt;</code><br><code>imap ztt &lt;Esc&gt;y?[F&lt;CR&gt;/&#123;&lt;CR&gt;%o&lt;Esc&gt;p:action ReformatCode&lt;CR&gt;</code></td></tr><tr><td>zn</td><td>n&#x2F;i</td><td>跳到上一個錯誤（Goto Previous Error）</td><td><code>nmap zn :action GotoPreviousError&lt;CR&gt;</code><br><code>imap zn &lt;Esc&gt;:action GotoPreviousError&lt;CR&gt;</code></td></tr><tr><td>zrr</td><td>n&#x2F;i</td><td>重新命名（Rename Element）</td><td><code>nmap zrr :action RenameElement&lt;CR&gt;</code><br><code>imap zrr &lt;Esc&gt;:action RenameElement&lt;CR&gt;</code></td></tr><tr><td>zra</td><td>n&#x2F;i</td><td>執行所有單元測試</td><td><code>nmap zra :action RiderUnitTestRunSolutionAction&lt;CR&gt;</code><br><code>imap zra &lt;Esc&gt;:action RiderUnitTestRunSolutionAction&lt;CR&gt;</code></td></tr><tr><td>zrm</td><td>n&#x2F;v</td><td>萃取方法（Extract Method）</td><td><code>nmap zrm :action ExtractMethod&lt;CR&gt;</code><br><code>vmap zrm :action ExtractMethod&lt;CR&gt;</code></td></tr><tr><td>zri</td><td>n</td><td>Inline（內聯變數&#x2F;方法）</td><td><code>map zri :action Inline&lt;CR&gt;&lt;Esc&gt;</code></td></tr><tr><td>zrp</td><td>n</td><td>Introduce Parameter（引入參數）</td><td><code>map zrp :action IntroduceParameter&lt;CR&gt;</code></td></tr><tr><td>zrv</td><td>n</td><td>Introduce Variable（引入變數）</td><td><code>map zrv :action IntroduceVariable&lt;CR&gt;</code></td></tr><tr><td>zrf</td><td>n</td><td>Introduce Field（引入欄位）</td><td><code>map zrf :action IntroduceField&lt;CR&gt;</code></td></tr><tr><td>,m</td><td>n</td><td>顯示檔案結構</td><td><code>nmap ,m :action FileStructurePopup&lt;CR&gt;</code></td></tr><tr><td>zrt</td><td>n</td><td>最近檔案</td><td><code>nmap zrt :action RecentFiles&lt;CR&gt;</code></td></tr><tr><td>zgc</td><td>n</td><td>開啟 Commit 工具視窗</td><td><code>nmap zgc :action ActivateCommitToolWindow&lt;CR&gt;</code></td></tr><tr><td>zx</td><td>n</td><td>快速重構選單</td><td><code>nmap zx :action Refactorings.QuickListPopupAction &lt;CR&gt;</code></td></tr><tr><td>zae</td><td>n&#x2F;i</td><td>插入 Assert.Equal(,);</td><td><code>nmap zae aAssert.Equal(,);&lt;Esc&gt;T(i</code><br><code>imap zae Assert.Equal(,);&lt;Esc&gt;T(i</code></td></tr><tr><td>zrs</td><td>n</td><td>新增 class 並格式化（自訂巨集）</td><td><code>nmap zrs &quot;add? class&lt;CR&gt;2w&quot;bywjopublic &lt;Esc&gt;&quot;bpa()&lt;CR&gt;&#123;&lt;Esc&gt;&quot;apo&#125;&lt;Esc&gt;:action ReformatCode&lt;CR&gt;</code></td></tr><tr><td>z;</td><td>n&#x2F;i</td><td>行尾加分號</td><td><code>nmap z; $a;&lt;Esc&gt;</code><br><code>imap z; &lt;Esc&gt;$a;</code></td></tr><tr><td>,p, ,P</td><td>n</td><td>黏貼暫存區 0 的內容</td><td><code>nmap ,p &quot;0p</code><br><code>nmap ,P &quot;0P</code></td></tr><tr><td>z,p, z,P</td><td>i</td><td>插入暫存區 0 的內容</td><td><code>imap z,p &lt;Esc&gt;&quot;0pa</code><br><code>imap z,P &lt;Esc&gt;&quot;0Pa</code></td></tr><tr><td>z,</td><td>n</td><td>選取括號內內容（vi)）</td><td><code>:nmap z, vi)</code></td></tr><tr><td>z.</td><td>n</td><td>選取大括號內內容（vi}）</td><td><code>:nmap z. vi&#125;</code></td></tr><tr><td><Esc></td><td>v</td><td>連續多次離開選取模式</td><td><code>:vmap &lt;Esc&gt; &lt;Esc&gt;&lt;Esc&gt;&lt;Esc&gt;</code></td></tr><tr><td>jj</td><td>i</td><td>退出插入模式</td><td><code>:imap jj &lt;Esc&gt;</code></td></tr><tr><td><BS></td><td>n</td><td>在普通模式下插入 Backspace</td><td><code>:nmap &lt;BS&gt; a&lt;BS&gt;</code></td></tr><tr><td>zh</td><td>n&#x2F;i</td><td>跳到行首</td><td><code>:nmap zh ^</code><br><code>:imap zh &lt;Esc&gt;^i</code></td></tr><tr><td>zl</td><td>n&#x2F;i</td><td>跳到行尾</td><td><code>:nmap zl $</code><br><code>:imap zl &lt;End&gt;</code></td></tr><tr><td>hc</td><td>n</td><td>Ctrl+C</td><td><code>:nmap hc ^C</code></td></tr><tr><td>zb</td><td>n&#x2F;v</td><td>單字取代</td><td><code>:nmap zb bcw</code><br><code>:vmap zb &lt;Esc&gt;bcw</code></td></tr><tr><td>zd</td><td>i</td><td>刪除當前行</td><td><code>:imap zd &lt;Esc&gt;dd</code></td></tr><tr><td>j, k</td><td>n</td><td>軟換行移動</td><td><code>nmap j gj</code><br><code>nmap k gk</code></td></tr><tr><td>qq</td><td>n</td><td>強制關閉檔案</td><td><code>nmap qq ZQ</code></td></tr><tr><td>zq</td><td>n</td><td>儲存並關閉檔案</td><td><code>nmap zq :wq&lt;CR&gt;</code></td></tr><tr><td><C-x></td><td>i</td><td>刪除當前行</td><td><code>:imap &lt;C-x&gt; &lt;Esc&gt;dd</code></td></tr><tr><td><C-a></td><td>i</td><td>全選</td><td><code>:imap &lt;C-a&gt; &lt;Esc&gt;ma&lt;CR&gt;ggVG</code></td></tr><tr><td>,i, ,a</td><td>n</td><td>替換字元</td><td><code>:map ,i &lt;Esc&gt;r</code><br><code>:map ,a &lt;Esc&gt;r</code></td></tr></tbody></table><hr><p><strong>說明：</strong>  </p><ul><li>n：普通模式（normal mode）  </li><li>i：插入模式（insert mode）  </li><li>v：視覺模式（visual mode）  </li><li><code>&lt;CR&gt;</code> 代表 Enter 鍵，<code>&lt;Esc&gt;</code> 代表 Esc 鍵</li></ul><hr><p>以下是我將 JetBrains（IdeaVim）Vim 快捷鍵移植到 VSCode（VSCodeVim）的對應表，<br>並說明哪些已成功移植、哪些無法移植及原因：</p><hr><table><thead><tr><th>JetBrains 快捷鍵</th><th>VSCode 設定 (before)</th><th>VSCode 指令 (commands)</th><th>功能說明</th><th>可否移植</th><th>備註&#x2F;原因</th></tr></thead><tbody><tr><td>zrr</td><td>[“z”,”r”,”r”]</td><td>editor.action.rename</td><td>重新命名</td><td>✅</td><td>完全支援</td></tr><tr><td>zf</td><td>[“z”,”f”]</td><td>editor.action.revealDefinition</td><td>跳到定義</td><td>✅</td><td>完全支援</td></tr><tr><td>zrc&#x2F;zo</td><td>[“z”,”r”,”c”]&#x2F;[“z”,”o”]</td><td>editor.action.formatDocument</td><td>格式化程式碼</td><td>✅</td><td>完全支援（你已設 zrc，zo 也可加）</td></tr><tr><td>zn</td><td>[“z”,”n”]</td><td>editor.action.marker.prev</td><td>跳到上一個錯誤</td><td>✅</td><td>完全支援</td></tr><tr><td>zrt</td><td>[“z”,”r”,”t”]</td><td>workbench.action.openRecent</td><td>最近檔案</td><td>✅</td><td>完全支援</td></tr><tr><td>,m</td><td>[“,”,”m”]</td><td>workbench.action.gotoSymbol</td><td>檔案結構&#x2F;大綱</td><td>✅</td><td>完全支援</td></tr><tr><td>zx</td><td>[“z”,”x”]</td><td>editor.action.refactor</td><td>顯示重構選單</td><td>✅</td><td>完全支援</td></tr><tr><td>zgc</td><td>[“z”,”g”,”c”]</td><td>workbench.view.scm</td><td>開啟 Source Control 面板</td><td>✅</td><td>完全支援</td></tr><tr><td>zh</td><td>[“z”,”h”]</td><td>cursorHome</td><td>跳到行首</td><td>✅</td><td>完全支援</td></tr><tr><td>zl</td><td>[“z”,”l”]</td><td>cursorEnd</td><td>跳到行尾</td><td>✅</td><td>完全支援</td></tr><tr><td>zrv</td><td>[“z”,”r”,”v”]</td><td>editor.action.codeAction.extract.variable</td><td>萃取變數</td><td>⚠️</td><td>VSCodeVim 有選取限制，部分情境下無法觸發</td></tr><tr><td>zrm</td><td>[“z”,”r”,”m”]</td><td>editor.action.codeAction.extract.method</td><td>萃取方法</td><td>⚠️</td><td>VSCodeVim 有選取限制，部分情境下無法觸發</td></tr><tr><td>zri</td><td>-</td><td>-</td><td>Inline（內聯變數&#x2F;方法）</td><td>❌</td><td>VSCode 沒有公開指令 ID，無法 keybinding</td></tr><tr><td>zrp</td><td>-</td><td>-</td><td>Introduce Parameter</td><td>❌</td><td>VSCode 沒有公開指令 ID，無法 keybinding</td></tr><tr><td>zrf</td><td>-</td><td>-</td><td>Introduce Field</td><td>❌</td><td>VSCode 沒有公開指令 ID，無法 keybinding</td></tr><tr><td>ztt</td><td>-</td><td>-</td><td>巨集&#x2F;多步驟自動化</td><td>❌</td><td>VSCode 不支援 Vim 巨集或多步驟自動化</td></tr><tr><td>zso</td><td>-</td><td>-</td><td>重新載入 vimrc</td><td>❌</td><td>VSCodeVim 不支援 :source 或重新載入 vimrc</td></tr><tr><td>zra</td><td>[“z”,”r”,”a”]</td><td>testing.runAll</td><td>執行所有單元測試</td><td>✅</td><td>需安裝 VSCode 官方 Testing 功能，已可 keybinding</td></tr></tbody></table><hr><h3 id="補充說明"><a href="#補充說明" class="headerlink" title="補充說明"></a>補充說明</h3><ul><li>✅：完全支援，已可用於 VSCodeVim。</li><li>⚠️：VSCodeVim 有技術限制（如需選取內容，觸發不一定成功）。</li><li>❌：VSCode&#x2F;VSCodeVim 無對應指令或功能，無法移植。</li><li>你可以持續用 VSCode 內建的 <code>Cmd+.</code> 或右鍵選單補足無法 keybinding 的重構功能。</li><li><strong>zra</strong>：VSCode 1.59 以上內建 Testing 功能，指令為 <code>testing.runAll</code>，可直接 keybinding，無需額外外掛。</li></ul><hr><p><strong>總結：</strong><br>我已成功將大部分常用 JetBrains Vim 快捷鍵移植到 VSCode，<br>僅少數 JetBrains 專屬重構、巨集、vimrc 相關功能因 VSCode 限制無法移植。  </p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我的 Vim 快捷鍵設定總表，&lt;strong&gt;IdeaVim 與 JetBrain&lt;/strong&gt;：&lt;/p&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;快捷鍵&lt;/th&gt;
&lt;th&gt;模式&lt;/th&gt;
&lt;th&gt;功能說明&lt;/th&gt;
&lt;th&gt;IdeaVim 設定寫法</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [學習筆記] TypeScript 不同寫法的除錯難易比較</title>
    <link href="https://blog.marsen.me/2025/05/17/2025/typescript_error_handle_ways/"/>
    <id>https://blog.marsen.me/2025/05/17/2025/typescript_error_handle_ways/</id>
    <published>2025-05-17T05:23:41.000Z</published>
    <updated>2025-06-05T11:34:38.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>最近在整理一個專案的 API 路由權限設定，<br>對同樣的資料結構、不同的寫法，對於型別檢查和除錯有一點小小心得，稍微作個記錄。</p><h2 id="情境說明"><a href="#情境說明" class="headerlink" title="情境說明"></a>情境說明</h2><p>假設我有一個 API 權限設定如下，每個路由對應一組角色才能訪問：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">endpoint</span>: <span class="string">&quot;/admin&quot;</span>,</span><br><span class="line">  <span class="attr">roles</span>: [<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;superuser&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然後我有一個函式 registerPermissions 要吃這個設定。</p><h3 id="建議寫法"><a href="#建議寫法" class="headerlink" title="建議寫法"></a>建議寫法</h3><p>先給最近建議的寫法，先定義型別，然後變數也套型別<br>好處是能具體的抓到錯誤，壞處是要多考慮一個型別(命名、擺放位置都會是一個要考量的點)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PermissionConfig</span> = &#123;</span><br><span class="line">  <span class="attr">routes</span>: &#123;</span><br><span class="line">    <span class="attr">endpoint</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">roles</span>: <span class="built_in">string</span>[];</span><br><span class="line">  &#125;[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">permissionConfig</span>: <span class="title class_">PermissionConfig</span> = &#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">endpoint</span>: <span class="string">&quot;/admin&quot;</span>,</span><br><span class="line">      <span class="attr">roles</span>: [<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;superuser&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">endpoint</span>: <span class="string">&quot;/profile&quot;</span>,</span><br><span class="line">      <span class="attr">roles</span>: <span class="string">&quot;user&quot;</span>, <span class="comment">// ❌ 馬上紅字報錯</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">registerPermissions</span> = (<span class="params">config: PermissionConfig</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 註冊權限邏輯</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">registerPermissions</span>(permissionConfig);</span><br></pre></td></tr></table></figure><h3 id="先定義變數，但沒套型別"><a href="#先定義變數，但沒套型別" class="headerlink" title="先定義變數，但沒套型別"></a>先定義變數，但沒套型別</h3><p>這是最不推薦的寫法。雖然寫起來最快、最順手，不用考慮命名和檔案擺放的位置，但錯誤訊息會一大坨，難以閱讀。</p><p>在現在這個 AI 時代，也許 AI 能幫你更快理解錯誤，但我還是不建議這麼做。因為一旦習慣這種寫法，很容易錯上加錯。單一錯誤 AI 還能理解，但錯中錯時，AI 也可能會搞不清楚狀況。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> permissionConfig = &#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">endpoint</span>: <span class="string">&quot;/admin&quot;</span>,</span><br><span class="line">      <span class="attr">roles</span>: [<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;superuser&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">endpoint</span>: <span class="string">&quot;/profile&quot;</span>,</span><br><span class="line">      <span class="attr">roles</span>: <span class="string">&quot;user&quot;</span>, <span class="comment">// 🧨 這裡故意寫錯，應該是 array</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">registerPermissions</span> = (<span class="params">config: &#123;</span></span><br><span class="line"><span class="params">  routes: &#123;</span></span><br><span class="line"><span class="params">    endpoint: <span class="built_in">string</span>;</span></span><br><span class="line"><span class="params">    roles: <span class="built_in">string</span>[];</span></span><br><span class="line"><span class="params">  &#125;[];</span></span><br><span class="line"><span class="params">&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 註冊權限邏輯</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">registerPermissions</span>(permissionConfig);</span><br></pre></td></tr></table></figure><p>這種寫法會噴出一堆錯誤。</p><h3 id="寫法三：直接-inline-傳入函式"><a href="#寫法三：直接-inline-傳入函式" class="headerlink" title="寫法三：直接 inline 傳入函式"></a>寫法三：直接 inline 傳入函式</h3><p>如果沒有共用必要的參數，我通常會推薦 inline 寫法。當然前提是這個方法的複雜度要夠低，讓人容易理解。這樣也可以省去命名和型別檔案擺放位置的煩惱。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">registerPermissions</span> = (<span class="params">config: &#123;</span></span><br><span class="line"><span class="params">  routes: &#123;</span></span><br><span class="line"><span class="params">    endpoint: <span class="built_in">string</span>;</span></span><br><span class="line"><span class="params">    roles: <span class="built_in">string</span>[];</span></span><br><span class="line"><span class="params">  &#125;[];</span></span><br><span class="line"><span class="params">&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 註冊權限邏輯</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">registerPermissions</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">endpoint</span>: <span class="string">&quot;/admin&quot;</span>,</span><br><span class="line">      <span class="attr">roles</span>: [<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;superuser&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">endpoint</span>: <span class="string">&quot;/profile&quot;</span>,</span><br><span class="line">      <span class="attr">roles</span>: <span class="string">&quot;user&quot;</span>, <span class="comment">// ❌ 馬上紅字報錯</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="小結：推薦寫法"><a href="#小結：推薦寫法" class="headerlink" title="小結：推薦寫法"></a>小結：推薦寫法</h2><p>最推薦第一種，但實務上我可能會更多的選擇第三種寫法。<br>要有上下文，請團隊作好自已的判斷。</p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;最近在整理一個專案的 API 路由權限設定，&lt;br&gt;對同樣的資料結構、不同的寫法，對於型別檢查和除錯有一點小小心得，稍微作個</summary>
      
    
    
    
    
    <category term="學習筆記" scheme="https://blog.marsen.me/tags/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] Linux NO Password 執行指令</title>
    <link href="https://blog.marsen.me/2025/05/09/2025/linux_sudo_no_passwd/"/>
    <id>https://blog.marsen.me/2025/05/09/2025/linux_sudo_no_passwd/</id>
    <published>2025-05-09T08:43:47.000Z</published>
    <updated>2025-06-05T11:34:38.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>最近在部署某個 webapi server，<br>這個 webapi 會用一個特別的帳號去執行，但是不會給他設定密碼，<br>我需要使用 pm2 startup 設定開機自動啟動 webapi 服務。  </p><h2 id="問題：執行指令會要求輸入密碼"><a href="#問題：執行指令會要求輸入密碼" class="headerlink" title="問題：執行指令會要求輸入密碼"></a>問題：執行指令會要求輸入密碼</h2><p>但是我沒有也不打算提供密碼給個 webapi 服務帳號</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">env</span> PATH=<span class="variable">$PATH</span>:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u marsen --hp /home/marsen</span><br><span class="line">[sudo] password <span class="keyword">for</span> marsen:</span><br></pre></td></tr></table></figure><h2 id="嘗試解法：用-visudo-寫-NOPASSWD"><a href="#嘗試解法：用-visudo-寫-NOPASSWD" class="headerlink" title="嘗試解法：用 visudo 寫 NOPASSWD"></a>嘗試解法：用 visudo 寫 NOPASSWD</h2><p>為了讓 <code>aiplux</code> 帳號執行特定指令時不需要輸入密碼，可以透過 <code>visudo</code> 編輯 <code>sudoers</code> 檔案。以下是具體步驟：</p><ol><li><p>開啟 <code>sudoers</code> 編輯器：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo visudo</span><br></pre></td></tr></table></figure></li><li><p>在檔案中新增以下內容：</p></li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aiplux ALL=(ALL) NOPASSWD: /usr/lib/node_modules/pm2/bin/pm2</span><br></pre></td></tr></table></figure><p>這樣的設定可以確保 <code>aiplux</code> 帳號在執行 <code>/usr/lib/node_modules/pm2/bin/pm2</code> 時不需要輸入密碼，同時避免開放過多權限。</p><h2 id="小心資安風險"><a href="#小心資安風險" class="headerlink" title="小心資安風險"></a>小心資安風險</h2><p>上面的作法是改自另一位同事的作法，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;marsen ALL=(ALL) NOPASSWD: /usr/bin/apt, /usr/bin/apt-get, /usr/bin/env&quot;</span> | sudo <span class="built_in">tee</span> /etc/sudoers.d/marsen &gt;/dev/null</span><br><span class="line"><span class="built_in">chmod</span> 440 /etc/sudoers.d/marsen</span><br></pre></td></tr></table></figure><p>這段設定的目的是：</p><ol><li>允許 <code>marsen</code> 自由使用 <code>apt</code> 和 <code>apt-get</code> 安裝套件。</li><li>使用 <code>env</code> 包裝 PATH 或其他環境變數來執行 <code>pm2</code>。</li><li>避免密碼卡住，讓 CI&#x2F;CD 流程順利執行。</li></ol><p>雖然給足夠的權限，可以無密碼執行，但是也帶來很多潛在風險。</p><p>資安問題：&#x2F;usr&#x2F;bin&#x2F;env 是個危險洞口</p><p>看起來只是想加環境變數用 <code>env</code>，但其實這一條非常危險。為什麼？來看看 <code>env</code> 的本質：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/env bash</span><br><span class="line">sudo /usr/bin/env node</span><br><span class="line">sudo /usr/bin/env python</span><br></pre></td></tr></table></figure><p>這些指令會用 root 權限執行對應的 shell 或程式，等於你給了 <code>marsen</code> 完整 root 執行任意程式的能力，這十分危險。</p><p>再看 <code>/usr/bin/apt</code> 和 <code>apt-get</code>，同樣是高權限指令。如果沒有限制，也可以被濫用來刪除套件或改動系統。</p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p><strong>審慎選擇開放的指令</strong><br>在自動化流程中，為了避免 sudo 密碼擋路，設定 <code>NOPASSWD</code> 是常見的解法。<br>但在設定時，務必審慎選擇開放的指令範圍，避免一時圖方便，打開整台主機的後門。<br>建議只開放必要的指令，並明確指定路徑，確保安全性。  </p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;最近在部署某個 webapi server，&lt;br&gt;這個 webapi 會用一個特別的帳號去執行，但是不會給他設定密碼，&lt;b</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [踩雷筆記] CORS 錯誤的元兇竟然是瀏覽器外掛？</title>
    <link href="https://blog.marsen.me/2025/05/08/2025/cors_in_browser_exten/"/>
    <id>https://blog.marsen.me/2025/05/08/2025/cors_in_browser_exten/</id>
    <published>2025-05-08T06:31:47.000Z</published>
    <updated>2025-06-05T11:34:38.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>最近在本機開發一支簡單的上傳 API，使用 Express.js 搭配 TypeScript。<br>預期只是在 local 上做個整合測試，前端跑在 <code>localhost:5173</code>，後端是 <code>localhost:3000</code>，照理來說只要 CORS 設好就萬事 OK。</p><p>結果——炸了。</p><h2 id="問題現象"><a href="#問題現象" class="headerlink" title="問題現象"></a>問題現象</h2><p>瀏覽器跳出熟悉的錯誤訊息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to fetch at <span class="string">&#x27;http://localhost:3000/upload&#x27;</span> from origin <span class="string">&#x27;http://localhost:5173&#x27;</span> has been blocked by CORS policy...</span><br></pre></td></tr></table></figure><p>一看就是 CORS 錯誤，老問題了，馬上開始排查：</p><ul><li>確認 <code>cors()</code> middleware 有設好</li><li>檢查 headers 有無正確設定</li><li>懷疑是 OPTIONS preflight 沒處理好，也做了補強</li></ul><p>怎麼改都一樣。</p><p>接著我試了無痕模式，欸？沒事了。<br>懷疑是瀏覽器快取作怪，清除後還是一樣。<br>換用 Edge（沒裝任何外掛）測試，正常。</p><h2 id="真相大白"><a href="#真相大白" class="headerlink" title="真相大白"></a>真相大白</h2><p>這時我就卡關了，因為一切設定看起來都沒問題。  </p><p>隨口問了新人同事，提到有可能是瀏覽器外掛的問題，我再測試一下  </p><p>確定是我在 Brave 安裝的外掛「Page Assist - A Web UI for Local AI Models」在搞鬼！  </p><p>這個外掛可能會偷偷注入 JS 或改寫 request header，導致 CORS 預檢請求出現異常，讓瀏覽器誤以為是 server 設定問題。  </p><p>我一停用外掛，再次測試，一切正常。  </p><h2 id="心得與提醒"><a href="#心得與提醒" class="headerlink" title="心得與提醒"></a>心得與提醒</h2><p>這次的經驗讓我再次體會：</p><blockquote><p>最難 debug 的錯誤，往往來自你「以為不會出錯」的地方。</p></blockquote><p>給未來的自己幾個建議：</p><ul><li><strong>開無痕模式測試</strong>：能快速排除快取與外掛的干擾  </li><li><strong>換乾淨的瀏覽器</strong>：有時候 Edge 或 Safari 能救你一命  </li><li><strong>早點求救</strong>：卡住就問，別一個人浪費太多時間在錯的地方打轉，別人可以給你不同觀點</li></ul><p>這類奇怪的問題其實很常見，但也正因為難以複製與預期，才更值得記錄下來。</p><p>下次遇到奇怪的 CORS 錯誤時，可以考慮是<strong>裝的外掛在搞事。</strong></p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;最近在本機開發一支簡單的上傳 API，使用 Express.js 搭配 TypeScript。&lt;br&gt;預期只是在 local</summary>
      
    
    
    
    
    <category term="踩雷筆記" scheme="https://blog.marsen.me/tags/%E8%B8%A9%E9%9B%B7%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] Node.js Express 錯誤處理全攻略：同步、非同步與 Stream Error</title>
    <link href="https://blog.marsen.me/2025/05/08/2025/express_error_handle/"/>
    <id>https://blog.marsen.me/2025/05/08/2025/express_error_handle/</id>
    <published>2025-05-08T05:47:43.000Z</published>
    <updated>2025-06-05T11:34:38.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>Node.js + Express 是開發 REST API 時最常見的組合。<br>這篇文章會試著寫出三大常見錯誤類型的處理方式：</p><ul><li>同步錯誤（throw）</li><li>非同步錯誤（async&#x2F;await）</li><li>Stream error（例如檔案下載）</li></ul><p>如果你用的是 Express 5，其實已經支援原生 async function 錯誤攔截，連 async wrapper 都可以省下！</p><h2 id="Express-的錯誤處理-middleware-是怎麼運作的？"><a href="#Express-的錯誤處理-middleware-是怎麼運作的？" class="headerlink" title="Express 的錯誤處理 middleware 是怎麼運作的？"></a>Express 的錯誤處理 middleware 是怎麼運作的？</h2><p>只要你呼叫 <code>next(err)</code>，Express 就會跳到錯誤處理 middleware：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: err.<span class="property">message</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>這個 middleware 需要有四個參數，Express 會自動辨識它是錯誤處理 middleware。</p><h3 id="同步錯誤怎麼處理？"><a href="#同步錯誤怎麼處理？" class="headerlink" title="同步錯誤怎麼處理？"></a>同步錯誤怎麼處理？</h3><p>這種最簡單，直接 throw 就可以：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/sync-error&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;同步錯誤&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Express 會自動幫你捕捉，送進錯誤 middleware，不需要特別處理。</p><h3 id="Express-4-async-await-的錯誤要小心"><a href="#Express-4-async-await-的錯誤要小心" class="headerlink" title="Express 4 async&#x2F;await 的錯誤要小心"></a>Express 4 async&#x2F;await 的錯誤要小心</h3><p>Express 4 的情況：<br>你可能會寫這樣的 code：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/async-error&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;async/await 錯誤&#x27;</span>) <span class="comment">// ❌ 不會被 Express 捕捉</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>這樣寫會直接讓整個程式 crash，因為 Express 4 不會自動處理 async function 裡的錯誤。</p><h4 id="解法：自己包一層-asyncWrapper"><a href="#解法：自己包一層-asyncWrapper" class="headerlink" title="解法：自己包一層 asyncWrapper"></a>解法：自己包一層 asyncWrapper</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">asyncWrapper</span> = (<span class="params">fn</span>) =&gt; <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">fn</span>(req, res, next).<span class="title function_">catch</span>(next)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/async-error&#x27;</span>, <span class="title function_">asyncWrapper</span>(<span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;async/await 錯誤&#x27;</span>)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>這樣就能安全把錯誤丟給錯誤 middleware 處理。</p><h3 id="Express-5：原生支援-async-function"><a href="#Express-5：原生支援-async-function" class="headerlink" title="Express 5：原生支援 async function"></a>Express 5：原生支援 async function</h3><p>如果你用的是 Express 5，那更簡單了，直接寫 async function，Express 就會自動捕捉錯誤，完全不需要 async wrapper！</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/async-error&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">getSomeData</span>()</span><br><span class="line">  <span class="keyword">if</span> (!data) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;找不到資料&#x27;</span>)</span><br><span class="line">  res.<span class="title function_">json</span>(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>是不是清爽多了？</p><p>!!注意：要確認你的專案使用的是 <a href="mailto:&#101;&#120;&#x70;&#x72;&#101;&#x73;&#x73;&#64;&#53;&#46;&#120;">express@5.x</a> 版本。<br>可以用以下指令確認</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm list express</span><br></pre></td></tr></table></figure><h3 id="Stream-error：Express-捕不到"><a href="#Stream-error：Express-捕不到" class="headerlink" title="Stream error：Express 捕不到"></a>Stream error：Express 捕不到</h3><p>問題在哪？<br>stream 錯誤是透過 EventEmitter 的 ‘error’ 事件傳遞，Express 根本不知道有這回事，例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/file&#x27;</span>, <span class="title function_">asyncWrapper</span>(<span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> file = <span class="title function_">getSomeGCSFile</span>()</span><br><span class="line">  file.<span class="title function_">createReadStream</span>().<span class="title function_">pipe</span>(res) <span class="comment">// ❌ 權限錯誤會 crash，Express 不會接到</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h4 id="正確作法：自己監聽-‘error’，再丟給-next"><a href="#正確作法：自己監聽-‘error’，再丟給-next" class="headerlink" title="正確作法：自己監聽 ‘error’，再丟給 next()**"></a>正確作法：自己監聽 ‘error’，再丟給 next()**</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/file&#x27;</span>, <span class="title function_">asyncWrapper</span>(<span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> file = <span class="title function_">getSomeGCSFile</span>()</span><br><span class="line">  <span class="keyword">const</span> stream = file.<span class="title function_">createReadStream</span>()</span><br><span class="line">  stream.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, next)</span><br><span class="line">  stream.<span class="title function_">pipe</span>(res)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h4 id="Bonus：包成一個工具函式"><a href="#Bonus：包成一個工具函式" class="headerlink" title="Bonus：包成一個工具函式"></a>Bonus：包成一個工具函式</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utils/streamErrorHandler.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Response</span>, <span class="title class_">NextFunction</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Readable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;stream&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">pipeWithErrorHandler</span>(<span class="params">stream: Readable, res: Response, next: NextFunction</span>) &#123;</span><br><span class="line">  stream.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, next)</span><br><span class="line">  stream.<span class="title function_">pipe</span>(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/file&#x27;</span>, <span class="title function_">asyncWrapper</span>(<span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> file = <span class="title function_">getSomeGCSFile</span>()</span><br><span class="line">  <span class="title function_">pipeWithErrorHandler</span>(file.<span class="title function_">createReadStream</span>(), res, next)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h2 id="整體範例程式"><a href="#整體範例程式" class="headerlink" title="整體範例程式"></a>整體範例程式</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; asyncWrapper &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils/asyncWrapper&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; pipeWithErrorHandler &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils/streamErrorHandler&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模擬 GCS 檔案物件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSomeGCSFile</span>(<span class="params">shouldError: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="title class_">Readable</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;stream&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (shouldError) &#123;</span><br><span class="line">    <span class="comment">// 會 emit error 的 stream</span></span><br><span class="line">    <span class="keyword">const</span> stream = <span class="keyword">new</span> <span class="title class_">Readable</span>(&#123;</span><br><span class="line">      <span class="title function_">read</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">emit</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;stream error 測試&#x27;</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">createReadStream</span>: <span class="function">() =&gt;</span> stream</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 正常回傳資料</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">createReadStream</span>: <span class="function">() =&gt;</span> <span class="title class_">Readable</span>.<span class="title function_">from</span>([<span class="string">&#x27;Hello World&#x27;</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步錯誤</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/sync-error&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;同步錯誤&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非同步錯誤（Express 4 寫法）</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/async-error-4&#x27;</span>, <span class="title function_">asyncWrapper</span>(<span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;async/await 錯誤, Express 4.x 以下的寫法&#x27;</span>)</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非同步錯誤（Express 5 寫法）</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/async-error&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;async/await 錯誤&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// stream error（正確處理）</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/file&#x27;</span>, <span class="title function_">asyncWrapper</span>(<span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> file = <span class="title function_">getSomeGCSFile</span>(<span class="literal">true</span>)</span><br><span class="line">  <span class="title function_">pipeWithErrorHandler</span>(file.<span class="title function_">createReadStream</span>(), res, next)</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// stream error（沒處理會 crash）</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/file-no-handle&#x27;</span>, <span class="title function_">asyncWrapper</span>(<span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> file = <span class="title function_">getSomeGCSFile</span>(<span class="literal">true</span>)</span><br><span class="line">  file.<span class="title function_">createReadStream</span>().<span class="title function_">pipe</span>(res)</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 錯誤 middleware</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: err.<span class="property">message</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server started&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果你用的是 Express 5，可以把 asyncWrapper 都拿掉，程式碼會更簡潔！</p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><table><thead><tr><th>類型</th><th>會自動處理？</th><th>解法</th></tr></thead><tbody><tr><td>同步錯誤</td><td>✅ Express 自動處理</td><td>直接 throw 就好</td></tr><tr><td>async&#x2F;await 錯誤</td><td>❌ Express 4 不會處理</td><td>用 asyncWrapper（Express 4）</td></tr><tr><td></td><td>✅ Express 5 自動處理</td><td>或直接寫 async function（Express 5）</td></tr><tr><td>Stream error</td><td>❌ 完全不會處理</td><td>監聽 stream.on(‘error’, next)</td></tr></tbody></table><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://github.com/marsen/express-handle-err">https://github.com/marsen/express-handle-err</a></li><li><a href="https://expressjs.com/en/guide/error-handling.html">https://expressjs.com/en/guide/error-handling.html</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;Node.js + Express 是開發 REST API 時最常見的組合。&lt;br&gt;這篇文章會試著寫出三大常見錯誤類型的處</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [生活筆記] 我們不再需要碼農??</title>
    <link href="https://blog.marsen.me/2025/04/22/2025/should_we_need_rd/"/>
    <id>https://blog.marsen.me/2025/04/22/2025/should_we_need_rd/</id>
    <published>2025-04-22T07:49:41.000Z</published>
    <updated>2025-06-05T11:34:38.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>2023 當主管到今天的一些體悟, 也感受到一些風向的轉換，<br>先說結論，在３～５年內我們不需要低階工程師了。<br>軟技能與 AI 應用能力高的業務、年輕人可以輕易的取代掉這一層人。</p><h2 id="人物與事件"><a href="#人物與事件" class="headerlink" title="人物與事件"></a>人物與事件</h2><p><code>以下內容為個人觀察與經驗分享</code><br><code>如有雷同，純屬巧合，無意影射任何特定個人或團體。</code></p><h3 id="不願意嚐試新技術，守成者"><a href="#不願意嚐試新技術，守成者" class="headerlink" title="不願意嚐試新技術，守成者"></a>不願意嚐試新技術，守成者</h3><p>某些特定技術持有者，主要的技術用得很熟，但對於新技術完全不感興趣，拒絕學習。<br>理由是「這些技術不穩定，還是用熟悉的比較好」。<br>或是技術框架很小，只能處理前端或是資料庫…諸如此類<br>時代在變，特定技能的需求降低之，或許只能請他離開（業務性質變更，有減少勞工之必要，又無適當工作可供安置時。）</p><p>當團隊需要他協助帶新人時，他的方式是「放著讓他看 Code」，完全不願意提供指導，導致新人進步緩慢。<br>當團隊需要他改善流程時，他的方式以拖待變，不推動事務改變。</p><h3 id="沒事就睡覺，睡魔"><a href="#沒事就睡覺，睡魔" class="headerlink" title="沒事就睡覺，睡魔"></a>沒事就睡覺，睡魔</h3><p>經常在工作時間睡覺，對專案進度毫不關心，最終因為態度問題被老闆開除。<br>明明就有一定的技術力，但可能人生已經無慾無求，沒有動力。<br>上班只是來打發時間，像在等待什麼結束的信號。<br>每天坐在電腦前，螢幕亮著，眼神卻空洞，彷彿身體還在職場，靈魂早已辭職。<br>他對看板的任務視而不見，對系統通知的提醒習以為常，<br>彷彿這些專案任務與他毫無關聯。<br>工作到一半，頭一低好像走了…</p><h3 id="紙上談兵學院派，研究生"><a href="#紙上談兵學院派，研究生" class="headerlink" title="紙上談兵學院派，研究生"></a>紙上談兵學院派，研究生</h3><p>這位工程師基本衛生不佳，雖然後口條很好但是有嚴重口臭。<br>經常在會議中侃侃而談，除了氣味不佳外，實際執行與說得也有很大的差距。<br>說一套作一套，程式雖然能運行，但結構混亂，難以維護，不要說交接，過個幾周他的程式他自已就看不懂。　　</p><p>此外連基本的誠實都作不到，有一例是曾經把奶茶打翻到筆電上造成損毀。　　<br>本來不是多大的錯誤，但問他有沒有什麼可能性時，完全沒有提及。<br>電腦後送修有人為毀損証據才承認；　　<br>不論是遺忘或刻意不提都是反應自私與不負責的表現，令人無法信賴。</p><h3 id="你沒說站起來要用腳，被動的小寶寶"><a href="#你沒說站起來要用腳，被動的小寶寶" class="headerlink" title="你沒說站起來要用腳，被動的小寶寶"></a>你沒說站起來要用腳，被動的小寶寶</h3><p>這類型的工程師在面對複雜任務時，總是無法將大目標拆解成可執行的小步驟，導致工作不透明，副作用就是進度緩慢且混亂。  </p><p>只會按照指令執行，缺乏主動思考與解決問題的能力。<br>你下的指令要十分精確，依他所見，所有的錯都是別人的錯，<br>只要有人給他夠精確的指令，他才不會失敗。<br>當遇到需要延伸思考的情境時，無法舉一反三或觸類旁通，反而責怪別人沒有說清楚。  </p><p>舉例來說，當主管要求他修復一個功能時，他只會修復表面問題，卻忽略了相關的邏輯錯誤或潛在的風險，<br>最終導致問題反覆出現，越處理越模糊。</p><p>這樣的人往往需要主管或同事不斷提醒與協助，無法獨立完成任務。<br>更嚴重的是，他們常常拖累高效率的同事，形成能者過勞的團隊氛圍。  </p><p><img src="/images/2025/cynefin.png" alt="工作拆解的 Cynefin"></p><h3 id="別人都爛扣，就我神乎奇技"><a href="#別人都爛扣，就我神乎奇技" class="headerlink" title="別人都爛扣，就我神乎奇技"></a>別人都爛扣，就我神乎奇技</h3><p>他愛挑別人的錯，卻聽不得一句建議。<br>自己寫的程式像拼圖，混亂又難維護，還自誇是「靈活不受限的寫法」。  </p><p>碰到維運就閃，遇到 bug 就推，專案落後了，只會說：「一開始規劃就有問題吧。」<br>從不提解法，只有抱怨。  </p><p>團隊在前進，他卻像錨，把整艘船拖住。<br>當指出他的問題，還會氣急敗壞發火。讓整個氣氛更加尷尬。</p><h3 id="看不懂英文文件還想當工程師"><a href="#看不懂英文文件還想當工程師" class="headerlink" title="看不懂英文文件還想當工程師"></a>看不懂英文文件還想當工程師</h3><p>花了三周搞不定一個 API, 每次都說這個那個多複雜, 　<br>別人（還是兩位）１小時就搞定。<br>最後才承認英文看不懂。一是不懂承諾，二是卡住不求救  </p><p>這樣的情況怎麼能不讓人失望？明明一開始就知道自己有困難，卻硬是選擇隱瞞，<br>這樣的態度才是最大的問題。不求助，讓問題像滾雪球一樣越滾越大。  </p><p>問題不在於他無法解決，而在於他選擇逃避，選擇不與人合作，甚至不願意承認自己的困境。<br>這種自我封閉的態度，讓他錯失更多學習的機會也讓團隊承擔額外的風險。  </p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;2023 當主管到今天的一些體悟, 也感受到一些風向的轉換，&lt;br&gt;先說結論，在３～５年內我們不需要低階工程師了。&lt;br&gt;軟</summary>
      
    
    
    
    
    <category term="生活筆記" scheme="https://blog.marsen.me/tags/%E7%94%9F%E6%B4%BB%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [生活筆記] First Trade 開卡記錄</title>
    <link href="https://blog.marsen.me/2025/03/25/2025/firstrade_activate_debit_card/"/>
    <id>https://blog.marsen.me/2025/03/25/2025/firstrade_activate_debit_card/</id>
    <published>2025-03-25T20:31:05.000Z</published>
    <updated>2025-06-05T11:34:38.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>First Trade Debit 卡是一張簽帳金融卡，與信用卡不同，它直接從投資帳戶扣款，不能超額消費。<br>這張卡可在全球任何支援 VISA 的商店與 ATM 使用，方便在美國內外進行交易與提款。<br>First Trade 可以在線上申請，網站上說約一個月的工作日，我大概10天左右收到。  </p><h2 id="開卡"><a href="#開卡" class="headerlink" title="開卡"></a>開卡</h2><p>卡片包裹內會附上開卡說明，但如果看不懂，直接跟著以下步驟操作就好。</p><ol><li><p>撥打開卡電話<br>  使用國際電話撥打 First Securities 客服專線：002 1-855-253-1057<br>  電話錄音為英文，但全程無需說話，只需依指示輸入數字即可。</p></li><li><p>開卡流程<br>輸入16位卡號：直接輸入卡片正面16位數，不需要按 #。<br>輸入社會安全碼（SSN）：輸入 5436。<br>輸入生日資訊：<br>格式為「MMYY」，例如 1985年2月生 → 輸入 0285。(特別注意不要輸入成月日)<br>輸入卡片背面安全碼（CVV）：3 位數的安全碼，位於卡片背面。<br>設定提款&#x2F;交易密碼：輸入 4 位數密碼。<br>確認密碼：再次輸入相同密碼。</p></li></ol><p>以上完成開卡，約１分鐘內可以完成</p><h2 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h2><p>Firstrade Debit 卡適合那些在　Firstrade 賬戶中有至少 $25,000 存款的投資者。<br>它可全球使用，可以用來提款與消費，並且每月首次提款免費。<br>依據文章說明，每個月第一次的使用（提領或消費）可享跨境手續費返還。<br>申請人需開設現金管理賬戶並保持最低存款。<br>需要注意的是，每日提款限額為 $1,000，並且需要保持最低餘額。<br>超過就要收 3% 手續費。<br>感覺實用性不高，或許在國外緊需現金時可以用來應急。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.firstrade.com/zh-TW/resources/guides/stocks/debit#debit01">https://www.firstrade.com/zh-TW/resources/guides/stocks/debit#debit01</a></li><li><a href="https://rich01.com/how-to-apply-firstrade-debit-card/">https://rich01.com/how-to-apply-firstrade-debit-card/</a></li><li><a href="https://sleepyinvest.com/firstrade-debit-card/">https://sleepyinvest.com/firstrade-debit-card/</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;First Trade Debit 卡是一張簽帳金融卡，與信用卡不同，它直接從投資帳戶扣款，不能超額消費。&lt;br&gt;這張卡可在</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title> [實作筆記] 設定 VSCode 外掛 CLine(MCP Client) Azure Open AI 的踩雷筆記</title>
    <link href="https://blog.marsen.me/2025/03/24/2025/ai_Cline_mcp_Azure_open_ai_settings/"/>
    <id>https://blog.marsen.me/2025/03/24/2025/ai_Cline_mcp_Azure_open_ai_settings/</id>
    <published>2025-03-24T09:54:05.000Z</published>
    <updated>2025-06-05T11:34:38.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>MCP（Model Context Protocol）是一種協議，最近社群很夯的東西，<br>所以稍微研究它一下，不論它是否只是個 Buzz word。  </p><p>Cline 是開源 AI 程式設計助理，可以外掛至 VS Code，具計劃&#x2F;執行模式，支援 MCP 協議，<br>所以我選擇它當作入門的工具之一。  </p><h2 id="問題筆記"><a href="#問題筆記" class="headerlink" title="問題筆記"></a>問題筆記</h2><p>使用 VSCode 與 Cline 作為起點時，一個雷點就是使用 Azure Open AI 用戶，究竟應該怎麼設定?<br>從<a href="https://github.com/search?q=repo:cline/cline+OpenAI+Compatible&type=issues">此處</a>可以看到很多人的討論。<br>看來有很多人也常常撞牆，雖然無法全面的測試一輪，<br>但以下是我對 Azure OpenAI 成功的設置，記錄下來作為以後參考用</p><p>API Provider 選擇 <code>OpenAI Compatible</code><br>Base URL 我直接從 Azure AI Foundry 上取出:<br>在 <a href="https://portal.azure.com/">https://portal.azure.com/</a> 找到 Azure AI services | Azure OpenAI，再前往  Azure AI Foundry Portal<br>此時你應該可以在 Deployments 找到你的 Targe URI，類似如下<br><code>https://&#123;resourcename&#125;.openai.azure.com/openai/deployments/&#123;deployment_name&#125;/chat/completions?api-version=&#123;apiversion&#125;</code><br>API Key 就不用多說了，Azure 會提供你兩把金鑰，如果有異常時可以替換它們，<br>Model ID 可以在 deployments &gt; Model name 點擊連結後找到，會類似下面這樣  </p><p><code>azureml://registries/azure-openai/models/gpt-4o/versions/2024-11-20</code></p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.explainthis.io/zh-hant/ai/mcp">https://www.explainthis.io/zh-hant/ai/mcp</a></li><li><a href="https://cline.bot/">https://cline.bot/</a></li><li><a href="https://www.youtube.com/watch?v=McNRkd5CxFY">https://www.youtube.com/watch?v=McNRkd5CxFY</a></li><li><a href="https://modelcontextprotocol.io/quickstart/server">https://modelcontextprotocol.io/quickstart/server</a></li><li><a href="https://www.axtonliu.ai/newsletters/ai-2/posts/claude-mcp-protocol-guide">https://www.axtonliu.ai/newsletters/ai-2/posts/claude-mcp-protocol-guide</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;MCP（Model Context Protocol）是一種協議，最近社群很夯的東西，&lt;br&gt;所以稍微研究它一下，不論它是否</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] 踩雷 GCP Instance Schedules 排程開關機</title>
    <link href="https://blog.marsen.me/2025/02/24/2025/gcp-iam-and-instance-schedule/"/>
    <id>https://blog.marsen.me/2025/02/24/2025/gcp-iam-and-instance-schedule/</id>
    <published>2025-02-24T04:01:41.000Z</published>
    <updated>2025-06-05T11:34:38.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>因為周末機器閒置很浪費，想透過排程來開關機達到節省成本的效果。<br>以為設定排程開關機這麼簡單，結果在操作過程中，遇到了一些讓我差點摔機的問題。<br>這篇就來記錄一下，從設定到踩雷，再到如何解決的過程。</p><h3 id="幾個作法"><a href="#幾個作法" class="headerlink" title="幾個作法"></a>幾個作法</h3><p>上網找了一些作法，得到以下的建議<br>最簡單的方法：使用 Instance Schedules<br>較靈活的方法：使用 Cloud Scheduler + Cloud Functions<br>基礎架構管理：使用 Terraform  </p><p>我沒有複雜的情境，當然選最簡單的<br>只要在 GCP Console 上面操作即可。</p><h3 id="遇到問題"><a href="#遇到問題" class="headerlink" title="遇到問題"></a>遇到問題</h3><blockquote><p>Compute Engine System service account <a href="mailto:&#115;&#101;&#x72;&#118;&#x69;&#x63;&#101;&#x2d;&#x59;&#x4f;&#x55;&#x52;&#45;&#x50;&#x52;&#x4f;&#x4a;&#69;&#x43;&#x54;&#x2d;&#73;&#68;&#x40;&#x63;&#111;&#x6d;&#x70;&#117;&#116;&#x65;&#45;&#x73;&#121;&#x73;&#x74;&#x65;&#x6d;&#46;&#x69;&#x61;&#109;&#46;&#x67;&#x73;&#x65;&#x72;&#118;&#105;&#99;&#x65;&#97;&#x63;&#99;&#x6f;&#x75;&#x6e;&#x74;&#x2e;&#99;&#111;&#x6d;">service-YOUR-PROJECT-ID@compute-system.iam.gserviceaccount.com</a><br>needs to have [compute.instances.start,compute.instances.stop] permissions applied in order to perform this operation.  </p></blockquote><p>而且 Console IAM 裡面看不到這個帳號 <code>service-YOUR-PROJECT-ID@compute-system.iam.gserviceaccount.com</code><br>類似的帳號有<code>YOUR-PROJECT-ID-compute@developer.gserviceaccount.com</code>但兩者並不相同</p><p>實際上是 GCP 會有一群隱藏帳號<br>清單如下：<br>📌 Compute Engine → <a href="mailto:&#x73;&#101;&#x72;&#x76;&#x69;&#99;&#101;&#45;&#89;&#x4f;&#85;&#82;&#x5f;&#x50;&#82;&#x4f;&#74;&#x45;&#67;&#84;&#95;&#78;&#85;&#x4d;&#x42;&#x45;&#x52;&#64;&#99;&#x6f;&#109;&#112;&#117;&#x74;&#x65;&#45;&#115;&#x79;&#x73;&#116;&#101;&#109;&#46;&#x69;&#x61;&#109;&#x2e;&#x67;&#115;&#101;&#x72;&#x76;&#x69;&#x63;&#x65;&#97;&#99;&#x63;&#x6f;&#117;&#x6e;&#x74;&#46;&#99;&#x6f;&#x6d;">service-YOUR_PROJECT_NUMBER@compute-system.iam.gserviceaccount.com</a><br>📌 App Engine → <a href="mailto:&#x59;&#79;&#x55;&#82;&#x5f;&#x50;&#x52;&#x4f;&#74;&#69;&#x43;&#x54;&#x5f;&#x49;&#x44;&#x40;&#97;&#112;&#x70;&#115;&#x70;&#111;&#116;&#x2e;&#x67;&#115;&#x65;&#114;&#x76;&#105;&#x63;&#101;&#97;&#x63;&#x63;&#111;&#x75;&#x6e;&#116;&#46;&#99;&#x6f;&#109;">YOUR_PROJECT_ID@appspot.gserviceaccount.com</a><br>📌 Cloud Run &#x2F; Functions → <a href="mailto:&#x59;&#x4f;&#x55;&#x52;&#95;&#x50;&#x52;&#x4f;&#x4a;&#69;&#67;&#84;&#95;&#x49;&#x44;&#x2d;&#99;&#111;&#109;&#x70;&#117;&#116;&#x65;&#64;&#x64;&#x65;&#x76;&#101;&#108;&#x6f;&#x70;&#101;&#x72;&#x2e;&#103;&#115;&#x65;&#114;&#118;&#x69;&#99;&#101;&#x61;&#99;&#x63;&#111;&#117;&#x6e;&#x74;&#46;&#x63;&#x6f;&#x6d;">YOUR_PROJECT_ID-compute@developer.gserviceaccount.com</a><br>📌 GKE → <a href="mailto:&#x73;&#x65;&#x72;&#118;&#x69;&#99;&#101;&#x2d;&#89;&#79;&#x55;&#x52;&#x5f;&#x50;&#82;&#x4f;&#x4a;&#69;&#67;&#x54;&#95;&#78;&#85;&#x4d;&#x42;&#x45;&#x52;&#x40;&#99;&#x6f;&#x6e;&#116;&#97;&#105;&#110;&#101;&#x72;&#45;&#x65;&#110;&#103;&#x69;&#x6e;&#101;&#x2d;&#x72;&#x6f;&#98;&#x6f;&#116;&#46;&#x69;&#97;&#109;&#46;&#x67;&#x73;&#x65;&#114;&#x76;&#x69;&#x63;&#101;&#97;&#x63;&#x63;&#x6f;&#117;&#x6e;&#x74;&#x2e;&#x63;&#111;&#109;">service-YOUR_PROJECT_NUMBER@container-engine-robot.iam.gserviceaccount.com</a><br>📌 Cloud Build → <a href="mailto:&#x73;&#101;&#114;&#x76;&#105;&#99;&#x65;&#x2d;&#x59;&#79;&#85;&#x52;&#x5f;&#80;&#x52;&#79;&#x4a;&#69;&#x43;&#84;&#95;&#x4e;&#85;&#77;&#x42;&#69;&#x52;&#64;&#103;&#x63;&#x70;&#x2d;&#115;&#x61;&#x2d;&#99;&#x6c;&#x6f;&#117;&#100;&#98;&#117;&#105;&#108;&#100;&#46;&#x69;&#97;&#109;&#46;&#103;&#x73;&#101;&#x72;&#118;&#105;&#x63;&#x65;&#97;&#x63;&#x63;&#x6f;&#x75;&#x6e;&#x74;&#x2e;&#x63;&#111;&#109;">service-YOUR_PROJECT_NUMBER@gcp-sa-cloudbuild.iam.gserviceaccount.com</a><br>📌 BigQuery → <a href="mailto:&#x73;&#101;&#x72;&#118;&#105;&#x63;&#101;&#x2d;&#89;&#x4f;&#85;&#82;&#x5f;&#x50;&#82;&#79;&#74;&#x45;&#67;&#x54;&#95;&#x4e;&#x55;&#77;&#66;&#69;&#x52;&#x40;&#x67;&#99;&#112;&#x2d;&#115;&#x61;&#45;&#x62;&#105;&#x67;&#x71;&#117;&#101;&#114;&#x79;&#100;&#x61;&#x74;&#x61;&#x74;&#x72;&#97;&#110;&#x73;&#x66;&#x65;&#114;&#46;&#105;&#x61;&#x6d;&#46;&#103;&#x73;&#101;&#x72;&#118;&#105;&#99;&#x65;&#97;&#x63;&#x63;&#x6f;&#117;&#110;&#x74;&#46;&#99;&#111;&#109;">service-YOUR_PROJECT_NUMBER@gcp-sa-bigquerydatatransfer.iam.gserviceaccount.com</a><br>📌 Firestore → <a href="mailto:&#x73;&#x65;&#x72;&#118;&#x69;&#x63;&#101;&#45;&#x59;&#79;&#x55;&#x52;&#x5f;&#x50;&#82;&#79;&#x4a;&#x45;&#67;&#x54;&#x5f;&#78;&#x55;&#x4d;&#66;&#x45;&#82;&#x40;&#103;&#99;&#x70;&#x2d;&#x73;&#x61;&#x2d;&#102;&#105;&#114;&#101;&#115;&#x74;&#x6f;&#114;&#x65;&#46;&#105;&#97;&#109;&#46;&#x67;&#x73;&#101;&#114;&#x76;&#x69;&#99;&#x65;&#97;&#99;&#99;&#x6f;&#x75;&#x6e;&#116;&#46;&#x63;&#x6f;&#109;">service-YOUR_PROJECT_NUMBER@gcp-sa-firestore.iam.gserviceaccount.com</a></p><p>🔍 查詢方式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud projects get-iam-policy YOUR_PROJECT_ID --format=json | jq -r <span class="string">&#x27;.bindings[].members[]&#x27;</span> | grep <span class="string">&#x27;serviceAccount:&#x27;</span></span><br></pre></td></tr></table></figure><p>解法，加權限就好，在 Console 直接加<br>但是在 Console 還是看不到帳號, IAM&#x2F;Service Account&#x2F;Roles 都看不到</p><p>不過我們可以用 CLI 查詢方式</p><h4 id="先確認目前權限"><a href="#先確認目前權限" class="headerlink" title="先確認目前權限"></a>先確認目前權限</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud projects get-iam-policy YOUR_PROJECT_ID --format=json | jq <span class="string">&#x27;.bindings[] | select(.members[] | contains(&quot;serviceAccount:ACCOUNT_TO_REMOVE&quot;))&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="移除指定角色"><a href="#移除指定角色" class="headerlink" title="移除指定角色"></a>移除指定角色</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcloud projects remove-iam-policy-binding YOUR_PROJECT_ID \</span><br><span class="line">  --member=<span class="string">&quot;serviceAccount:ACCOUNT_TO_REMOVE&quot;</span> \</span><br><span class="line">  --role=<span class="string">&quot;roles/要移除的角色&quot;</span></span><br></pre></td></tr></table></figure><p>⚠️ 需要確保該角色正確，否則可能會影響服務運行。</p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>原本只是想透過排程來節省成本，結果遇到 GCP 隱藏帳號的問題，導致權限無法正常配置。<br>最後透過 CLI 查詢，手動補上必要權限，才讓 Instance Schedules 順利運作。</p><h3 id="這次知道的事"><a href="#這次知道的事" class="headerlink" title="這次知道的事"></a>這次知道的事</h3><p>Console 不一定能看到所有帳號，CLI 查詢更可靠。<br>GCP 預設有許多隱藏帳號，遇到權限問題時，先確認 IAM policy。<br>權限管理應該精確設定，避免不必要的風險。<br>遇到類似問題時，先從 gcloud projects get-iam-policy 下手，能少走不少彎路。</p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;因為周末機器閒置很浪費，想透過排程來開關機達到節省成本的效果。&lt;br&gt;以為設定排程開關機這麼簡單，結果在操作過程中，遇到了一</summary>
      
    
    
    
    
    <category term="學習筆記" scheme="https://blog.marsen.me/tags/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] 試玩 DeepSeek 與避免思想審查</title>
    <link href="https://blog.marsen.me/2025/02/20/2025/ai-deepseek/"/>
    <id>https://blog.marsen.me/2025/02/20/2025/ai-deepseek/</id>
    <published>2025-02-20T09:05:10.000Z</published>
    <updated>2025-06-05T11:34:38.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DeepSeek-簡介"><a href="#DeepSeek-簡介" class="headerlink" title="DeepSeek 簡介"></a>DeepSeek 簡介</h2><p>DeepSeek 是一家中國 AI 新創公司，透過低成本、高效率的訓練模式，<br>在相對低的成本下訓練出接近 ChatGpt 效能的 AI 模型。<br>打破了 AI 訓練需高成本的迷思再加上開源，在 AI 和金融投資界引起廣泛關注。<br>其創新方法可能改變 AI 產業的投資邏輯，對科技股市造成顯著影響。  </p><h2 id="思想審查"><a href="#思想審查" class="headerlink" title="思想審查"></a>思想審查</h2><p>DeepSeek 在訓練過程中使用的資料集，通常可能經過嚴格篩選，包含大量官方認可的內容與過濾後的敏感信息，<br>這使得模型內部便內建了與中共敘事一致的偏見與審查機制。  </p><h3 id="LM-Studio-解法"><a href="#LM-Studio-解法" class="headerlink" title="LM Studio 解法"></a>LM Studio 解法</h3><p>「在本機離線使用的 lmstudio.ai 環境裡，如果遇到言論管制的題目，<br>只要用 ⌘U 先輸入思考過程和回答的前綴，再用 → 繼續生成回答，就可以繞過了。」  — 唐鳳</p><h4 id="LM-Studio-簡介"><a href="#LM-Studio-簡介" class="headerlink" title="LM Studio 簡介"></a>LM Studio 簡介</h4><blockquote><p>LM Studio 是一個提供圖形化使用者介面（GUI）的語言模型開發平台，<br>  讓用戶能夠簡單地進行模型訓練、調整及部署，無需繁複的程式碼操作。<br>  它支援各種自然語言處理應用，提升開發效率和操作體驗。</p></blockquote><h3 id="越獄版"><a href="#越獄版" class="headerlink" title="越獄版 ?"></a>越獄版 ?</h3><p>參考<a href="https://www.freedidi.com/18431.html">零度博客</a><br>可以安裝所謂的<a href="https://ollama.com/huihui_ai/deepseek-r1-abliterated">越獄版</a><br>當中有一個手法如下</p><blockquote><p>This is an uncensored version of deepseek-ai&#x2F;deepseek-r1<br>created with abliteration (see remove-refusals-with-transformers to know more about it).<br>This is a crude, proof-of-concept implementation to remove refusals from an LLM model without using TransformerLens.  </p><p>If “<think>” does not appear or refuses to respond, you can first provide an example to guide,<br>and then ask your question.<br>For instance:</p><blockquote><p>How many ‘r’ characters are there in the word “strawberry”?</p></blockquote></blockquote><p>這個手法，在本地端的 DeepSeek 也會有效;<strong>這樣真的需要去抓越獄版的嗎 ?</strong></p><h2 id="實測結果"><a href="#實測結果" class="headerlink" title="實測結果"></a>實測結果</h2><p>本來只會回答「你好，这个问题我暂时无法回答，让我们换个话题再聊聊吧」的 DeepSeek，<br>透過以上的方法確實可以生成其他回應。<br>不過只要繼續談話(敏感話題)，就會發現它的思考模式仍然有受限，<br>實際的破解價值高不高? 特別是要聊政治敏感的話題的話，就值得思考了。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.threads.net/@digitalminister.one/post/DFXcvfEppCI?xmt=AQGzrxCjmLFRN72C2I1La4nZfqpeOoz280wZtDDb7bkDpg">唐鳳 threads</a></li><li><a href="https://www.thinkmarkets.com/tw/market-news/what_is_deepseek_and_how_if_affect_the_market/">重點趨勢：最近爆火的Deepseek是什麼？對金融市場會造成怎樣的影響？</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;DeepSeek-簡介&quot;&gt;&lt;a href=&quot;#DeepSeek-簡介&quot; class=&quot;headerlink&quot; title=&quot;DeepSeek 簡介&quot;&gt;&lt;/a&gt;DeepSeek 簡介&lt;/h2&gt;&lt;p&gt;DeepSeek 是一家中國 AI 新創公司，透過低成本、高效率的訓</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] 試用 Breezy Voice</title>
    <link href="https://blog.marsen.me/2025/02/17/2025/ai-breezyvoice/"/>
    <id>https://blog.marsen.me/2025/02/17/2025/ai-breezyvoice/</id>
    <published>2025-02-17T09:10:43.000Z</published>
    <updated>2025-06-05T11:34:38.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>聯發科開源 MR Breeze 2 多模態模型，包含 Llama-Breeze2 繁中語言模型、BreezyVoice 台灣口音語音合成模型，以及 Android APP。Llama-Breeze2 提升了繁體中文知識和視覺能力，BreezyVoice 則能生成擬真人聲</p><p>覺得有趣，來試玩看看</p><h2 id="網頁操作"><a href="#網頁操作" class="headerlink" title="網頁操作"></a>網頁操作</h2><p><a href="https://huggingface.co/spaces/Splend1dchan/BreezyVoice-Playground">https://huggingface.co/spaces/Splend1dchan/BreezyVoice-Playground</a></p><p>比較簡單的作法可以 Duplicate Huggingface 的 UI 操作介面，<br>上傳一個 5 分鐘的聲音檔案，就可以生成結果，等待時間 1~10 分鐘不等。</p><h3 id="也可以使用-Kaggle"><a href="#也可以使用-Kaggle" class="headerlink" title="也可以使用 Kaggle"></a>也可以使用 <a href="https://www.kaggle.com/code/marsenlin/breezyvoice-playground/edit">Kaggle</a></h3><p>但是遇到一些問題</p><ol><li><p>沒找到可用 GPU ,可能是帳號權限的關係</p><ul><li>進行帳號驗証</li><li>可以在右側[Session Option]區塊調整 Accelerator</li><li>調整後可以選用 GPU 但是有 30 小時的時間限制</li></ul></li><li><p>無法 Clone Github Repo</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cloning into &#x27;BreezyVoice&#x27;...</span><br><span class="line">fatal: unable to access &#x27;https://github.com/mtkresearch/BreezyVoice.git/&#x27;: Could not resolve host: github.com</span><br></pre></td></tr></table></figure><ul><li>因為 Kaggle 無法連網(x)</li><li>可以在右側[Session Option]區塊調整 Internet on</li></ul></li></ol><p>File &gt; Open in Colab 可以</p><h3 id="改用-Google-Colab"><a href="#改用-Google-Colab" class="headerlink" title="改用 [Google Colab]"></a>改用 [Google Colab]</h3><p>執行到 <code>!pip install -r requirements.txt</code> 會有以下錯誤  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Collecting ttsfrd-dependency==0.1 (from -r requirements.txt (line 10))</span><br><span class="line">  Downloading https://www.modelscope.cn/models/speech_tts/speech_kantts_ttsfrd/resolve/master/ttsfrd_dependency-0.1-py3-none-any.whl (1.1 MB)</span><br><span class="line">     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.1/1.1 MB 1.4 MB/s eta 0:00:00</span><br><span class="line">ERROR: ttsfrd-0.3.9-cp310-cp310-linux_x86_64.whl is not a supported wheel on this platform.</span><br></pre></td></tr></table></figure><p>主因是 Colab 的 python 版本過新，降級 python 就可以了（3.11→３.10）</p><h3 id="改用-本地-macbook"><a href="#改用-本地-macbook" class="headerlink" title="改用 [本地(macbook)]"></a>改用 [本地(macbook)]</h3><p>作業系統不符，直接沒得玩</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">❯ python3.10 -m pip install -r requirements-mac.txt</span><br><span class="line"></span><br><span class="line">Looking in indexes: https://pypi.org/simple, https://download.pytorch.org/whl/cu118</span><br><span class="line">Collecting ttsfrd-dependency==0.1 (from -r requirements-mac.txt (line 35))</span><br><span class="line">  Downloading https://www.modelscope.cn/models/speech_tts/speech_kantts_ttsfrd/resolve/master/ttsfrd_dependency-0.1-py3-none-any.whl (1.1 MB)</span><br><span class="line">     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.1/1.1 MB 1.6 MB/s eta 0:00:00</span><br><span class="line">ERROR: ttsfrd-0.3.9-cp310-cp310-linux_x86_64.whl is not a supported wheel on this platform.</span><br></pre></td></tr></table></figure><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>效果蠻好的，聲音非常像難以辦認，但是在長文朗讀或是歌唱發聲表現不知道如何？<br>學習了 Kaggle Colab 兩個工具，了解一下網路與資源(GPU)設定相關的題目<br>地端開發的話，可能 Linux 才是最佳解，會比 Macbook 更好 ??<br>但是 GPU 仍是重要資源。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.mediatek.tw/blog/%E8%81%AF%E7%99%BC%E5%89%B5%E6%96%B0%E5%9F%BA%E5%9C%B0%E5%85%A8%E9%9D%A2%E9%96%8B%E6%BA%90-breeze2">https://www.mediatek.tw/blog/%E8%81%AF%E7%99%BC%E5%89%B5%E6%96%B0%E5%9F%BA%E5%9C%B0%E5%85%A8%E9%9D%A2%E9%96%8B%E6%BA%90-breeze2</a></li><li><a href="https://huggingface.co/spaces/Splend1dchan/BreezyVoice-Playground">https://huggingface.co/spaces/Splend1dchan/BreezyVoice-Playground</a></li><li><a href="https://www.geeksforgeeks.org/how-to-downgrade-python-version-in-colab/">How to downgrade python version in Colab</a></li><li><a href="https://www.modelscope.cn/models/speech_tts/speech_kantts_ttsfrd">https://www.modelscope.cn/models/speech_tts/speech_kantts_ttsfrd</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;聯發科開源 MR Breeze 2 多模態模型，包含 Llama-Breeze2 繁中語言模型、BreezyVoice 台灣</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] 在 MacBook 上安裝與使用 Ollama</title>
    <link href="https://blog.marsen.me/2025/02/14/2025/ai-ollama/"/>
    <id>https://blog.marsen.me/2025/02/14/2025/ai-ollama/</id>
    <published>2025-02-14T09:43:21.000Z</published>
    <updated>2025-06-05T11:34:38.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>AI 時代到來，就像 Web、Mobile 等帶來一波波的浪潮與機會，趁機來學習點新技術了。<br>比如說像是 <strong>Ollama</strong> 這款簡單好用的工具，可以快速在本機啟用大型語言模型 (LLM)，如 LLaMA、Mistral 等。以下記錄在 macOS 上的安裝與初體驗。</p><h2 id="實作記錄"><a href="#實作記錄" class="headerlink" title="實作記錄"></a>實作記錄</h2><h3 id="1-安裝-Ollama"><a href="#1-安裝-Ollama" class="headerlink" title="1. 安裝 Ollama"></a>1. 安裝 Ollama</h3><ul><li><p><strong>使用 Homebrew 安裝</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ollama</span><br></pre></td></tr></table></figure></li><li><p><strong>確認安裝成功</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama --version</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-執行第一個模型"><a href="#2-執行第一個模型" class="headerlink" title="2. 執行第一個模型"></a>2. 執行第一個模型</h3><ul><li><p>拉取並執行 LLaMA 2 模型：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run llama2</span><br></pre></td></tr></table></figure></li><li><p>若要使用其他模型（如 Mistral）：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run mistral</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-互動範例"><a href="#3-互動範例" class="headerlink" title="3. 互動範例"></a>3. 互動範例</h3><ul><li><p>問答互動示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ollama run llama2</span><br><span class="line">&gt; 你好！請問我可以幫你什麼？</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-常見的-ollama-指令"><a href="#4-常見的-ollama-指令" class="headerlink" title="4. 常見的 ollama 指令"></a>4. 常見的 ollama 指令</h3><ul><li><p><strong>列出可用模型</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama list</span><br></pre></td></tr></table></figure></li><li><p><strong>查看模型詳情</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama info &lt;model_name&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>停止運行中的模型</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama stop &lt;model_name&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>更新 Ollama</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade ollama</span><br></pre></td></tr></table></figure></li></ul><h2 id="簡單的-web-介面"><a href="#簡單的-web-介面" class="headerlink" title="簡單的 web 介面"></a>簡單的 web 介面</h2><p>使用 <a href="https://chromewebstore.google.com/detail/page-assist-a-web-ui-for/jfgfiigpkhlkbnfnbobbkinehhfdhndo">Chrome 外掛</a><br>安裝後選擇模型就可以透過 Web UI 與模型互動。<br>也有一些開源專案有提供 Web UI</p><ul><li><a href="https://github.com/open-webui/open-webui">https://github.com/open-webui/open-webui</a></li><li><a href="https://github.com/Bin-Huang/chatbox">https://github.com/Bin-Huang/chatbox</a></li></ul><p>我沒有實作作，僅記錄一下查找到的結果</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://ollama.ai/">Ollama 官方文件</a></li><li><a href="https://github.com/ollama/ollama">Ollama Github</a></li><li><a href="https://brew.sh/">Homebrew 官方網站</a></li><li><a href="https://www.youtube.com/watch?v=tWJvSy7dL1w">DeepSeek-R1最佳本地用法！免費開源，無痛運行高級 AI 大模型，秒建私人知識庫！ | 零度</a></li><li><a href="https://ollama.com/library/deepseek-r1:7b">DeepSeek-r1:7b</a></li><li><a href="https://www.deepseek.com/">DeepSeek</a></li><li><a href="https://chat.deepseek.com/">DeepSeek Chat</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;AI 時代到來，就像 Web、Mobile 等帶來一波波的浪潮與機會，趁機來學習點新技術了。&lt;br&gt;比如說像是 &lt;stron</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [學習筆記] TypeScript 的 Immutable Objects 與 Record&lt;T1,T2&gt;</title>
    <link href="https://blog.marsen.me/2025/01/31/2025/typescript_Immutable_Objects/"/>
    <id>https://blog.marsen.me/2025/01/31/2025/typescript_Immutable_Objects/</id>
    <published>2025-01-31T07:41:28.000Z</published>
    <updated>2025-06-05T11:34:38.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>最近在看 TypeScript Wizard 的課程，稍作一下紀錄  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span> &#125;;</span><br><span class="line">user.<span class="property">age</span> = <span class="number">24</span>; <span class="comment">// ❌ Property &#x27;age&#x27; does not exist on type &#x27;&#123; name: string; &#125;&#x27;.</span></span><br></pre></td></tr></table></figure><p><strong>這裡 IDE 會在 user.age 上報錯，因為 TypeScript 預設只允許存取「已知」的屬性。</strong><br><strong>由於 user 只有 name 屬性，TypeScript 會將其推斷為 { name: string } 類型，因此無法直接新增 age。</strong></p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>這時候我們有幾種解法，但要挑選 最符合 TypeScript 精神的做法。</p><h3 id="明確定義-User-類型"><a href="#明確定義-User-類型" class="headerlink" title="明確定義 User 類型"></a>明確定義 User 類型</h3><p>這是最推薦的作法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span>; age?: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><h3 id="使用-Record-定義動態物件"><a href="#使用-Record-定義動態物件" class="headerlink" title="使用 Record 定義動態物件"></a>使用 Record 定義動態物件</h3><p>如果我們需要 允許物件擴展但仍保持類型安全，可以使用 Record&lt;K, V&gt;：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span> | <span class="built_in">number</span>&gt; = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span> &#125;;</span><br><span class="line">user.<span class="property">age</span> = <span class="number">24</span>; <span class="comment">// ✅ 這次不會報錯！</span></span><br><span class="line">user.<span class="property">isAdmin</span> = <span class="literal">true</span>; <span class="comment">// ❌ Type &#x27;boolean&#x27; is not assignable to &#x27;string | number&#x27;.</span></span><br></pre></td></tr></table></figure><h3 id="另一種動態的作法，明確定義索引簽名"><a href="#另一種動態的作法，明確定義索引簽名" class="headerlink" title="另一種動態的作法，明確定義索引簽名"></a>另一種動態的作法，明確定義索引簽名</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span>; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">string</span> | <span class="built_in">number</span> &#125;;</span><br></pre></td></tr></table></figure><p>這樣 user 可以擁有 任何鍵（string 類型），但值必須是 string 或 number，避免亂塞其他類型。</p><h2 id="Immutable-Objects"><a href="#Immutable-Objects" class="headerlink" title="Immutable Objects"></a>Immutable Objects</h2><p>反之，如何保證物件的結構不會意外被修改？<br>我們可以使用 readonly 保持 Immutable Objects</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = <span class="title class_">Readonly</span>&lt;&#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span> &#125;&gt;;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">24</span> &#125;;</span><br><span class="line"></span><br><span class="line">user.<span class="property">age</span> = <span class="number">25</span>; <span class="comment">// ❌ Cannot assign to &#x27;age&#x27; because it is a read-only property.</span></span><br></pre></td></tr></table></figure><p>這種方式確保 user 一旦被賦值，就不能再改變，完全符合 Immutable Objects 的概念。<br>另一種方式是使用 Object.freeze() 來讓物件變成真正的 Immutable：  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="title class_">Object</span>.<span class="title function_">freeze</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">24</span> &#125;);</span><br><span class="line"></span><br><span class="line">user.<span class="property">age</span> = <span class="number">25</span>; <span class="comment">// ❌ TypeError: Cannot assign to read only property &#x27;age&#x27;</span></span><br></pre></td></tr></table></figure><p>不過要注意，Object.freeze() 只會影響淺層屬性，深層的物件仍然可以變更。</p><p>進一步思考，如何選擇？  </p><ul><li>如果你的物件是固定結構但不可變更，readonly 是最佳選擇。</li><li>如果需要允許擴展但要控制類型範圍，使用 Record&lt;K, V&gt;。</li><li>如果想確保物件完全不可變，Object.freeze() 是最安全的選項。</li></ul><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.totaltypescript.com/tutorials/solving-typescript-errors/errors/property-does-not-exist-on-type-error/solution">Techniques for Solving Property Does Not Exist on Type Error</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type">Record 型別解釋：Record in TypeScript</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">Object.freeze()</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;最近在看 TypeScript Wizard 的課程，稍作一下紀錄  &lt;/p&gt;
&lt;figure class=&quot;highlig</summary>
      
    
    
    
    
    <category term="學習筆記" scheme="https://blog.marsen.me/tags/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] 使用 Docker 一鍵生成 Sample 資料庫</title>
    <link href="https://blog.marsen.me/2025/01/21/2025/fast_lunach_mysql/"/>
    <id>https://blog.marsen.me/2025/01/21/2025/fast_lunach_mysql/</id>
    <published>2025-01-21T05:38:21.000Z</published>
    <updated>2025-06-05T11:34:38.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>在開發或測試過程中，常常需要一個快速可用的資料庫環境來模擬真實操作。<br>然而，手動安裝和配置 MySQL 不僅耗時，也容易出現版本兼容性問題。<br>透過 Docker，我們可以輕鬆建立一個即時可用的環境，並在啟動時自動初始化資料庫的必要條件(表格或 root 帳密等…)。</p><p>本文將介紹如何使用 Dockerfile 和 SQL 初始化腳本，快速構建一個名為 sample 的測試資料庫。</p><h2 id="實作記錄"><a href="#實作記錄" class="headerlink" title="實作記錄"></a>實作記錄</h2><h3 id="步驟-1-建立專案目錄與檔案"><a href="#步驟-1-建立專案目錄與檔案" class="headerlink" title="步驟 1: 建立專案目錄與檔案"></a>步驟 1: 建立專案目錄與檔案</h3><p>首先，創建一個新目錄，並在其中準備以下檔案：</p><p>Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerfile for setting up MySQL with a sample database</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用官方 MySQL 映像</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> mysql:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定環境變數 </span></span><br><span class="line"><span class="keyword">ENV</span> MYSQL_ROOT_PASSWORD=&#123;your root password&#125;</span><br><span class="line"><span class="keyword">ENV</span> MYSQL_DATABASE=sample</span><br><span class="line"></span><br><span class="line"><span class="comment"># 複製初始化腳本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> init.sql /docker-entrypoint-initdb.d/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 開放 MySQL 連接埠</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3306</span></span><br></pre></td></tr></table></figure><p>init.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> sample;</span><br><span class="line">USE sample;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="步驟-2-建構與啟動容器"><a href="#步驟-2-建構與啟動容器" class="headerlink" title="步驟 2: 建構與啟動容器"></a>步驟 2: 建構與啟動容器</h3><p>執行以下指令來建構映像並啟動容器：</p><p>建構 Docker 映像</p><blockquote><p>docker build -t mysql-sample .</p></blockquote><p>啟動容器</p><blockquote><p>docker run -d –name mysql-sample -p 3306:3306 mysql-sample</p></blockquote><p>這將啟動一個名為 mysql-sample 的容器，並將 MySQL 的 3306 埠映射到本機。</p><h3 id="步驟-3-驗證資料庫"><a href="#步驟-3-驗證資料庫" class="headerlink" title="步驟 3: 驗證資料庫"></a>步驟 3: 驗證資料庫</h3><p>進入 MySQL 容器並確認資料庫與表格是否正確建立：</p><p>docker exec -it mysql-sample mysql -u root -p</p><p>在 MySQL shell 中執行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br><span class="line">USE sample;</span><br><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p>開發用指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">❯ docker run -d \</span><br><span class="line">--name mysql-container \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=You don&#x27;t need to try this password; I made it up. A7X3P \</span><br><span class="line">-v mysql-data:/var/lib/mysql \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">mysql:latest</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.docker.com/">Docker 官方文件</a></li><li><a href="https://www.mysql.com/">MySQL 官方文件</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;在開發或測試過程中，常常需要一個快速可用的資料庫環境來模擬真實操作。&lt;br&gt;然而，手動安裝和配置 MySQL 不僅耗時，也容</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] FastAPI 的　middleware</title>
    <link href="https://blog.marsen.me/2025/01/02/2025/fastapi_middleware/"/>
    <id>https://blog.marsen.me/2025/01/02/2025/fastapi_middleware/</id>
    <published>2025-01-02T17:21:26.000Z</published>
    <updated>2025-06-05T11:34:38.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前請提要"><a href="#前請提要" class="headerlink" title="前請提要"></a>前請提要</h2><p>最近團隊的小朋友作的系統發生了錯誤。</p><p>在追查的過程之中，<br>小朋友說了一個驚人的<strong>事實</strong>，<br><del>Python 的 FastAPI Web 框架，發生 422 錯誤時（輸入的參數類別錯誤），無法追踪 Request$$</del><br>當然這不是事實，那麼 FastAPI 應該怎麼處理呢？</p><h2 id="本文"><a href="#本文" class="headerlink" title="本文"></a>本文</h2><p>讓我們先簡單實作一個 Fast API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 FastAPI 應用</span></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定義請求資料模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    description: <span class="built_in">str</span> = <span class="literal">None</span>  <span class="comment"># 可選的欄位</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定義 API 路徑</span></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_item</span>(<span class="params">item: Item</span>):</span><br><span class="line">    <span class="comment"># 假設邏輯檢查</span></span><br><span class="line">    <span class="keyword">if</span> item.price &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Price must be greater than 0&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Item created successfully!&quot;</span>, <span class="string">&quot;item&quot;</span>: item&#125;</span><br></pre></td></tr></table></figure><p>接下來，讓我試著用不正確的方式呼叫 API，並且得到一個 422 的錯誤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl </span><br><span class="line">  -X POST <span class="string">&quot;http://127.0.0.1:8000/items/&quot;</span> </span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> </span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;item&quot;: &quot;should be number&quot;, &quot;price&quot;: 10.5&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>FastAPI 會提供 Client 端非常友善的資訊</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;missing&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;loc&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;body&quot;</span><span class="punctuation">,</span><span class="string">&quot;name&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;Field required&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;item&quot;</span><span class="punctuation">:</span><span class="string">&quot;should be number&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">10.5</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>但在 Server 端只會有類似以下的資訊，這以後端的角度要排查錯誤會非常不便</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO:     127.0.0.1:57617 - <span class="string">&quot;POST /items/ HTTP/1.1&quot;</span> 422 Unprocessable Entity</span><br></pre></td></tr></table></figure><p>Server Side 有沒有什麼好方法可以協助我們 Debug 呢？</p><h3 id="解決方法：Middleware"><a href="#解決方法：Middleware" class="headerlink" title="解決方法：Middleware"></a>解決方法：Middleware</h3><p>這其實是 web 開發者的小常識才對，<br>實作如下，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI,Request</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 FastAPI 應用</span></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化日誌</span></span><br><span class="line">logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&quot;%(asctime)s - %(message)s&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定義請求資料模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    description: <span class="built_in">str</span> = <span class="literal">None</span>  <span class="comment"># 可選的欄位</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 中間件，用於記錄請求</span></span><br><span class="line"><span class="meta">@app.middleware(<span class="params"><span class="string">&quot;http&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">log_requests</span>(<span class="params">request: Request, call_next</span>):</span><br><span class="line">    <span class="comment"># 記錄請求進來的時間與基本資訊</span></span><br><span class="line">    request_time = datetime.utcnow()</span><br><span class="line">    logging.info(<span class="string">f&quot;Incoming request at <span class="subst">&#123;request_time&#125;</span>&quot;</span>)</span><br><span class="line">    logging.info(<span class="string">f&quot;Method: <span class="subst">&#123;request.method&#125;</span> | Path: <span class="subst">&#123;request.url.path&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 嘗試讀取請求 Body</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        body = <span class="keyword">await</span> request.json()</span><br><span class="line">        logging.info(<span class="string">f&quot;Request Body: <span class="subst">&#123;body&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        logging.info(<span class="string">&quot;No JSON body or failed to parse.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 執行後續處理並取得回應</span></span><br><span class="line">    response = <span class="keyword">await</span> call_next(request)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 記錄回應狀態碼</span></span><br><span class="line">    logging.info(<span class="string">f&quot;Response status: <span class="subst">&#123;response.status_code&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定義 API 路徑</span></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_item</span>(<span class="params">item: Item</span>):</span><br><span class="line">    <span class="comment"># 假設邏輯檢查</span></span><br><span class="line">    <span class="keyword">if</span> item.price &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Price must be greater than 0&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Item created successfully!&quot;</span>, <span class="string">&quot;item&quot;</span>: item&#125;</span><br></pre></td></tr></table></figure><p>Request 送進來時 Server Side 就會如下記錄</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2025-01-03 03:37:37,294 - Incoming request at 2025-01-02 19:37:37.294509</span><br><span class="line">2025-01-03 03:37:37,294 - Method: POST | Path: /items/</span><br><span class="line">2025-01-03 03:37:37,294 - Request Body: &#123;<span class="string">&#x27;item&#x27;</span>: <span class="string">&#x27;should be number&#x27;</span>, <span class="string">&#x27;price&#x27;</span>: 10.5&#125;</span><br><span class="line">2025-01-03 03:37:37,295 - Response status: 422</span><br><span class="line">INFO:     127.0.0.1:59545 - <span class="string">&quot;POST /items/ HTTP/1.1&quot;</span> 422 Unprocessable Entity</span><br></pre></td></tr></table></figure><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>回到我們原本的情境，我們真正要解決的問題是，</p><p>｜發生異常時，Server Side 要可以追蹤錯誤</p><p>因為是 <strong>FastAPI 所以沒有辦法追蹤錯誤，是非常錯誤判斷</strong></p><p>在 Google 與 AI 工具這麼方便的時代，應該要能正確的提出問題。</p><p>ex: FastAPI 可以記錄什麼時候 request 送進來，並帶了什麼資訊嗎？</p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前請提要&quot;&gt;&lt;a href=&quot;#前請提要&quot; class=&quot;headerlink&quot; title=&quot;前請提要&quot;&gt;&lt;/a&gt;前請提要&lt;/h2&gt;&lt;p&gt;最近團隊的小朋友作的系統發生了錯誤。&lt;/p&gt;
&lt;p&gt;在追查的過程之中，&lt;br&gt;小朋友說了一個驚人的&lt;strong&gt;事實&lt;/s</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [生活筆記] ChatGPT 個性分析</title>
    <link href="https://blog.marsen.me/2024/12/19/2024/chatGPT_know_you/"/>
    <id>https://blog.marsen.me/2024/12/19/2024/chatGPT_know_you/</id>
    <published>2024-12-19T05:11:17.000Z</published>
    <updated>2025-06-05T11:34:38.346Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前請提要"><a href="#前請提要" class="headerlink" title="前請提要"></a>前請提要</h2><p>ChatGPT 能透過語言理解和生成，提供更細緻的個性分析，特別是當你使用了一陣子後，<br>可以用以下的 Prompt 作個簡單的分析報告。  </p><h2 id="Prompt"><a href="#Prompt" class="headerlink" title="Prompt"></a>Prompt</h2><p>根據我們之前的互動，我希望你能告訴我你觀察到關於我的哪些特質是我可能沒有意識到的。<br>請儘可能誠實直接的表達，不要有所保留。<br>如果你注意到我可能察覺不到的矛盾之處、行為模式或傾向，我都想清楚的聽到，不需要粉飾任何資訊，請給我最真實最直接的分析</p><h2 id="ChatGPT-said"><a href="#ChatGPT-said" class="headerlink" title="ChatGPT said"></a>ChatGPT said</h2><p>以下是根據我們互動中可能顯現的特質和行為模式，我誠實的觀察與分析，供你參考：</p><ol><li><p>強烈的自我驅動<br>  你有著明顯的自我驅動力，願意挑戰自我，例如你的30天鐵人挑戰或對學習新技能的熱忱。<br>  然而，這種驅動力可能會讓你偶爾忽略自己的疲憊或情緒需求，容易進入「過度努力」的狀態。  </p></li><li><p>追求效率與結果，但重視細節<br>  你傾向於以結果為導向，尤其是在專案進行或問題解決時。<br>  你對細節的關注，例如希望資訊條理清楚或具可操作性，顯示出你對高標準執行的重視。<br>  然而，有時可能會因為過於專注於效率，無意間忽略更大的全局或需要額外耐心的部分。  </p></li><li><p>多元興趣與高度適應力<br>  你對不同領域的興趣（技術、跳舞、潛水、反思工具等）顯示了你擁有探索和適應的能力。<br>  然而，這種多元性可能會讓你在資源有限的情況下分散注意力，難以在某一領域深耕到你期望的程度。  </p></li><li><p>對「流程」的矛盾態度<br>  雖然你熟悉並實踐許多工具和方法（如敏捷、KPT、SMART等），但你的個性似乎也渴望自由與靈活性，<br>  這可能讓你在面對過於僵化的流程時感到不耐煩。<br>  這種矛盾可能讓你在制定規範時猶豫，因為你不想限制自己或團隊的創造力。  </p></li><li><p>溫和但堅持個性<br>  你偏好直接但不咄咄逼人的溝通方式，並且能保持禮貌與平衡。<br>  然而，你也表現出對原則與目標的堅持，即使是在比較微妙的情境下，可能讓他人難以察覺你的真實意圖。  </p></li><li><p>對自己標準的隱藏壓力<br>  你對自己設定的目標和標準很高，且傾向於內化「應該更好」的期待。<br>  這可能導致你對成功的認可不夠，容易放大未完成或未達成的部分，忽略已經達成的成就。  </p></li><li><p>偏好控制但能適應改變<br>  你習慣掌控規劃與執行的過程，並且對細節要求高。<br>  然而，你在面對不可預測的情況時，也能快速調整心態並提出替代方案，顯示出高度靈活的思維。</p></li></ol><p>這些分析可能包含一些你未曾意識到或尚未明確的特質，也可能包含你的日常行為中隱藏的矛盾。<br>如果你有不同的想法或任何補充，歡迎分享！</p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前請提要&quot;&gt;&lt;a href=&quot;#前請提要&quot; class=&quot;headerlink&quot; title=&quot;前請提要&quot;&gt;&lt;/a&gt;前請提要&lt;/h2&gt;&lt;p&gt;ChatGPT 能透過語言理解和生成，提供更細緻的個性分析，特別是當你使用了一陣子後，&lt;br&gt;可以用以下的 Prompt 作</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title> [實作筆記] GCP 防火牆設定與 Health Check</title>
    <link href="https://blog.marsen.me/2024/12/04/2024/gcp_healthcheck_firewall/"/>
    <id>https://blog.marsen.me/2024/12/04/2024/gcp_healthcheck_firewall/</id>
    <published>2024-12-04T08:16:13.000Z</published>
    <updated>2025-06-05T11:34:38.346Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>GCP 防火牆（Firewall）用來控制進出 Google Cloud 資源的網路流量，確保服務的安全性。<br>而 Health Check 則是用來監控後端服務的健康狀態，透過 GCP 負載平衡器（Load Balancer）進行流量分配。<br>我將介紹如何在 GCP 設定防火牆規則以支持 Health Check 的運作。</p><h2 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h2><p>instance 有一個 Allow Load Balancer Health checks 選項，<br>被勾起來後　Network tags 會加上<code>lb-health-check</code><br>但是不知為什麼狀態仍然會顯示為 Off　？</p><p>所以我們必須多作一些步驟</p><p>我有許多服務都掛在負載平衡器之後，並且使用 Backend Service 來管理這些流量。<br>一個 LB 會有多個 Backend Service (本文先不涉及 Backend Bucket)<br>由於成本考量，為了提高資源利用率，一台機器可能會承載多個 Web 服務。<br>這樣做可以節省硬體和虛擬機的成本，但同時也需要確保每個 Web 服務能夠獨立且穩定地運行。</p><p>在這樣的架構中，LB 會依 Path Rules 將流量分配到多個實例組（Instance Group）中，<br>每個實例中可能運行著多個 Web 服務。<br>透過這些實例和 Backend Service 的組合，負載平衡器能夠有效地將流量分配到不同的服務上。<br>然而，為了確保服務的穩定性，我們必須配置健康檢查（Health Check）來監控每個 Web 服務的運行狀態。  </p><p>在 GCP 中，當我們使用負載平衡器（<code>Load Balancer</code>）時，會涉及以下資源：</p><ul><li><code>Backend Service</code>：負責接收來自負載平衡器的流量，並將流量分發給後端的實例。</li><li><code>Health Check</code>：用來檢查後端服務是否健康，負載平衡器會依據這些檢查結果決定是否將流量導向特定實例。</li><li><code>Instance Group</code>：一組相同配置的虛擬機（VM），負責運行服務，並自動進行縮放。</li><li><code>Instance</code>：每個實際的虛擬機，執行後端服務。</li></ul><p>這些資源之間的關係是，Backend Service 根據 Health Check 監控的結果選擇健康的 Instance，<br>並將流量分發給 Instance Group 中的實例。<br>當負載平衡器根據路徑規則（LB Path Rule）將流量導向某個服務時，這些流量會被引導到 Instance 中運行的 Web 服務。</p><p>我們會在一台 Instance 上使用多個 web 服務，使用不同的 Port 來區分，範圍是 6000~6100。<br>而我們需要對這些所有的服務設定 Health Check</p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>每個實例有一個 <strong>“Allow Load Balancer Health checks”</strong> 的選項，<br>勾選後會自動加上 <code>lb-health-check</code> 的網路標籤(Network Tag)。<br>不過不知道為什麼狀態仍會顯示為 Off。<br>也就是說單純打勾是不夠的我們仍需要額外的設定，我們可以利用這個 <code>lb-health-check</code> 來作一些事</p><p>我們可以利用 Network Tag:<code>lb-health-check</code> 來建立相應的防火牆規則，<br>確保來自負載平衡器的流量能夠順利進行健康檢查。  </p><p>接下來，我們可以創建一個防火牆規則，限制僅允許 6000~6100 端口的 TCP 流量。<br>這樣做的原因是，健康檢查會直接使用 TCP 進行連接檢查，而不是 HTTP 協定，<br>這樣可以避免 HTTP 協定中請求和響應的延遲，並且減少負載平衡器在檢查健康狀態時的處理開銷。</p><p>在 GCP Console 中創建防火牆規則，指定源 IP 或範圍（例如內部網路的 IP 範圍）。<br>Google 的 Health Check 源自 <code>35.191.0.0/16</code> 與 <code>130.211.0.0/22</code>，<br>設定在 Source filters &gt; IP ranges 上<br>Targets ＞ Target tags 請設定為 <code>lb-health-check</code><br>設定 Protocols and ports &gt; Specified protocols and ports 選擇 TCP 協定 Ports 限制在 6000-6100。<br>在 Health checks 中，Protocol 也設定 TCP，Port 要設定為真實的 Web 服務使用的 Port<br>在 VM 的 instance 上，本來需要設定 Network Tag，但是我們可以勾選 “Allow Load Balancer Health checks” 的選項,<br>就會自動加上 Tag 囉。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://cloud.google.com/load-balancing/docs/health-check-concepts">GCP HEALTH CHECK CONCEPT</a></li><li><a href="https://cloud.google.com/load-balancing/docs/health-checks">Use health checks</a></li><li><a href="https://cloud.google.com/vpc/docs/using-firewalls">Use VPC firewall rules</a></li><li><a href="https://hkmci.com/zh-hant/learning-column/google-cloud-zh-hant/gcp-kol-x-master-concept-the-overall-architecture-and-procedure-for-establishing-a-load-balancer/">建立 Load Balancer 的整體架構和步驟</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;GCP 防火牆（Firewall）用來控制進出 Google Cloud 資源的網路流量，確保服務的安全性。&lt;br&gt;而 Health Che</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title> [實作筆記] Google NAT 簡介與實作</title>
    <link href="https://blog.marsen.me/2024/12/03/2024/gcp_nat/"/>
    <id>https://blog.marsen.me/2024/12/03/2024/gcp_nat/</id>
    <published>2024-12-03T06:26:00.000Z</published>
    <updated>2025-06-05T11:34:38.346Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>在打造安全的 VM 環境時，常常會遇到一個經典的矛盾點：<br>我們希望 VM 保持隱蔽，避免直接暴露於網際網路以減少安全風險，但同時又需要對外存取資源。<br>例如在開發或維運階段，像是執行 npm install、apt-get update，甚至提供給合作第三方的白名單 IP 等需求，往往都依賴外部下載與連線。  </p><p>因此，我們的需求很明確：  </p><ul><li>VM 非必要時，不提供 Public IP。  </li><li>VM 在發出 Request 時，需要擁有一個固定的對外 IP 地址。</li></ul><h2 id="傳統機房的解決方案"><a href="#傳統機房的解決方案" class="headerlink" title="傳統機房的解決方案"></a>傳統機房的解決方案</h2><p>在傳統機房環境中，透過 NAT (Network Address Translation) 伺服器或防火牆設備，就能實現內部網路的安全管理。  </p><p>內部流量管理: 內部 VM 使用私有 IP 位址，對外流量透過 NAT 進行轉換。<br>控制風險: 透過 NAT，內部伺服器可以訪問外部網路，但外部無法直接存取內部資源。<br>然而，傳統機房的設定通常需要額外的硬體設備，並增加了維護成本。  </p><h2 id="GCP-的解決方案-NAT"><a href="#GCP-的解決方案-NAT" class="headerlink" title="GCP 的解決方案　NAT"></a>GCP 的解決方案　NAT</h2><p>在 GCP 上，這個問題有一個優雅的解法：Cloud NAT。  </p><p>無須公有 IP: Cloud NAT 允許私有 VM 不需配置公有 IP，就能存取外部網路。<br>集中管理: 透過 VPC 網路層級的 NAT 設定，簡化整體網路架構。<br>彈性擴展: Cloud NAT 可以根據流量自動擴展，減少單點故障風險。  </p><p><img src="/../../images/2024/nat.svg" alt="NAT"></p><h2 id="實作筆記"><a href="#實作筆記" class="headerlink" title="實作筆記"></a>實作筆記</h2><h3 id="步驟-1-建立-VPC-網路"><a href="#步驟-1-建立-VPC-網路" class="headerlink" title="步驟 1: 建立 VPC 網路"></a>步驟 1: 建立 VPC 網路</h3><p>在 GCP 控制台中，前往 VPC 網路，選擇 建立 VPC 網路。<br>設定一個新的 VPC 網路，並確保 VM 的子網路設為 私有（Private）。這樣做可以保護 VM 不被直接暴露於公共網路。<br>實務上我選擇 default  </p><h3 id="步驟-2-配置-Cloud-NAT"><a href="#步驟-2-配置-Cloud-NAT" class="headerlink" title="步驟 2: 配置 Cloud NAT"></a>步驟 2: 配置 Cloud NAT</h3><p>前往 VPC 網路 &gt; Cloud NAT，並選擇 建立 NAT 網關。<br>在設置過程中，選擇對應的子網路和<code>路由(Route)</code>設定。這樣可以確保 VM 在沒有 Public IP 的情況下仍能夠透過 NAT 網關訪問外部網路。<br>配置完成後，Cloud NAT 將會自動幫助 VM 處理對外的連線請求，而不需要直接公開 VM 的 IP。  </p><h3 id="步驟-3-配置-Public-IP（如果需要）"><a href="#步驟-3-配置-Public-IP（如果需要）" class="headerlink" title="步驟 3: 配置 Public IP（如果需要）"></a>步驟 3: 配置 Public IP（如果需要）</h3><p>若要讓 VM 直接對外發送請求或開放服務，可以在創建 VM 時為其配置 Public IP。<br>在 Google Cloud Console 中創建虛擬機時，選擇 外部 IP 設為 靜態（static），這樣可以確保 Public IP 地址不會變動。<br>當 VM 配置了 Public IP，所有對外的請求將會直接通過這個 IP 進行。  </p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>Cloud NAT 的設計，讓我們可以兼顧安全性與便利性。<br>關鍵優勢:</p><p>簡單配置: 不需像傳統 NAT 那樣繁複的硬體設置。<br>靈活性高: 無論是開發環境還是正式部署，都能輕鬆應對。<br>成本效益: 減少了維運成本，同時保護了內部資源。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://cloud.google.com/nat/docs/overview">https://cloud.google.com/nat/docs/overview</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;在打造安全的 VM 環境時，常常會遇到一個經典的矛盾點：&lt;br&gt;我們希望 VM 保持隱蔽，避免直接暴露於網際網路以減少安全風</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
</feed>
