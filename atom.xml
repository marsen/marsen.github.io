<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Marsen&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/c2458ad941ad5f8ca05b12c705fd4912</icon>
  <subtitle>waiting to load</subtitle>
  <link href="https://blog.marsen.me/atom.xml" rel="self"/>
  
  <link href="https://blog.marsen.me/"/>
  <updated>2025-03-25T20:48:11.601Z</updated>
  <id>https://blog.marsen.me/</id>
  
  <author>
    <name>Marsen L.</name>
    <email>admin@marsen.me</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title> [生活筆記] First Trade 開卡記錄</title>
    <link href="https://blog.marsen.me/2025/03/25/2025/firstrade_activate_debit_card/"/>
    <id>https://blog.marsen.me/2025/03/25/2025/firstrade_activate_debit_card/</id>
    <published>2025-03-25T20:48:11.601Z</published>
    <updated>2025-03-25T20:48:11.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>First Trade Debit 卡是一張簽帳金融卡，與信用卡不同，它直接從投資帳戶扣款，不能超額消費。<br>這張卡可在全球任何支援 VISA 的商店與 ATM 使用，方便在美國內外進行交易與提款。<br>First Trade 可以在線上申請，網站上說約一個月的工作日，我大概10天左右收到。  </p><h2 id="開卡"><a href="#開卡" class="headerlink" title="開卡"></a>開卡</h2><p>卡片包裹內會附上開卡說明，但如果看不懂，直接跟著以下步驟操作就好。</p><ol><li><p>撥打開卡電話<br>  使用國際電話撥打 First Securities 客服專線：002 1-855-253-1057<br>  電話錄音為英文，但全程無需說話，只需依指示輸入數字即可。</p></li><li><p>開卡流程<br>輸入16位卡號：直接輸入卡片正面16位數，不需要按 #。<br>輸入社會安全碼（SSN）：輸入 5436。<br>輸入生日資訊：<br>格式為「MMYY」，例如 1985年2月生 → 輸入 0285。(特別注意不要輸入成月日)<br>輸入卡片背面安全碼（CVV）：3 位數的安全碼，位於卡片背面。<br>設定提款&#x2F;交易密碼：輸入 4 位數密碼。<br>確認密碼：再次輸入相同密碼。</p></li></ol><p>以上完成開卡，約１分鐘內可以完成</p><h2 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h2><p>Firstrade Debit 卡適合那些在　Firstrade 賬戶中有至少 $25,000 存款的投資者。<br>它可全球使用，可以用來提款與消費，並且每月首次提款免費。<br>依據文章說明，每個月第一次的使用（提領或消費）可享跨境手續費返還。<br>申請人需開設現金管理賬戶並保持最低存款。<br>需要注意的是，每日提款限額為 $1,000，並且需要保持最低餘額。<br>超過就要收 3% 手續費。<br>感覺實用性不高，或許在國外緊需現金時可以用來應急。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.firstrade.com/zh-TW/resources/guides/stocks/debit#debit01">https://www.firstrade.com/zh-TW/resources/guides/stocks/debit#debit01</a></li><li><a href="https://rich01.com/how-to-apply-firstrade-debit-card/">https://rich01.com/how-to-apply-firstrade-debit-card/</a></li><li><a href="https://sleepyinvest.com/firstrade-debit-card/">https://sleepyinvest.com/firstrade-debit-card/</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;First Trade Debit 卡是一張簽帳金融卡，與信用卡不同，它直接從投資帳戶扣款，不能超額消費。&lt;br&gt;這張卡可在</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title> [實作筆記] 試玩 DeepSeek 與避免思想審查</title>
    <link href="https://blog.marsen.me/2025/02/20/2025/ai-deepseek/"/>
    <id>https://blog.marsen.me/2025/02/20/2025/ai-deepseek/</id>
    <published>2025-02-20T09:05:10.000Z</published>
    <updated>2025-03-25T20:48:11.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DeepSeek-簡介"><a href="#DeepSeek-簡介" class="headerlink" title="DeepSeek 簡介"></a>DeepSeek 簡介</h2><p>DeepSeek 是一家中國 AI 新創公司，透過低成本、高效率的訓練模式，<br>在相對低的成本下訓練出接近 ChatGpt 效能的 AI 模型。<br>打破了 AI 訓練需高成本的迷思再加上開源，在 AI 和金融投資界引起廣泛關注。<br>其創新方法可能改變 AI 產業的投資邏輯，對科技股市造成顯著影響。  </p><h2 id="思想審查"><a href="#思想審查" class="headerlink" title="思想審查"></a>思想審查</h2><p>DeepSeek 在訓練過程中使用的資料集，通常可能經過嚴格篩選，包含大量官方認可的內容與過濾後的敏感信息，<br>這使得模型內部便內建了與中共敘事一致的偏見與審查機制。  </p><h3 id="LM-Studio-解法"><a href="#LM-Studio-解法" class="headerlink" title="LM Studio 解法"></a>LM Studio 解法</h3><p>「在本機離線使用的 lmstudio.ai 環境裡，如果遇到言論管制的題目，<br>只要用 ⌘U 先輸入思考過程和回答的前綴，再用 → 繼續生成回答，就可以繞過了。」  — 唐鳳</p><h4 id="LM-Studio-簡介"><a href="#LM-Studio-簡介" class="headerlink" title="LM Studio 簡介"></a>LM Studio 簡介</h4><blockquote><p>LM Studio 是一個提供圖形化使用者介面（GUI）的語言模型開發平台，<br>  讓用戶能夠簡單地進行模型訓練、調整及部署，無需繁複的程式碼操作。<br>  它支援各種自然語言處理應用，提升開發效率和操作體驗。</p></blockquote><h3 id="越獄版"><a href="#越獄版" class="headerlink" title="越獄版 ?"></a>越獄版 ?</h3><p>參考<a href="https://www.freedidi.com/18431.html">零度博客</a><br>可以安裝所謂的<a href="https://ollama.com/huihui_ai/deepseek-r1-abliterated">越獄版</a><br>當中有一個手法如下</p><blockquote><p>This is an uncensored version of deepseek-ai&#x2F;deepseek-r1<br>created with abliteration (see remove-refusals-with-transformers to know more about it).<br>This is a crude, proof-of-concept implementation to remove refusals from an LLM model without using TransformerLens.  </p><p>If “<think>” does not appear or refuses to respond, you can first provide an example to guide,<br>and then ask your question.<br>For instance:</p><blockquote><p>How many ‘r’ characters are there in the word “strawberry”?</p></blockquote></blockquote><p>這個手法，在本地端的 DeepSeek 也會有效;<strong>這樣真的需要去抓越獄版的嗎 ?</strong></p><h2 id="實測結果"><a href="#實測結果" class="headerlink" title="實測結果"></a>實測結果</h2><p>本來只會回答「你好，这个问题我暂时无法回答，让我们换个话题再聊聊吧」的 DeepSeek，<br>透過以上的方法確實可以生成其他回應。<br>不過只要繼續談話(敏感話題)，就會發現它的思考模式仍然有受限，<br>實際的破解價值高不高? 特別是要聊政治敏感的話題的話，就值得思考了。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.threads.net/@digitalminister.one/post/DFXcvfEppCI?xmt=AQGzrxCjmLFRN72C2I1La4nZfqpeOoz280wZtDDb7bkDpg">唐鳳 threads</a></li><li><a href="https://www.thinkmarkets.com/tw/market-news/what_is_deepseek_and_how_if_affect_the_market/">重點趨勢：最近爆火的Deepseek是什麼？對金融市場會造成怎樣的影響？</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;DeepSeek-簡介&quot;&gt;&lt;a href=&quot;#DeepSeek-簡介&quot; class=&quot;headerlink&quot; title=&quot;DeepSeek 簡介&quot;&gt;&lt;/a&gt;DeepSeek 簡介&lt;/h2&gt;&lt;p&gt;DeepSeek 是一家中國 AI 新創公司，透過低成本、高效率的訓</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] 試用 Breezy Voice</title>
    <link href="https://blog.marsen.me/2025/02/17/2025/ai-breezyvoice/"/>
    <id>https://blog.marsen.me/2025/02/17/2025/ai-breezyvoice/</id>
    <published>2025-02-17T09:10:43.000Z</published>
    <updated>2025-03-25T20:48:11.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>聯發科開源 MR Breeze 2 多模態模型，包含 Llama-Breeze2 繁中語言模型、BreezyVoice 台灣口音語音合成模型，以及 Android APP。Llama-Breeze2 提升了繁體中文知識和視覺能力，BreezyVoice 則能生成擬真人聲</p><p>覺得有趣，來試玩看看</p><h2 id="網頁操作"><a href="#網頁操作" class="headerlink" title="網頁操作"></a>網頁操作</h2><p><a href="https://huggingface.co/spaces/Splend1dchan/BreezyVoice-Playground">https://huggingface.co/spaces/Splend1dchan/BreezyVoice-Playground</a></p><p>比較簡單的作法可以 Duplicate Huggingface 的 UI 操作介面，<br>上傳一個 5 分鐘的聲音檔案，就可以生成結果，等待時間 1~10 分鐘不等。</p><h3 id="也可以使用-Kaggle"><a href="#也可以使用-Kaggle" class="headerlink" title="也可以使用 Kaggle"></a>也可以使用 <a href="https://www.kaggle.com/code/marsenlin/breezyvoice-playground/edit">Kaggle</a></h3><p>但是遇到一些問題</p><ol><li><p>沒找到可用 GPU ,可能是帳號權限的關係</p><ul><li>進行帳號驗証</li><li>可以在右側[Session Option]區塊調整 Accelerator</li><li>調整後可以選用 GPU 但是有 30 小時的時間限制</li></ul></li><li><p>無法 Clone Github Repo</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cloning into &#x27;BreezyVoice&#x27;...</span><br><span class="line">fatal: unable to access &#x27;https://github.com/mtkresearch/BreezyVoice.git/&#x27;: Could not resolve host: github.com</span><br></pre></td></tr></table></figure><ul><li>因為 Kaggle 無法連網(x)</li><li>可以在右側[Session Option]區塊調整 Internet on</li></ul></li></ol><p>File &gt; Open in Colab 可以</p><h3 id="改用-Google-Colab"><a href="#改用-Google-Colab" class="headerlink" title="改用 [Google Colab]"></a>改用 [Google Colab]</h3><p>執行到 <code>!pip install -r requirements.txt</code> 會有以下錯誤  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Collecting ttsfrd-dependency==0.1 (from -r requirements.txt (line 10))</span><br><span class="line">  Downloading https://www.modelscope.cn/models/speech_tts/speech_kantts_ttsfrd/resolve/master/ttsfrd_dependency-0.1-py3-none-any.whl (1.1 MB)</span><br><span class="line">     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.1/1.1 MB 1.4 MB/s eta 0:00:00</span><br><span class="line">ERROR: ttsfrd-0.3.9-cp310-cp310-linux_x86_64.whl is not a supported wheel on this platform.</span><br></pre></td></tr></table></figure><p>主因是 Colab 的 python 版本過新，降級 python 就可以了（3.11→３.10）</p><h3 id="改用-本地-macbook"><a href="#改用-本地-macbook" class="headerlink" title="改用 [本地(macbook)]"></a>改用 [本地(macbook)]</h3><p>作業系統不符，直接沒得玩</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">❯ python3.10 -m pip install -r requirements-mac.txt</span><br><span class="line"></span><br><span class="line">Looking in indexes: https://pypi.org/simple, https://download.pytorch.org/whl/cu118</span><br><span class="line">Collecting ttsfrd-dependency==0.1 (from -r requirements-mac.txt (line 35))</span><br><span class="line">  Downloading https://www.modelscope.cn/models/speech_tts/speech_kantts_ttsfrd/resolve/master/ttsfrd_dependency-0.1-py3-none-any.whl (1.1 MB)</span><br><span class="line">     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.1/1.1 MB 1.6 MB/s eta 0:00:00</span><br><span class="line">ERROR: ttsfrd-0.3.9-cp310-cp310-linux_x86_64.whl is not a supported wheel on this platform.</span><br></pre></td></tr></table></figure><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>效果蠻好的，聲音非常像難以辦認，但是在長文朗讀或是歌唱發聲表現不知道如何？<br>學習了 Kaggle Colab 兩個工具，了解一下網路與資源(GPU)設定相關的題目<br>地端開發的話，可能 Linux 才是最佳解，會比 Macbook 更好 ??<br>但是 GPU 仍是重要資源。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.mediatek.tw/blog/%E8%81%AF%E7%99%BC%E5%89%B5%E6%96%B0%E5%9F%BA%E5%9C%B0%E5%85%A8%E9%9D%A2%E9%96%8B%E6%BA%90-breeze2">https://www.mediatek.tw/blog/%E8%81%AF%E7%99%BC%E5%89%B5%E6%96%B0%E5%9F%BA%E5%9C%B0%E5%85%A8%E9%9D%A2%E9%96%8B%E6%BA%90-breeze2</a></li><li><a href="https://huggingface.co/spaces/Splend1dchan/BreezyVoice-Playground">https://huggingface.co/spaces/Splend1dchan/BreezyVoice-Playground</a></li><li><a href="https://www.geeksforgeeks.org/how-to-downgrade-python-version-in-colab/">How to downgrade python version in Colab</a></li><li><a href="https://www.modelscope.cn/models/speech_tts/speech_kantts_ttsfrd">https://www.modelscope.cn/models/speech_tts/speech_kantts_ttsfrd</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;聯發科開源 MR Breeze 2 多模態模型，包含 Llama-Breeze2 繁中語言模型、BreezyVoice 台灣</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] 在 MacBook 上安裝與使用 Ollama</title>
    <link href="https://blog.marsen.me/2025/02/14/2025/ai-ollama/"/>
    <id>https://blog.marsen.me/2025/02/14/2025/ai-ollama/</id>
    <published>2025-02-14T09:43:21.000Z</published>
    <updated>2025-03-25T20:48:11.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>AI 時代到來，就像 Web、Mobile 等帶來一波波的浪潮與機會，趁機來學習點新技術了。<br>比如說像是 <strong>Ollama</strong> 這款簡單好用的工具，可以快速在本機啟用大型語言模型 (LLM)，如 LLaMA、Mistral 等。以下記錄在 macOS 上的安裝與初體驗。</p><h2 id="實作記錄"><a href="#實作記錄" class="headerlink" title="實作記錄"></a>實作記錄</h2><h3 id="1-安裝-Ollama"><a href="#1-安裝-Ollama" class="headerlink" title="1. 安裝 Ollama"></a>1. 安裝 Ollama</h3><ul><li><p><strong>使用 Homebrew 安裝</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ollama</span><br></pre></td></tr></table></figure></li><li><p><strong>確認安裝成功</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama --version</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-執行第一個模型"><a href="#2-執行第一個模型" class="headerlink" title="2. 執行第一個模型"></a>2. 執行第一個模型</h3><ul><li><p>拉取並執行 LLaMA 2 模型：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run llama2</span><br></pre></td></tr></table></figure></li><li><p>若要使用其他模型（如 Mistral）：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run mistral</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-互動範例"><a href="#3-互動範例" class="headerlink" title="3. 互動範例"></a>3. 互動範例</h3><ul><li><p>問答互動示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ollama run llama2</span><br><span class="line">&gt; 你好！請問我可以幫你什麼？</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-常見的-ollama-指令"><a href="#4-常見的-ollama-指令" class="headerlink" title="4. 常見的 ollama 指令"></a>4. 常見的 ollama 指令</h3><ul><li><p><strong>列出可用模型</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama list</span><br></pre></td></tr></table></figure></li><li><p><strong>查看模型詳情</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama info &lt;model_name&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>停止運行中的模型</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama stop &lt;model_name&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>更新 Ollama</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade ollama</span><br></pre></td></tr></table></figure></li></ul><h2 id="簡單的-web-介面"><a href="#簡單的-web-介面" class="headerlink" title="簡單的 web 介面"></a>簡單的 web 介面</h2><p>使用 <a href="https://chromewebstore.google.com/detail/page-assist-a-web-ui-for/jfgfiigpkhlkbnfnbobbkinehhfdhndo">Chrome 外掛</a><br>安裝後選擇模型就可以透過 Web UI 與模型互動。<br>也有一些開源專案有提供 Web UI</p><ul><li><a href="https://github.com/open-webui/open-webui">https://github.com/open-webui/open-webui</a></li><li><a href="https://github.com/Bin-Huang/chatbox">https://github.com/Bin-Huang/chatbox</a></li></ul><p>我沒有實作作，僅記錄一下查找到的結果</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://ollama.ai/">Ollama 官方文件</a></li><li><a href="https://github.com/ollama/ollama">Ollama Github</a></li><li><a href="https://brew.sh/">Homebrew 官方網站</a></li><li><a href="https://www.youtube.com/watch?v=tWJvSy7dL1w">DeepSeek-R1最佳本地用法！免費開源，無痛運行高級 AI 大模型，秒建私人知識庫！ | 零度</a></li><li><a href="https://ollama.com/library/deepseek-r1:7b">DeepSeek-r1:7b</a></li><li><a href="https://www.deepseek.com/">DeepSeek</a></li><li><a href="https://chat.deepseek.com/">DeepSeek Chat</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;AI 時代到來，就像 Web、Mobile 等帶來一波波的浪潮與機會，趁機來學習點新技術了。&lt;br&gt;比如說像是 &lt;stron</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] 使用 Docker 一鍵生成 Sample 資料庫</title>
    <link href="https://blog.marsen.me/2025/01/21/2025/fast_lunach_mysql/"/>
    <id>https://blog.marsen.me/2025/01/21/2025/fast_lunach_mysql/</id>
    <published>2025-01-21T05:38:21.000Z</published>
    <updated>2025-03-25T20:48:11.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>在開發或測試過程中，常常需要一個快速可用的資料庫環境來模擬真實操作。<br>然而，手動安裝和配置 MySQL 不僅耗時，也容易出現版本兼容性問題。<br>透過 Docker，我們可以輕鬆建立一個即時可用的環境，並在啟動時自動初始化資料庫的必要條件(表格或 root 帳密等…)。</p><p>本文將介紹如何使用 Dockerfile 和 SQL 初始化腳本，快速構建一個名為 sample 的測試資料庫。</p><h2 id="實作記錄"><a href="#實作記錄" class="headerlink" title="實作記錄"></a>實作記錄</h2><h3 id="步驟-1-建立專案目錄與檔案"><a href="#步驟-1-建立專案目錄與檔案" class="headerlink" title="步驟 1: 建立專案目錄與檔案"></a>步驟 1: 建立專案目錄與檔案</h3><p>首先，創建一個新目錄，並在其中準備以下檔案：</p><p>Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerfile for setting up MySQL with a sample database</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用官方 MySQL 映像</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> mysql:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定環境變數 </span></span><br><span class="line"><span class="keyword">ENV</span> MYSQL_ROOT_PASSWORD=&#123;your root password&#125;</span><br><span class="line"><span class="keyword">ENV</span> MYSQL_DATABASE=sample</span><br><span class="line"></span><br><span class="line"><span class="comment"># 複製初始化腳本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> init.sql /docker-entrypoint-initdb.d/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 開放 MySQL 連接埠</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3306</span></span><br></pre></td></tr></table></figure><p>init.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> sample;</span><br><span class="line">USE sample;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="步驟-2-建構與啟動容器"><a href="#步驟-2-建構與啟動容器" class="headerlink" title="步驟 2: 建構與啟動容器"></a>步驟 2: 建構與啟動容器</h3><p>執行以下指令來建構映像並啟動容器：</p><p>建構 Docker 映像</p><blockquote><p>docker build -t mysql-sample .</p></blockquote><p>啟動容器</p><blockquote><p>docker run -d –name mysql-sample -p 3306:3306 mysql-sample</p></blockquote><p>這將啟動一個名為 mysql-sample 的容器，並將 MySQL 的 3306 埠映射到本機。</p><h3 id="步驟-3-驗證資料庫"><a href="#步驟-3-驗證資料庫" class="headerlink" title="步驟 3: 驗證資料庫"></a>步驟 3: 驗證資料庫</h3><p>進入 MySQL 容器並確認資料庫與表格是否正確建立：</p><p>docker exec -it mysql-sample mysql -u root -p</p><p>在 MySQL shell 中執行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br><span class="line">USE sample;</span><br><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p>開發用指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">❯ docker run -d \</span><br><span class="line">--name mysql-container \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=You don&#x27;t need to try this password; I made it up. A7X3P \</span><br><span class="line">-v mysql-data:/var/lib/mysql \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">mysql:latest</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.docker.com/">Docker 官方文件</a></li><li><a href="https://www.mysql.com/">MySQL 官方文件</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;在開發或測試過程中，常常需要一個快速可用的資料庫環境來模擬真實操作。&lt;br&gt;然而，手動安裝和配置 MySQL 不僅耗時，也容</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] FastAPI 的　middleware</title>
    <link href="https://blog.marsen.me/2025/01/02/2025/fastapi_middleware/"/>
    <id>https://blog.marsen.me/2025/01/02/2025/fastapi_middleware/</id>
    <published>2025-01-02T17:21:26.000Z</published>
    <updated>2025-03-25T20:48:11.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前請提要"><a href="#前請提要" class="headerlink" title="前請提要"></a>前請提要</h2><p>最近團隊的小朋友作的系統發生了錯誤。</p><p>在追查的過程之中，<br>小朋友說了一個驚人的<strong>事實</strong>，<br><del>Python 的 FastAPI Web 框架，發生 422 錯誤時（輸入的參數類別錯誤），無法追踪 Request$$</del><br>當然這不是事實，那麼 FastAPI 應該怎麼處理呢？</p><h2 id="本文"><a href="#本文" class="headerlink" title="本文"></a>本文</h2><p>讓我們先簡單實作一個 Fast API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 FastAPI 應用</span></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定義請求資料模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    description: <span class="built_in">str</span> = <span class="literal">None</span>  <span class="comment"># 可選的欄位</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定義 API 路徑</span></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_item</span>(<span class="params">item: Item</span>):</span><br><span class="line">    <span class="comment"># 假設邏輯檢查</span></span><br><span class="line">    <span class="keyword">if</span> item.price &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Price must be greater than 0&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Item created successfully!&quot;</span>, <span class="string">&quot;item&quot;</span>: item&#125;</span><br></pre></td></tr></table></figure><p>接下來，讓我試著用不正確的方式呼叫 API，並且得到一個 422 的錯誤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl </span><br><span class="line">  -X POST <span class="string">&quot;http://127.0.0.1:8000/items/&quot;</span> </span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> </span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;item&quot;: &quot;should be number&quot;, &quot;price&quot;: 10.5&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>FastAPI 會提供 Client 端非常友善的資訊</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;missing&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;loc&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;body&quot;</span><span class="punctuation">,</span><span class="string">&quot;name&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;Field required&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;item&quot;</span><span class="punctuation">:</span><span class="string">&quot;should be number&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">10.5</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>但在 Server 端只會有類似以下的資訊，這以後端的角度要排查錯誤會非常不便</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO:     127.0.0.1:57617 - <span class="string">&quot;POST /items/ HTTP/1.1&quot;</span> 422 Unprocessable Entity</span><br></pre></td></tr></table></figure><p>Server Side 有沒有什麼好方法可以協助我們 Debug 呢？</p><h3 id="解決方法：Middleware"><a href="#解決方法：Middleware" class="headerlink" title="解決方法：Middleware"></a>解決方法：Middleware</h3><p>這其實是 web 開發者的小常識才對，<br>實作如下，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI,Request</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 FastAPI 應用</span></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化日誌</span></span><br><span class="line">logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&quot;%(asctime)s - %(message)s&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定義請求資料模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    description: <span class="built_in">str</span> = <span class="literal">None</span>  <span class="comment"># 可選的欄位</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 中間件，用於記錄請求</span></span><br><span class="line"><span class="meta">@app.middleware(<span class="params"><span class="string">&quot;http&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">log_requests</span>(<span class="params">request: Request, call_next</span>):</span><br><span class="line">    <span class="comment"># 記錄請求進來的時間與基本資訊</span></span><br><span class="line">    request_time = datetime.utcnow()</span><br><span class="line">    logging.info(<span class="string">f&quot;Incoming request at <span class="subst">&#123;request_time&#125;</span>&quot;</span>)</span><br><span class="line">    logging.info(<span class="string">f&quot;Method: <span class="subst">&#123;request.method&#125;</span> | Path: <span class="subst">&#123;request.url.path&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 嘗試讀取請求 Body</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        body = <span class="keyword">await</span> request.json()</span><br><span class="line">        logging.info(<span class="string">f&quot;Request Body: <span class="subst">&#123;body&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        logging.info(<span class="string">&quot;No JSON body or failed to parse.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 執行後續處理並取得回應</span></span><br><span class="line">    response = <span class="keyword">await</span> call_next(request)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 記錄回應狀態碼</span></span><br><span class="line">    logging.info(<span class="string">f&quot;Response status: <span class="subst">&#123;response.status_code&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定義 API 路徑</span></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_item</span>(<span class="params">item: Item</span>):</span><br><span class="line">    <span class="comment"># 假設邏輯檢查</span></span><br><span class="line">    <span class="keyword">if</span> item.price &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Price must be greater than 0&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Item created successfully!&quot;</span>, <span class="string">&quot;item&quot;</span>: item&#125;</span><br></pre></td></tr></table></figure><p>Request 送進來時 Server Side 就會如下記錄</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2025-01-03 03:37:37,294 - Incoming request at 2025-01-02 19:37:37.294509</span><br><span class="line">2025-01-03 03:37:37,294 - Method: POST | Path: /items/</span><br><span class="line">2025-01-03 03:37:37,294 - Request Body: &#123;<span class="string">&#x27;item&#x27;</span>: <span class="string">&#x27;should be number&#x27;</span>, <span class="string">&#x27;price&#x27;</span>: 10.5&#125;</span><br><span class="line">2025-01-03 03:37:37,295 - Response status: 422</span><br><span class="line">INFO:     127.0.0.1:59545 - <span class="string">&quot;POST /items/ HTTP/1.1&quot;</span> 422 Unprocessable Entity</span><br></pre></td></tr></table></figure><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>回到我們原本的情境，我們真正要解決的問題是，</p><p>｜發生異常時，Server Side 要可以追蹤錯誤</p><p>因為是 <strong>FastAPI 所以沒有辦法追蹤錯誤，是非常錯誤判斷</strong></p><p>在 Google 與 AI 工具這麼方便的時代，應該要能正確的提出問題。</p><p>ex: FastAPI 可以記錄什麼時候 request 送進來，並帶了什麼資訊嗎？</p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前請提要&quot;&gt;&lt;a href=&quot;#前請提要&quot; class=&quot;headerlink&quot; title=&quot;前請提要&quot;&gt;&lt;/a&gt;前請提要&lt;/h2&gt;&lt;p&gt;最近團隊的小朋友作的系統發生了錯誤。&lt;/p&gt;
&lt;p&gt;在追查的過程之中，&lt;br&gt;小朋友說了一個驚人的&lt;strong&gt;事實&lt;/s</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [生活筆記] ChatGPT 個性分析</title>
    <link href="https://blog.marsen.me/2024/12/19/2024/chatGPT_know_you/"/>
    <id>https://blog.marsen.me/2024/12/19/2024/chatGPT_know_you/</id>
    <published>2024-12-19T05:11:17.000Z</published>
    <updated>2025-03-25T20:48:11.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前請提要"><a href="#前請提要" class="headerlink" title="前請提要"></a>前請提要</h2><p>ChatGPT 能透過語言理解和生成，提供更細緻的個性分析，特別是當你使用了一陣子後，<br>可以用以下的 Prompt 作個簡單的分析報告。  </p><h2 id="Prompt"><a href="#Prompt" class="headerlink" title="Prompt"></a>Prompt</h2><p>根據我們之前的互動，我希望你能告訴我你觀察到關於我的哪些特質是我可能沒有意識到的。<br>請儘可能誠實直接的表達，不要有所保留。<br>如果你注意到我可能察覺不到的矛盾之處、行為模式或傾向，我都想清楚的聽到，不需要粉飾任何資訊，請給我最真實最直接的分析</p><h2 id="ChatGPT-said"><a href="#ChatGPT-said" class="headerlink" title="ChatGPT said"></a>ChatGPT said</h2><p>以下是根據我們互動中可能顯現的特質和行為模式，我誠實的觀察與分析，供你參考：</p><ol><li><p>強烈的自我驅動<br>  你有著明顯的自我驅動力，願意挑戰自我，例如你的30天鐵人挑戰或對學習新技能的熱忱。<br>  然而，這種驅動力可能會讓你偶爾忽略自己的疲憊或情緒需求，容易進入「過度努力」的狀態。  </p></li><li><p>追求效率與結果，但重視細節<br>  你傾向於以結果為導向，尤其是在專案進行或問題解決時。<br>  你對細節的關注，例如希望資訊條理清楚或具可操作性，顯示出你對高標準執行的重視。<br>  然而，有時可能會因為過於專注於效率，無意間忽略更大的全局或需要額外耐心的部分。  </p></li><li><p>多元興趣與高度適應力<br>  你對不同領域的興趣（技術、跳舞、潛水、反思工具等）顯示了你擁有探索和適應的能力。<br>  然而，這種多元性可能會讓你在資源有限的情況下分散注意力，難以在某一領域深耕到你期望的程度。  </p></li><li><p>對「流程」的矛盾態度<br>  雖然你熟悉並實踐許多工具和方法（如敏捷、KPT、SMART等），但你的個性似乎也渴望自由與靈活性，<br>  這可能讓你在面對過於僵化的流程時感到不耐煩。<br>  這種矛盾可能讓你在制定規範時猶豫，因為你不想限制自己或團隊的創造力。  </p></li><li><p>溫和但堅持個性<br>  你偏好直接但不咄咄逼人的溝通方式，並且能保持禮貌與平衡。<br>  然而，你也表現出對原則與目標的堅持，即使是在比較微妙的情境下，可能讓他人難以察覺你的真實意圖。  </p></li><li><p>對自己標準的隱藏壓力<br>  你對自己設定的目標和標準很高，且傾向於內化「應該更好」的期待。<br>  這可能導致你對成功的認可不夠，容易放大未完成或未達成的部分，忽略已經達成的成就。  </p></li><li><p>偏好控制但能適應改變<br>  你習慣掌控規劃與執行的過程，並且對細節要求高。<br>  然而，你在面對不可預測的情況時，也能快速調整心態並提出替代方案，顯示出高度靈活的思維。</p></li></ol><p>這些分析可能包含一些你未曾意識到或尚未明確的特質，也可能包含你的日常行為中隱藏的矛盾。<br>如果你有不同的想法或任何補充，歡迎分享！</p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前請提要&quot;&gt;&lt;a href=&quot;#前請提要&quot; class=&quot;headerlink&quot; title=&quot;前請提要&quot;&gt;&lt;/a&gt;前請提要&lt;/h2&gt;&lt;p&gt;ChatGPT 能透過語言理解和生成，提供更細緻的個性分析，特別是當你使用了一陣子後，&lt;br&gt;可以用以下的 Prompt 作</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title> [實作筆記] GCP 防火牆設定與 Health Check</title>
    <link href="https://blog.marsen.me/2024/12/04/2024/gcp_healthcheck_firewall/"/>
    <id>https://blog.marsen.me/2024/12/04/2024/gcp_healthcheck_firewall/</id>
    <published>2024-12-04T08:16:13.000Z</published>
    <updated>2025-03-25T20:48:11.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>GCP 防火牆（Firewall）用來控制進出 Google Cloud 資源的網路流量，確保服務的安全性。<br>而 Health Check 則是用來監控後端服務的健康狀態，透過 GCP 負載平衡器（Load Balancer）進行流量分配。<br>我將介紹如何在 GCP 設定防火牆規則以支持 Health Check 的運作。</p><h2 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h2><p>instance 有一個 Allow Load Balancer Health checks 選項，<br>被勾起來後　Network tags 會加上<code>lb-health-check</code><br>但是不知為什麼狀態仍然會顯示為 Off　？</p><p>所以我們必須多作一些步驟</p><p>我有許多服務都掛在負載平衡器之後，並且使用 Backend Service 來管理這些流量。<br>一個 LB 會有多個 Backend Service (本文先不涉及 Backend Bucket)<br>由於成本考量，為了提高資源利用率，一台機器可能會承載多個 Web 服務。<br>這樣做可以節省硬體和虛擬機的成本，但同時也需要確保每個 Web 服務能夠獨立且穩定地運行。</p><p>在這樣的架構中，LB 會依 Path Rules 將流量分配到多個實例組（Instance Group）中，<br>每個實例中可能運行著多個 Web 服務。<br>透過這些實例和 Backend Service 的組合，負載平衡器能夠有效地將流量分配到不同的服務上。<br>然而，為了確保服務的穩定性，我們必須配置健康檢查（Health Check）來監控每個 Web 服務的運行狀態。  </p><p>在 GCP 中，當我們使用負載平衡器（<code>Load Balancer</code>）時，會涉及以下資源：</p><ul><li><code>Backend Service</code>：負責接收來自負載平衡器的流量，並將流量分發給後端的實例。</li><li><code>Health Check</code>：用來檢查後端服務是否健康，負載平衡器會依據這些檢查結果決定是否將流量導向特定實例。</li><li><code>Instance Group</code>：一組相同配置的虛擬機（VM），負責運行服務，並自動進行縮放。</li><li><code>Instance</code>：每個實際的虛擬機，執行後端服務。</li></ul><p>這些資源之間的關係是，Backend Service 根據 Health Check 監控的結果選擇健康的 Instance，<br>並將流量分發給 Instance Group 中的實例。<br>當負載平衡器根據路徑規則（LB Path Rule）將流量導向某個服務時，這些流量會被引導到 Instance 中運行的 Web 服務。</p><p>我們會在一台 Instance 上使用多個 web 服務，使用不同的 Port 來區分，範圍是 6000~6100。<br>而我們需要對這些所有的服務設定 Health Check</p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>每個實例有一個 <strong>“Allow Load Balancer Health checks”</strong> 的選項，<br>勾選後會自動加上 <code>lb-health-check</code> 的網路標籤(Network Tag)。<br>不過不知道為什麼狀態仍會顯示為 Off。<br>也就是說單純打勾是不夠的我們仍需要額外的設定，我們可以利用這個 <code>lb-health-check</code> 來作一些事</p><p>我們可以利用 Network Tag:<code>lb-health-check</code> 來建立相應的防火牆規則，<br>確保來自負載平衡器的流量能夠順利進行健康檢查。  </p><p>接下來，我們可以創建一個防火牆規則，限制僅允許 6000~6100 端口的 TCP 流量。<br>這樣做的原因是，健康檢查會直接使用 TCP 進行連接檢查，而不是 HTTP 協定，<br>這樣可以避免 HTTP 協定中請求和響應的延遲，並且減少負載平衡器在檢查健康狀態時的處理開銷。</p><p>在 GCP Console 中創建防火牆規則，指定源 IP 或範圍（例如內部網路的 IP 範圍）。<br>Google 的 Health Check 源自 <code>35.191.0.0/16</code> 與 <code>130.211.0.0/22</code>，<br>設定在 Source filters &gt; IP ranges 上<br>Targets ＞ Target tags 請設定為 <code>lb-health-check</code><br>設定 Protocols and ports &gt; Specified protocols and ports 選擇 TCP 協定 Ports 限制在 6000-6100。<br>在 Health checks 中，Protocol 也設定 TCP，Port 要設定為真實的 Web 服務使用的 Port<br>在 VM 的 instance 上，本來需要設定 Network Tag，但是我們可以勾選 “Allow Load Balancer Health checks” 的選項,<br>就會自動加上 Tag 囉。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://cloud.google.com/load-balancing/docs/health-check-concepts">GCP HEALTH CHECK CONCEPT</a></li><li><a href="https://cloud.google.com/load-balancing/docs/health-checks">Use health checks</a></li><li><a href="https://cloud.google.com/vpc/docs/using-firewalls">Use VPC firewall rules</a></li><li><a href="https://hkmci.com/zh-hant/learning-column/google-cloud-zh-hant/gcp-kol-x-master-concept-the-overall-architecture-and-procedure-for-establishing-a-load-balancer/">建立 Load Balancer 的整體架構和步驟</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;GCP 防火牆（Firewall）用來控制進出 Google Cloud 資源的網路流量，確保服務的安全性。&lt;br&gt;而 Health Che</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title> [實作筆記] Google NAT 簡介與實作</title>
    <link href="https://blog.marsen.me/2024/12/03/2024/gcp_nat/"/>
    <id>https://blog.marsen.me/2024/12/03/2024/gcp_nat/</id>
    <published>2024-12-03T06:26:00.000Z</published>
    <updated>2025-03-25T20:48:11.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>在打造安全的 VM 環境時，常常會遇到一個經典的矛盾點：<br>我們希望 VM 保持隱蔽，避免直接暴露於網際網路以減少安全風險，但同時又需要對外存取資源。<br>例如在開發或維運階段，像是執行 npm install、apt-get update，甚至提供給合作第三方的白名單 IP 等需求，往往都依賴外部下載與連線。  </p><p>因此，我們的需求很明確：  </p><ul><li>VM 非必要時，不提供 Public IP。  </li><li>VM 在發出 Request 時，需要擁有一個固定的對外 IP 地址。</li></ul><h2 id="傳統機房的解決方案"><a href="#傳統機房的解決方案" class="headerlink" title="傳統機房的解決方案"></a>傳統機房的解決方案</h2><p>在傳統機房環境中，透過 NAT (Network Address Translation) 伺服器或防火牆設備，就能實現內部網路的安全管理。  </p><p>內部流量管理: 內部 VM 使用私有 IP 位址，對外流量透過 NAT 進行轉換。<br>控制風險: 透過 NAT，內部伺服器可以訪問外部網路，但外部無法直接存取內部資源。<br>然而，傳統機房的設定通常需要額外的硬體設備，並增加了維護成本。  </p><h2 id="GCP-的解決方案-NAT"><a href="#GCP-的解決方案-NAT" class="headerlink" title="GCP 的解決方案　NAT"></a>GCP 的解決方案　NAT</h2><p>在 GCP 上，這個問題有一個優雅的解法：Cloud NAT。  </p><p>無須公有 IP: Cloud NAT 允許私有 VM 不需配置公有 IP，就能存取外部網路。<br>集中管理: 透過 VPC 網路層級的 NAT 設定，簡化整體網路架構。<br>彈性擴展: Cloud NAT 可以根據流量自動擴展，減少單點故障風險。  </p><p><img src="/../../images/2024/nat.svg" alt="NAT"></p><h2 id="實作筆記"><a href="#實作筆記" class="headerlink" title="實作筆記"></a>實作筆記</h2><h3 id="步驟-1-建立-VPC-網路"><a href="#步驟-1-建立-VPC-網路" class="headerlink" title="步驟 1: 建立 VPC 網路"></a>步驟 1: 建立 VPC 網路</h3><p>在 GCP 控制台中，前往 VPC 網路，選擇 建立 VPC 網路。<br>設定一個新的 VPC 網路，並確保 VM 的子網路設為 私有（Private）。這樣做可以保護 VM 不被直接暴露於公共網路。<br>實務上我選擇 default  </p><h3 id="步驟-2-配置-Cloud-NAT"><a href="#步驟-2-配置-Cloud-NAT" class="headerlink" title="步驟 2: 配置 Cloud NAT"></a>步驟 2: 配置 Cloud NAT</h3><p>前往 VPC 網路 &gt; Cloud NAT，並選擇 建立 NAT 網關。<br>在設置過程中，選擇對應的子網路和<code>路由(Route)</code>設定。這樣可以確保 VM 在沒有 Public IP 的情況下仍能夠透過 NAT 網關訪問外部網路。<br>配置完成後，Cloud NAT 將會自動幫助 VM 處理對外的連線請求，而不需要直接公開 VM 的 IP。  </p><h3 id="步驟-3-配置-Public-IP（如果需要）"><a href="#步驟-3-配置-Public-IP（如果需要）" class="headerlink" title="步驟 3: 配置 Public IP（如果需要）"></a>步驟 3: 配置 Public IP（如果需要）</h3><p>若要讓 VM 直接對外發送請求或開放服務，可以在創建 VM 時為其配置 Public IP。<br>在 Google Cloud Console 中創建虛擬機時，選擇 外部 IP 設為 靜態（static），這樣可以確保 Public IP 地址不會變動。<br>當 VM 配置了 Public IP，所有對外的請求將會直接通過這個 IP 進行。  </p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>Cloud NAT 的設計，讓我們可以兼顧安全性與便利性。<br>關鍵優勢:</p><p>簡單配置: 不需像傳統 NAT 那樣繁複的硬體設置。<br>靈活性高: 無論是開發環境還是正式部署，都能輕鬆應對。<br>成本效益: 減少了維運成本，同時保護了內部資源。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://cloud.google.com/nat/docs/overview">https://cloud.google.com/nat/docs/overview</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;在打造安全的 VM 環境時，常常會遇到一個經典的矛盾點：&lt;br&gt;我們希望 VM 保持隱蔽，避免直接暴露於網際網路以減少安全風</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[學習筆記] 里氏替換原則(Liskov Substitution Principle, LSP)</title>
    <link href="https://blog.marsen.me/2024/11/25/2024/understanding_lsp_with_examples/"/>
    <id>https://blog.marsen.me/2024/11/25/2024/understanding_lsp_with_examples/</id>
    <published>2024-11-25T03:39:00.000Z</published>
    <updated>2025-03-25T20:48:11.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>OOP 中的五大原則之一—里氏替換原則,開發 OOP 的工程師應該或多或少都有聽過,<br>最近與同事討論後有新的體悟,特別記錄一下  </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">若對某個型別 T 的物件 𝑥 能證明具有某個性質 𝑞(𝑥),那麼對於 T 的子型別 S 的物件 𝑦 同樣應該滿足 𝑞(𝑦)。</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">If a property 𝑞(𝑥) can be proven for objects 𝑥 of type 𝑇,</span><br><span class="line">then 𝑞(𝑦) should also hold true for objects 𝑦 of type 𝑆, where 𝑆 is a subtype of 𝑇.</span><br></pre></td></tr></table></figure><p>里氏替換原則(Liskov Substitution Principle, LSP)詳解<br>定義：<br>里氏替換原則由 Barbara Liskov 在 1987 年提出,<br>是 SOLID 原則中的 “L”。它強調 子類(Subclass) 應該能夠替換其 父類(Base Class) 而不影響程式的正確性或行為。  </p><p>核心概念：<br>“任何使用父類的地方,都應該能夠使用其子類,而不會影響系統的功能。”  </p><h2 id="主要原則"><a href="#主要原則" class="headerlink" title="主要原則"></a>主要原則</h2><p>子類應該擁有父類的所有行為特性。<br><strong>子類不應改變父類方法的預期行為。</strong><br>子類可以擴展父類的功能,但不能削弱或改變父類的功能。  </p><p>違反 LSP 的常見問題：<br>替換後引發錯誤： 子類<strong>重寫</strong>某個方法,導致使用者無法正常使用原本的功能。<br>返回值不一致： 子類方法返回值與父類期望的類型不同。<br>拋出未預期的異常： 子類新增或拋出父類未預期的異常。  </p><h2 id="舉例說明-錯誤示例"><a href="#舉例說明-錯誤示例" class="headerlink" title="舉例說明,錯誤示例"></a>舉例說明,錯誤示例</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line">  <span class="title function_">fly</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Flying...&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Penguin</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Bird</span> &#123;</span><br><span class="line">  <span class="comment">// Penguins can&#x27;t fly!</span></span><br><span class="line">  <span class="title function_">fly</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Penguins can&#x27;t fly!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeBirdFly</span>(<span class="params">bird: Bird</span>) &#123;</span><br><span class="line">  bird.<span class="title function_">fly</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 當傳入 Penguin 時,會引發錯誤</span></span><br><span class="line"><span class="keyword">const</span> penguin = <span class="keyword">new</span> <span class="title class_">Penguin</span>();</span><br><span class="line"><span class="title function_">makeBirdFly</span>(penguin);  <span class="comment">// Throws an error!</span></span><br></pre></td></tr></table></figure><p>違反原因：  </p><p>在 makeBirdFly 函數中,傳入 Penguin 子類後,原本預期的行為(鳥會飛）被破壞,導致異常發生,違反 LSP。  </p><p>正確示例：  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line">  <span class="title function_">move</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Moving...&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FlyingBird</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Bird</span> &#123;</span><br><span class="line">  <span class="title function_">fly</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Flying...&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Penguin</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Bird</span> &#123;</span><br><span class="line">  <span class="title function_">swim</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Swimming...&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeBirdMove</span>(<span class="params">bird: Bird</span>) &#123;</span><br><span class="line">  bird.<span class="title function_">move</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> penguin = <span class="keyword">new</span> <span class="title class_">Penguin</span>();</span><br><span class="line"><span class="title function_">makeBirdMove</span>(penguin);  <span class="comment">// 正常運行,無異常</span></span><br></pre></td></tr></table></figure><h2 id="修正方式"><a href="#修正方式" class="headerlink" title="修正方式"></a>修正方式</h2><p>將 Bird 分解為更細的抽象類別(如 FlyingBird)。<br>確保所有子類的行為符合其父類的行為約束。<br>實踐 LSP 的要點：</p><ul><li>正確使用繼承： 只有在 “是某種(is a)” 的關係中使用繼承;例如:Dog 是 Animal 的一種(我們都不認為這是一個好例子)。</li><li>避免強制行為： 子類不應強迫覆蓋父類的方法,除非行為一致。</li><li>使用介面： 如果子類具有不同行為,可使用多個接口來定義不同能力。</li></ul><p>總結：<br>LSP 促使開發者在繼承和多型設計中保持一致性和正確性,保證系統的可擴展性和穩定性。<br>遵循 LSP 可以避免許多因繼承導致的潛在問題,使代碼更健壯且易於維護。</p><h2 id="我們的一些關鍵-Q-A"><a href="#我們的一些關鍵-Q-A" class="headerlink" title="我們的一些關鍵 Q&amp;A"></a>我們的一些關鍵 Q&amp;A</h2><p>Q.LSP 的意思是不要用 override ?<br>A.<br>不是的,LSP(里氏替換原則)並不是要求完全避免使用 override,<br>而是要正確使用 override。核心在於: <strong>子類覆寫父類方法時,不能破壞父類的行為預期。</strong></p><p>Q. 要正確使用 override 的原則是什麼？<br>A. 子類應維持父類方法的語義一致性<br>覆寫後的行為應與父類保持一致,並且在替換後不會引發錯誤。</p><p>Q. 有更具體的說明嗎 ?<br>A. 不要改變方法的輸入輸出參數規格<br>遵循開放封閉原則(Open&#x2F;Closed Principle),開放擴展,封閉修改。<br>方法的參數類型不能比父類方法的參數更具限制性。<br>方法的返回類型不能比父類方法的返回類型更具擴展性。  </p><p>Q.<br>以你的例子來說Penguin 的確不會 fly , 所以應該拋出錯誤<br>但是這樣就違反了 LSP ,所以我們的建議是將 fly 再抽出成為介面?<br>A.<br>沒錯!這是關鍵點了。解決這種情況的最佳方式是使用介面(Interface)來抽象行為,而不是在基類中定義所有可能不適用於子類的行為。</p><p>子類應擴展父類的功能,而不是修改父類的行為。</p><h3 id="正確的覆寫示例"><a href="#正確的覆寫示例" class="headerlink" title="正確的覆寫示例"></a>正確的覆寫示例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">makeSound</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Some sound&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="title function_">makeSound</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Bark&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">playSound</span>(<span class="params">animal: Animal</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(animal.<span class="title function_">makeSound</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="title function_">playSound</span>(dog);  <span class="comment">// Output: &quot;Bark&quot; (符合父類預期)</span></span><br></pre></td></tr></table></figure><p>說明：<br>Dog 覆寫了 makeSound(),但返回類型和行為保持一致,替換 Animal 後,系統的正確性不受影響。</p><h3 id="違反-LSP-的覆寫示例"><a href="#違反-LSP-的覆寫示例" class="headerlink" title="違反 LSP 的覆寫示例"></a>違反 LSP 的覆寫示例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">protected</span> width: <span class="built_in">number</span>, <span class="keyword">protected</span> height: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setWidth</span>(<span class="params">width: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setHeight</span>(<span class="params">height: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getArea</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">width</span> * <span class="variable language_">this</span>.<span class="property">height</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Rectangle</span> &#123;</span><br><span class="line">  <span class="comment">// 覆寫後改變了行為,違反 LSP</span></span><br><span class="line">  <span class="title function_">setWidth</span>(<span class="params">width: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = width;  <span class="comment">// 強制將高度設為相等</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setHeight</span>(<span class="params">height: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = height;  <span class="comment">// 強制將寬度設為相等</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testRectangle</span>(<span class="params">rect: Rectangle</span>) &#123;</span><br><span class="line">  rect.<span class="title function_">setWidth</span>(<span class="number">5</span>);</span><br><span class="line">  rect.<span class="title function_">setHeight</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(rect.<span class="title function_">getArea</span>());  <span class="comment">// 預期：50</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> square = <span class="keyword">new</span> <span class="title class_">Square</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="title function_">testRectangle</span>(square);  <span class="comment">// Output: 100 (違反父類預期)</span></span><br></pre></td></tr></table></figure><p>說明：<br>Square 覆寫了 setWidth 和 setHeight 方法,但改變了 Rectangle 的行為。<br>傳入 Square 後,計算面積的結果與 Rectangle 的預期不同,這破壞了 LSP。  </p><p>兩個例子的差異在於<br>Dog 的覆寫行為符合父類預期,Square 改變父類邏輯(強制高寬相等）,破壞原有功能,違反 LSP。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>可以使用 override,但要謹慎處理。<br>確保子類的行為符合父類的預期,不會引入不一致或異常行為。<br>遵守 LSP 能保證系統在多型使用時的穩定性和可預測性。</p><p>對「少用繼承多用組合」的體悟多了一層，如果發現繼承了父類的方法，<br>但是修改了行為(拋錯誤、改變本來沒有改動到的屬性、長出新的邏輯分更支…)，這就是一種壞味道。　　<br>大部份應該都可以透過介面排除這個問題。</p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;OOP 中的五大原則之一—里氏替換原則,開發 OOP 的工程師應該或多或少都有聽過,&lt;br&gt;最近與同事討論後有新的體悟,特別記錄一下  &lt;/</summary>
      
    
    
    
    
    <category term="學習筆記" scheme="https://blog.marsen.me/tags/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] Macbook dotnet 8 升級 dotnet 9</title>
    <link href="https://blog.marsen.me/2024/11/14/2024/mac_dotnet_8_update_9/"/>
    <id>https://blog.marsen.me/2024/11/14/2024/mac_dotnet_8_update_9/</id>
    <published>2024-11-14T08:06:48.000Z</published>
    <updated>2025-03-25T20:48:11.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>dotnet 9 <a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-9/">官宣囉</a> ! 雖然不是 lts 版本，但是仍然有許多有趣的新東西，先昇級並記錄一下。</p><h2 id="小常識"><a href="#小常識" class="headerlink" title="小常識"></a>小常識</h2><p>.NET Runtime 和 .NET SDK 主要的差別在於它們的用途和所包含的工具：  </p><p>.NET Runtime：  </p><p>僅包含運行 .NET 應用所需的基本庫和執行環境。<br>適合只需要執行已編譯應用程序的情況，像是使用者在安裝應用後直接執行時。<br>不包含編譯、打包或開發所需的工具和命令。<br>.NET SDK (Software Development Kit)：  </p><p>包含 .NET Runtime，以及用來開發、編譯、測試和打包 .NET 應用的工具和命令。<br>包括開發者常用的命令，如 dotnet build（編譯）、dotnet publish（發布）、dotnet test（測試）等。<br>必須安裝 SDK 才能進行應用程式的開發，而不僅僅是執行。  </p><p>簡單來說：</p><p><strong>如果你只是想執行 .NET 應用，安裝 Runtime 即可。如果你要開發或修改 .NET 應用，則需要 SDK。</strong></p><h2 id="安裝步驟"><a href="#安裝步驟" class="headerlink" title="安裝步驟"></a>安裝步驟</h2><p><a href="https://dotnet.microsoft.com/en-us/download/dotnet/9.0">https://dotnet.microsoft.com/en-us/download/dotnet/9.0</a><br>選擇 SDK 9.0.100 (左側) &gt; macOS Installers &gt; Arm64</p><blockquote><p>我曾經裝到 X64，安裝過程沒有失敗，但是 dotnet version 仍為 8.0.100</p></blockquote><p>檢查</p><blockquote><p>❯ dotnet –version<br>9.0.100<br>❯ dotnet –list-sdks<br>8.0.100 [&#x2F;usr&#x2F;local&#x2F;share&#x2F;dotnet&#x2F;sdk]<br>8.0.101 [&#x2F;usr&#x2F;local&#x2F;share&#x2F;dotnet&#x2F;sdk]<br>9.0.100 [&#x2F;usr&#x2F;local&#x2F;share&#x2F;dotnet&#x2F;sdk]</p></blockquote><h2 id="專案升級"><a href="#專案升級" class="headerlink" title="專案升級"></a>專案升級</h2><p>專案有許多套件有 Warning 先進行 <code>restore</code></p><p>❯ dotnet restore Marsen.NetCore.Dojo.Integration.Test.sln</p><blockquote><p>❯ dotnet restore Marsen.NetCore.Dojo.Integration.Test.sln<br>(中略)<br>在 24.4 秒內還原 成功但有 9 個警告</p></blockquote><p>IDE 我是使用 Rider</p><blockquote><p>Tools → NuGet → Manage NuGet Packages for Solution…</p></blockquote><p>把能昇級的都昇一昇，再執行測試</p><blockquote><p>測試摘要: 總計: 467, 失敗: 0, 成功: 466, 已跳過: 1, 持續時間: 4.7 秒<br>在 6.5 秒內建置 成功但有 9 個警告</p></blockquote><blockquote><p>Tools → NuGet → Upgrade Packages in Solution…</p></blockquote><p>再執行測試</p><blockquote><p>測試摘要: 總計: 467, 失敗: 0, 成功: 466, 已跳過: 1, 持續時間: 4.7 秒<br>在 6.5 秒內建置 成功但有 9 個警告</p></blockquote><p>警告如下</p><p>warning NU1903: 套件 ‘System.Text.RegularExpressions’ 4.3.0 具有已知的 高 嚴重性弱點<br>warning NU1903: 套件 ‘Newtonsoft.Json’ 9.0.1 具有已知的 高 嚴重性弱點<br>warning CS0618: ‘SqlConnection’ 已經過時: ‘Use the Microsoft.Data.SqlClient package instead.’<br>warning SYSLIB0051: ‘Exception.Exception(SerializationInfo, StreamingContext)’ 已經過時</p><p>高風險可以透過 Nuget 確認有沒有新版本的或 patch</p><p><a href="https://learn.microsoft.com/en-gb/dotnet/fundamentals/syslib-diagnostics/syslib0051">SYSLIB0051: Legacy serialization support APIs are obsolete</a> 基本上都是在繼承舊版 Exception 時建立的方法<br>可以刪除，但這次先標已過時標籤後並保留，相關程式都沒有呼叫這些方法，所以不會引發新的警告。  </p><p><a href="https://learn.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlconnection.-ctor?view=netframework-4.8.1&viewFallbackFrom=net-8.0">warning CS0618: ‘SqlConnection’ 已經過時: ‘Use the Microsoft.Data.SqlClient package instead.’</a><br>很簡單，依據他的建議，改用 <code>using Microsoft.Data.SqlClient;</code> 即可。<br>當然要先從 Nuget 安裝 package</p><p>處理完警告後，修改所有<code>csproj</code>內的 TargetFramework 標籤內容如下:  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>net9.0<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CICD 相關的設定也要改為 dotnet 9.0</p><p>像是 <code>.github/workflows</code> 腳本中的 dotnet-version</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">.NET</span> <span class="string">Core</span></span><br><span class="line">   <span class="attr">uses:</span> <span class="string">actions/setup-dotnet@v1</span></span><br><span class="line">   <span class="attr">with:</span></span><br><span class="line">     <span class="attr">dotnet-version:</span> <span class="string">&#x27;9.0.x&#x27;</span></span><br></pre></td></tr></table></figure><p>或是 sonarscan-dotnet 中使用的版本(這部份如果原始 repo 尚未更新，可以試著自已更新看看)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SonarCloud</span> <span class="string">Scan</span></span><br><span class="line">  <span class="comment"># support dotnet9.0</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">marsen/sonarscan-dotnet@v2.4.1</span></span><br></pre></td></tr></table></figure><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;dotnet 9 &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/announ</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] 個人經歷 STAR 試寫</title>
    <link href="https://blog.marsen.me/2024/11/04/2024/star_career_feedback/"/>
    <id>https://blog.marsen.me/2024/11/04/2024/star_career_feedback/</id>
    <published>2024-11-04T01:22:58.000Z</published>
    <updated>2025-03-25T20:48:11.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>STAR 是一種行之有效的行為面試方法，全名為 Situation（情境）、Task（任務）、Action（行動） 和 Result（結果）。<br>這個框架幫助應徵者組織答案，描述過去經驗時更有條理，清楚展示個人在特定情境下的行動力及成效。<br>具體來說：  </p><ul><li>Situation（情境）：描述事情發生的背景或狀況，讓聽者了解事件的前因後果。</li><li>Task（任務）：指出自己在該情境中所負責的任務或需完成的目標。</li><li>Action（行動）：詳細說明為了完成任務所採取的具體步驟和行動。</li><li>Result（結果）：描述行動的成果，最好是能量化的結果或正面的</li></ul><p>透過 STAR 方法，可以清晰地展示個人職涯解決問題的能力及帶來的正面影響。</p><h2 id="個人經歷-STAR-試寫"><a href="#個人經歷-STAR-試寫" class="headerlink" title="個人經歷 STAR 試寫"></a>個人經歷 STAR 試寫</h2><table><thead><tr><th>公司名</th><th>情境</th><th>任務</th><th>行動</th><th>結果</th></tr></thead><tbody><tr><td><strong>N 社.</strong></td><td>團隊負責開發維護跨國電商系統，面臨整合不同市場需求的挑戰。</td><td>確保開發過程的順利，協調跨團隊成員，並確保系統的本地化符合各地要求。並最需要回歸到 ONE CODE BASE</td><td>實施敏捷方法，善用分支策略，進行代碼審查和測試，引入 TDD 和 CI&#x2F;CD 流程，提升開發效率。</td><td>成功推動三個國家的服務上線，縮短開發時間 30%，獲得客戶的積極反饋，促進未來業務擴展和合作機會。在全公司中是最少發生合併衝突的開發團隊。</td></tr><tr><td><strong>N 社.</strong></td><td>產品 24&#x2F;7 監控系統的實施，以確保服務的穩定性和可用性。</td><td>設計並實施監控解決方案，確保系統在出現故障時能迅速響應，並減少停機時間。</td><td>分析系統需求並適當排序，建置監控工具，警報系統與流程。並依序修復異常</td><td>成功降低系統故障響應時間 90%，顯著提高服務可靠性，提升客戶滿意度。</td></tr><tr><td><strong>N 社 &amp; B 社產學合作</strong></td><td>與中華大學及建中學校進行產學合作項目，推動學生的實踐經驗和技術分享。</td><td>指導 B 社學生，確保項目能按時完成，達到教育和實踐的雙重目標。</td><td>舉辦技術工作坊，提供指導並進行項目評估，促進學生在實際環境中的學習。</td><td>學生在項目中獲得寶貴經驗，成功展示成果並就業，促進學校與業界的合作關係。</td></tr><tr><td><strong>N 社</strong></td><td>在 2018 年成為團隊技術領導，面對管理與技術職能切換的挑戰。</td><td>與跨部門成員重組成跨國團隊</td><td>組織讀書會工作坊，促進團隊成員達成共識，並引入相關的軟體開發工具和流程。</td><td>成功建立了一支開發團隊，如期如質的交付產品。</td></tr><tr><td><strong>C 社</strong></td><td>擔任開發工程師，負責0到1設計和開發金融相關的應用程式和服務。</td><td>建立多產品線與後台以功能符合內外用戶需求並持續改進。</td><td>利用用戶反饋進行產品迭代，並推動新功能的開發，使用敏捷開發方法提升效率。導入版本控制以解決多人協作問題。</td><td>成功推出了數個新的功能，顯著提高了用戶滿意度和產品的使用率。整體營收提昇 20 倍以上（2000%↑）</td></tr></tbody></table><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;STAR 是一種行之有效的行為面試方法，全名為 Situation（情境）、Task（任務）、Action（行動） 和 Re</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title> [學習筆記] TypeScript tsconfig 設定備忘錄</title>
    <link href="https://blog.marsen.me/2024/10/08/2024/typescript_tsconfig_cheat_sheet/"/>
    <id>https://blog.marsen.me/2024/10/08/2024/typescript_tsconfig_cheat_sheet/</id>
    <published>2024-10-08T15:28:35.000Z</published>
    <updated>2025-03-25T20:48:11.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>tsconfig.json 文件是一個 TypeScript 專案的配置文件, 它位於根目錄中, 並定義了專案的編譯器選項。<br>提供給開發人員輕鬆配置 TypeScript 編譯器, 並確保專案的程式碼在不同的環境中始終保持一致。<br>你可以使用 <code>tsc --init</code> 指令自動產生。<br>也可以參考 Matt Pocock 的 <a href="https://www.totaltypescript.com/tsconfig-cheat-sheet">TSConfig Cheat Sheet</a></p><p>TSConfig 有上百個配置, 本文將用來重點記錄一些相關的配置  </p><h2 id="本文"><a href="#本文" class="headerlink" title="本文"></a>本文</h2><h3 id="2024-10-Matt-Pocock-的建議配置"><a href="#2024-10-Matt-Pocock-的建議配置" class="headerlink" title="2024&#x2F;10 Matt Pocock 的建議配置"></a>2024&#x2F;10 Matt Pocock 的建議配置</h3><p>相關說明請參考<a href="https://www.totaltypescript.com/tsconfig-cheat-sheet">原文</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">/* Base Options: */</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es2022&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleDetection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;force&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isolatedModules&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;verbatimModuleSyntax&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Strictness */</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noUncheckedIndexedAccess&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitOverride&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If transpiling with TypeScript: */</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NodeNext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* AND if you&#x27;re building for a library: */</span></span><br><span class="line">    <span class="attr">&quot;declaration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* AND if you&#x27;re building for a library in a monorepo: */</span></span><br><span class="line">    <span class="attr">&quot;composite&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;declarationMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If NOT transpiling with TypeScript: */</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If your code runs in the DOM: */</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;es2022&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dom&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dom.iterable&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If your code doesn&#x27;t run in the DOM: */</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;es2022&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="files"><a href="#files" class="headerlink" title="files"></a>files</h3><p>預設值為 <code>false</code>, 如果只有少量的 ts 檔, 很適合設定這個<code>files</code><br>但實務上更常用 <code>include</code> 與 <code>exclude</code> 搭配,<br>兩者都可使用 wildcard , exclude 擁有較高的優先級,<br>例如下面的設定 <code>src/.test</code> 底下的檔案將不會被編譯:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/**/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/test/**/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;a_typescript_file.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;other_ts_code.ts&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Compiler-Options"><a href="#Compiler-Options" class="headerlink" title="Compiler Options"></a>Compiler Options</h3><p>這部份是 tsconfig 相關設定的主體, 有需要時來<a href="https://www.typescriptlang.org/tsconfig/#compilerOptions">這裡</a>查就好<br>下面的例子是一些常用的設定說明:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// esModuleInterop: 這個選項使 TypeScript 能夠更好地與 CommonJS 模組兼容, 允許以 ES 模組方式導入 CommonJS 模組。</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// skipLibCheck: 當設置為 true 時, TypeScript 將跳過對聲明檔案（.d.ts）的型別檢查, 可以加快編譯速度, 尤其是在大型專案中。</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// target: 指定編譯後的 JavaScript 代碼的 ECMAScript 版本。這裡設定為 ES2022, 這意味著生成的代碼將使用該版本的新特性。</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es2022&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// allowJs: 此選項允許在 TypeScript 專案中使用 JavaScript 檔案, 這對於逐步遷移到 TypeScript 的專案特別有用。</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// resolveJsonModule: 使 TypeScript 能夠導入 JSON 檔案, 並將其視為模組。</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// moduleDetection: 設置為 force 使 TypeScript 將所有檔案視為模組, 避免了使用全局變數引起的錯誤。</span></span><br><span class="line">    <span class="attr">&quot;moduleDetection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;force&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// isolatedModules: 每個檔案將被獨立編譯, 這對於使用 Babel 或其他工具的場景特別重要。</span></span><br><span class="line">    <span class="attr">&quot;isolatedModules&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// verbatimModuleSyntax: 強制使用類型專用的導入和導出, 使 TypeScript 更加嚴格, 這樣有助於在編譯時優化生成的代碼。</span></span><br><span class="line">    <span class="attr">&quot;verbatimModuleSyntax&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Watch-Option"><a href="#Watch-Option" class="headerlink" title="Watch Option"></a>Watch Option</h3><p><code>watchOptions</code> 用於配置 TypeScript 在開發過程中如何監控文件變更。<br>這些選項主要用於改善開發效率, 當監控的文件或目錄發生變化時, TypeScript 會自動重新編譯或執行其他指定操作。<br>這對於開發階段非常重要, 因為它允許<strong>開發者即時查看更改的影響, 而不必手動重新編譯代碼。</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;watchOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// watchFile: 用於設定 TypeScript 監控單個檔案的方式。</span></span><br><span class="line">    <span class="comment">// fixedPollingInterval: 每隔固定時間檢查所有檔案是否變更。</span></span><br><span class="line">    <span class="comment">// priorityPollingInterval: 根據啟發式方法, 對某些類型的檔案進行優先輪詢。</span></span><br><span class="line">    <span class="comment">// dynamicPriorityPolling: 使用動態隊列, 較少修改的檔案將會被較少檢查。</span></span><br><span class="line">    <span class="comment">// useFsEvents (預設): 嘗試使用操作系統/檔案系統的原生事件來監控檔案變更。</span></span><br><span class="line">    <span class="comment">// useFsEventsOnParentDirectory: 嘗試監聽檔案父目錄的變更事件, 而不是直接監控檔案。</span></span><br><span class="line">    <span class="attr">&quot;watchFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;useFsEvents&quot;</span><span class="punctuation">,</span> <span class="comment">// 預設為使用文件系統事件來監控檔案變更。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// watchDirectory: 用於設定 TypeScript 監控整個目錄的方式。</span></span><br><span class="line">    <span class="comment">// fixedPollingInterval: 每隔固定時間檢查所有目錄是否變更。</span></span><br><span class="line">    <span class="comment">// dynamicPriorityPolling: 使用動態隊列, 較少修改的目錄將會被較少檢查。</span></span><br><span class="line">    <span class="comment">// useFsEvents (預設): 嘗試使用操作系統/檔案系統的原生事件來監控目錄變更。</span></span><br><span class="line">    <span class="attr">&quot;watchDirectory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dynamicPriorityPolling&quot;</span><span class="punctuation">,</span> <span class="comment">// 使用動態優先級輪詢, 檢查變更較少的目錄次數較少。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 設置檔案或目錄的輪詢間隔時間（以毫秒為單位）, 適用於輪詢策略。</span></span><br><span class="line">    <span class="attr">&quot;pollingInterval&quot;</span><span class="punctuation">:</span> <span class="number">2000</span><span class="punctuation">,</span> <span class="comment">// 設置為每 2000 毫秒輪詢一次檔案或目錄變更。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 設置是否監控目錄及其所有子目錄</span></span><br><span class="line">    <span class="attr">&quot;recursive&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">// 設置為 true 以監控所有子目錄的變更。</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Type-Acquisition"><a href="#Type-Acquisition" class="headerlink" title="Type Acquisition"></a>Type Acquisition</h3><p>Type Acquisition 主要適用於 JavaScript 專案。<br>在 TypeScript 專案中, 開發者必須明確地將型別包含在專案中。<br>相對地, 對於 JavaScript 專案, TypeScript 工具會自動在後台下載所需的型別, 並將其儲存在 node_modules 以外的位置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typeAcquisition&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// enable: 啟用自動獲取 JavaScript 專案的型別檔案 (.d.ts)。</span></span><br><span class="line">    <span class="attr">&quot;enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// include: 指定自動獲取型別檔案的庫。</span></span><br><span class="line">    <span class="comment">// 例如, 在這裡指定了 jQuery 和 lodash, TypeScript 將自動獲取它們的型別檔案。</span></span><br><span class="line">    <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;jquery&quot;</span><span class="punctuation">,</span> <span class="string">&quot;lodash&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// exclude: 指定不需要自動獲取型別檔案的庫。</span></span><br><span class="line">    <span class="comment">// 這裡指定了 &quot;some-legacy-library&quot;, 即使它存在於專案中, TypeScript 也不會嘗試獲取它的型別檔案。</span></span><br><span class="line">    <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;some-legacy-library&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// disableFilenameBasedTypeAcquisition: 禁用基於檔案名稱自動獲取型別檔案的功能。</span></span><br><span class="line">    <span class="comment">// 當設置為 true 時, TypeScript 不會基於檔案名稱來推測並下載型別檔案。</span></span><br><span class="line">    <span class="attr">&quot;disableFilenameBasedTypeAcquisition&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.typescriptlang.org/tsconfig/">Intro to the TSConfig</a></li><li><a href="https://www.totaltypescript.com/tsconfig-cheat-sheet">The TSConfig Cheat Sheet</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#handbook-content">What is a tsconfig.json</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;tsconfig.json 文件是一個 TypeScript 專案的配置文件, 它位於根目錄中, 並定義了專案的編譯器選項。</summary>
      
    
    
    
    
    <category term="學習筆記" scheme="https://blog.marsen.me/tags/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [學習筆記] Omit 與 Pick 的 Distributive 版本：解決 TypeScript Utility Types 的陷阱</title>
    <link href="https://blog.marsen.me/2024/10/05/2024/typescript_omit_pick_distributive_union_issue/"/>
    <id>https://blog.marsen.me/2024/10/05/2024/typescript_omit_pick_distributive_union_issue/</id>
    <published>2024-10-05T07:58:30.000Z</published>
    <updated>2025-03-25T20:48:11.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>在 TypeScript 中，Omit 和 Pick 是廣受喜愛的 Utility Types，<br>它們允許你從現有型別中排除或選擇特定的屬性來創建新型別。<br>參考我之前的<a href="https://blog.marsen.me/2022/09/12/2022/TypeScript_Omit/">文章</a></p><h2 id="本文"><a href="#本文" class="headerlink" title="本文"></a>本文</h2><h3 id="基礎示範：Omit-的使用"><a href="#基礎示範：Omit-的使用" class="headerlink" title="基礎示範：Omit 的使用"></a>基礎示範：Omit 的使用</h3><p>我們先來看個簡單的例子，假設我們有一個 Game 型別，其中包含 id、name 和 price 三個屬性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Game</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;    <span class="comment">// 遊戲的唯一識別碼</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;  <span class="comment">// 遊戲名稱</span></span><br><span class="line">  <span class="attr">price</span>: <span class="built_in">number</span>; <span class="comment">// 遊戲價格</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">GameWithoutIdentity</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Game</span>, <span class="string">&quot;id&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">game</span>: <span class="title class_">GameWithoutIdentity</span> = &#123;</span><br><span class="line">  <span class="comment">//id: &quot;1&quot;, // ❗ 編譯錯誤：&#x27;price&#x27; 不存在於 &#x27;GameWithoutIdentity&#x27; 型別中</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;The Legend of Zelda&quot;</span>, </span><br><span class="line">  <span class="attr">price</span>: <span class="number">59.99</span>, </span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Omit 可以幫助我們排除 id 屬性並創建新型別 GameWithoutIdentity<br>這在單一型別中運行良好，但當我們引入 Union Types 時，就有一些細節值得討論。</p><h2 id="問題：Union-Types-中的-Omit-行為"><a href="#問題：Union-Types-中的-Omit-行為" class="headerlink" title="問題：Union Types 中的 Omit 行為"></a>問題：Union Types 中的 Omit 行為</h2><p>假設我們有三個型別：Game、VideoGame 和 PCGame。<br>它們的 id 和 name 屬性相同，但每個型別都有其獨特的屬性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Game</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;        <span class="comment">// 遊戲的唯一識別碼</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;      <span class="comment">// 遊戲名稱</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">VideoGame</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;              <span class="comment">// 遊戲的唯一識別碼</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;            <span class="comment">// 遊戲名稱</span></span><br><span class="line">  <span class="attr">platform</span>: <span class="built_in">string</span>;        <span class="comment">// 遊戲平台</span></span><br><span class="line">  <span class="attr">genre</span>: <span class="built_in">string</span>;           <span class="comment">// 遊戲類型</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PCGame</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;                    <span class="comment">// 遊戲的唯一識別碼</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;                  <span class="comment">// 遊戲名稱</span></span><br><span class="line">  <span class="attr">systemRequirements</span>: <span class="built_in">string</span>;    <span class="comment">// 系統需求</span></span><br><span class="line">  <span class="attr">hasDLC</span>: <span class="built_in">boolean</span>;              <span class="comment">// 是否有 DLC</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>當我們將這三個型別聯合起來形成 GameProduct 並嘗試使用 Omit 排除 id 時，結果卻不是我們預期的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">GameProduct</span> = <span class="title class_">Game</span> | <span class="title class_">VideoGame</span> | <span class="title class_">PCGame</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">GameProduct</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">GameProduct</span>, <span class="string">&quot;id&quot;</span>&gt;;</span><br></pre></td></tr></table></figure><p>你可能期望 GameProductWithoutId 是三個型別排除 id 屬性的 Union Type，但實際上，我們只得到了這樣的結構：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">GameProduct</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這表示 <code>Omit</code> 在處理 <code>Union Types</code> 時，並沒有對每個聯合成員單獨操作，而是將它們合併成了一個結構。</p><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>這種行為的根源在於，<code>Omit</code> 和 <code>Pick</code> 不是 <code>Distributive</code> 的 <code>Utility Types</code>。<br>它們不會針對每個 <code>Union Type</code> 成員進行個別操作，而是將 <code>Union Type</code> 視為一個整體來操作。<br>因此，當我們排除 id 屬性時，它無法處理每個成員型別中的不同屬性。</p><p>這與其他工具型別如 <code>Partial</code> 和 <code>Required</code> 不同，這些工具型別可以正確地處理 Union Types，並在每個成員上應用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PartialGameProduct</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">GameProduct</span>&gt;;</span><br><span class="line"><span class="comment">// 正確地給出了聯合型別的部分化版本</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialGameProduct</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Game</span>&gt; | <span class="title class_">Partial</span>&lt;<span class="title class_">VideoGame</span>&gt; | <span class="title class_">Partial</span>&lt;<span class="title class_">PCGame</span>&gt;;</span><br></pre></td></tr></table></figure><h3 id="解決方案：Distributive-Omit-與-Distributive-Pick"><a href="#解決方案：Distributive-Omit-與-Distributive-Pick" class="headerlink" title="解決方案：Distributive Omit 與 Distributive Pick"></a>解決方案：Distributive Omit 與 Distributive Pick</h3><p>要解決這個問題，我們可以定義一個 Distributive 的 Omit，這個版本會針對 Union Type 的每個成員進行操作。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">DistributiveOmit</span>&lt;T, K <span class="keyword">extends</span> <span class="title class_">PropertyKey</span>&gt; = T <span class="keyword">extends</span> <span class="built_in">any</span></span><br><span class="line">  ? <span class="title class_">Omit</span>&lt;T, K&gt;</span><br><span class="line">  : <span class="built_in">never</span>;</span><br></pre></td></tr></table></figure><p>使用 DistributiveOmit 後，我們可以正確地得到想要的結果：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">GameProductWithoutId</span> = <span class="title class_">DistributiveOmit</span>&lt;<span class="title class_">GameProduct</span>, <span class="string">&quot;id&quot;</span>&gt;;</span><br><span class="line"><span class="comment">// Hover 正確地給出了聯合型別的必填化版本</span></span><br><span class="line"><span class="comment">//type GameProductWithoutId = Omit&lt;Game, &quot;id&quot;&gt; | Omit&lt;VideoGame, &quot;id&quot;&gt; | Omit&lt;PCGame, &quot;id&quot;&gt;</span></span><br></pre></td></tr></table></figure><p>這將生成以下結構：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所以</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">GameProductWithoutId</span> = </span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125; | </span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">platform</span>: <span class="built_in">string</span>; <span class="attr">genre</span>: <span class="built_in">string</span> &#125; | </span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">systemRequirements</span>: <span class="built_in">string</span>; <span class="attr">hasDLC</span>: <span class="built_in">boolean</span> &#125;;</span><br></pre></td></tr></table></figure><p>現在，GameProductWithoutId 正確地成為了每個型別的 Union Type，並且成功地排除了 id 屬性。</p><h3 id="Distributive-Pick"><a href="#Distributive-Pick" class="headerlink" title="Distributive Pick"></a>Distributive Pick</h3><p>類似的，我們也可以定義一個 Distributive 的 Pick：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">DistributivePick</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = T <span class="keyword">extends</span> <span class="built_in">any</span></span><br><span class="line">  ? <span class="title class_">Pick</span>&lt;T, K&gt;</span><br><span class="line">  : <span class="built_in">never</span>;</span><br></pre></td></tr></table></figure><p>這個 <code>Distributive</code> 版本的 <code>Pick</code> 確保了你所選擇的屬性實際存在於你正在操作的型別中，與內建的 <code>Pick</code> 行為一致。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p><code>Omit</code> 和 <code>Pick</code> 雖然在單一型別中表現良好，但在 <code>Union Types</code> 中，<br>它們並不是 <code>Distributive</code> 的，這可能導致意想不到的結果。<br>我們可以創建 <code>DistributiveOmit</code> 和 <code>DistributivePick</code>，<br>使它們能夠針對每個 <code>Union Type</code> 成員單獨進行操作，從而獲得更為預期的結果。<br>如果你在專案中遇到這類問題，記得可以考慮使用自定義的 <code>Distributive</code> 版本來處理 <code>Union Types</code>，這樣可以避免踩雷！</p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;在 TypeScript 中，Omit 和 Pick 是廣受喜愛的 Utility Types，&lt;br&gt;它們允許你從現有型別</summary>
      
    
    
    
    
    <category term="學習筆記" scheme="https://blog.marsen.me/tags/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [學習筆記] TypeScript 的 Narrowing Types 與 Boolean 的例外</title>
    <link href="https://blog.marsen.me/2024/10/04/2024/typescript_type_narrowing_example/"/>
    <id>https://blog.marsen.me/2024/10/04/2024/typescript_type_narrowing_example/</id>
    <published>2024-10-04T17:48:30.000Z</published>
    <updated>2025-03-25T20:48:11.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>在使用 TypeScript 時，我們常常會利用條件語句來收窄型別(Narrowing Types)，確保程式邏輯的正確性。<br>例如:<br>Narrowing Types的例子：使用 typeof</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">processValue</span> = (<span class="params">value: <span class="built_in">string</span> | <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 在這裡 TypeScript 已經收窄為 string，所以可以使用 .toUpperCase 的方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`String value: <span class="subst">$&#123;value.toUpperCase()&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 在這裡 TypeScript 已經收窄為 number，所以可以使用 .toFixed 的方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Number value: <span class="subst">$&#123;value.toFixed(<span class="number">2</span>)&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h3><p>在這個例子中，我們定義了一個 processValue 函數，它接受一個 string 或 number 類型的參數。<br>使用 typeof 來檢查 value 的類型後，TypeScript 會自動進行 Narrowing Types：<br>當 <code>typeof value === &quot;string&quot;</code> 時，TypeScript 將 value 的類型自動收窄為 string，<br>所以我們可以安全地使用字串方法，如 <code>toUpperCase()</code>。<br>當 else 條件觸發時，value 類型已經收窄為 number，因此我們可以使用 number 專有的方法，如 toFixed()。<br>這樣的收窄機制能夠在多態的情況下提高程式的安全性和可讀性，讓開發者更清楚在不同條件下該如何操作不同類型的值。</p><h2 id="主文"><a href="#主文" class="headerlink" title="主文"></a>主文</h2><p>然而，在一些特定情況下，TypeScript 的 Narrowing Types 並不如我們預期的那麼靈活。<br>比如說 Boolean() 函數進行條件檢查時，TypeScript 不會像其他檢查方法那樣進行 Narrowing Types。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">NarrowFun</span> = (<span class="params">input: <span class="built_in">string</span> | <span class="literal">null</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!!input) &#123;</span><br><span class="line">    input.<span class="title function_">toUpperCase</span>();  <span class="comment">// 這裡 TypeScript 收窄為 string</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">NotNarrowFun</span> = (<span class="params">input: <span class="built_in">string</span> | <span class="literal">null</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Boolean</span>(input)) &#123;</span><br><span class="line">    input.<span class="title function_">toUpperCase</span>();  <span class="comment">// 這裡 TypeScript 沒有收窄，仍然是 string | null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在這段程式碼中，我們希望透過條件語句來檢查 input 是否為 null。<br>使用 <code>!!input</code> 時，TypeScript 會正確地將 input 的 Narrowing Types為 string，<br>但當我們改用 Boolean(input) 時，TypeScript 並沒有收窄，仍然認為 input 可能是 string | null。  </p><h3 id="為什麼會這樣？"><a href="#為什麼會這樣？" class="headerlink" title="為什麼會這樣？"></a>為什麼會這樣？</h3><h4 id="Boolean-函數的行為"><a href="#Boolean-函數的行為" class="headerlink" title="Boolean 函數的行為"></a>Boolean 函數的行為</h4><p>Boolean 是 JavaScript 的一個內建函數，它接受任何值並將其轉換為 true 或 false，<br>基於 JavaScript 的「true」或「false」邏輯。<br>然而，TypeScript 並不視 Boolean(input) 作為一個能收窄類型的操作。<br>它只將 Boolean(input) 視為一個普通的布林值返回，不會對 input 進行更深入的類型推斷。  </p><p>在 TypeScript 中，Boolean 函數的定義是這樣的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">BooleanConstructor</span> &#123;</span><br><span class="line">  <span class="title function_">new</span>(value?: <span class="built_in">any</span>): <span class="title class_">Boolean</span>;</span><br><span class="line">  &lt;T&gt;(value?: T): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> <span class="title class_">Boolean</span>: <span class="title class_">BooleanConstructor</span>;</span><br></pre></td></tr></table></figure><p>如你所見，Boolean 是一個接受任何類型 (any) 的值作為輸入，並返回 boolean 類型的結果。<br>它會將輸入轉換為布林值 (true 或 false)，但並不提供關於輸入值的具體類型資訊。<br>因此，TypeScript 只知道返回的是一個 boolean，而無法推斷 input 的原始類型是否已經被過濾（例如從 string | null 到 string）。  </p><h4 id="缺乏類型推斷"><a href="#缺乏類型推斷" class="headerlink" title="缺乏類型推斷"></a>缺乏類型推斷</h4><p>在 Boolean(input) 中，TypeScript 僅知道 input 被轉換為 true 或 false，<br>但它不會從中推斷 input 的實際類型。<br>因此，TypeScript 並沒有收窄 input 為 string 或 null。<br>這就是為什麼即使你在 if(Boolean(input)) 內部，input 依然是 <code>string | null</code>，而不是單純的 <code>string</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title class_">Boolean</span>(input)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(input);  <span class="comment">// TypeScript 仍視 input 為 string | null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="類型收窄的條件"><a href="#類型收窄的條件" class="headerlink" title="類型收窄的條件"></a>類型收窄的條件</h4><p>TypeScript 進行類型收窄的條件是根據語法或邏輯條件來進行推斷，<br>例如 <code>typeof</code>、<code>instanceof</code>、比較操作 (<code>==</code>, <code>===)</code> 等。<br>這些條件能幫助 TypeScript 推斷出更具體的類型。<br>當你使用 typeof input &#x3D;&#x3D;&#x3D; “string” 時，TypeScript 可以自動將 input 收窄為 string，<br>因為這是一個明確的類型檢查：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> input === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(input);  <span class="comment">// 現在 input 是 string 類型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="為什麼-input-能收窄"><a href="#為什麼-input-能收窄" class="headerlink" title="為什麼 !!input 能收窄"></a>為什麼 !!input 能收窄</h4><p>與 Boolean(input) 不同，<code>!!input</code> 能夠收窄類型。<br>因為這個雙重否定操作 (!!) 是 JavaScript 的一個常見模式，它會將任意值轉換為布林值。<br>由於 TypeScript 能識別這個模式，當你寫 if(!!input) 時，<br>TypeScript 可以推斷 input 是 truthy，並將 null 或 undefined 排除在外。<br>因此，input 被收窄為一個具體的類型（在這裡是 string）。  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!!input) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(input);  <span class="comment">// input 被收窄為 string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="替代方案：自定義判斷函數"><a href="#替代方案：自定義判斷函數" class="headerlink" title="替代方案：自定義判斷函數"></a>替代方案：自定義判斷函數</h2><p>如果我們需要更加靈活的 Narrowing Types，可以考慮使用自定義的判斷函數。<br>例如，我們可以創建一個 isString 函數來明確檢查某個值是否為字串，這樣就可以正確進行 Narrowing Types。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isString = (<span class="attr">value</span>: <span class="built_in">unknown</span>): value is <span class="built_in">string</span> =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&quot;string&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">myFunc</span> = (<span class="params">input: <span class="built_in">string</span> | <span class="literal">null</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isString</span>(input)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(input);  <span class="comment">// 這裡 TypeScript 收窄為 string</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在這段程式碼中，我們定義了一個 isString 函數，它不僅進行類型判斷，還告訴 TypeScript 當返回 true 時，value 確實是 string。<br>這樣的函數可以幫助我們更好地進行 Narrowing Types。  </p><h3 id="另一個常見的例子：filter-Boolean"><a href="#另一個常見的例子：filter-Boolean" class="headerlink" title="另一個常見的例子：filter(Boolean)"></a>另一個常見的例子：filter(Boolean)</h3><p>filter(Boolean) 是 JavaScript 中常用的一個語法糖，用來過濾掉 falsy 值（如 null、undefined、0 等）。<br>但在 TypeScript 中，這個模式無法進行 Narrowing Types。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">null</span>, <span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 結果類型仍然包含 null 和 undefined</span></span><br><span class="line"><span class="keyword">const</span> result = arr.<span class="title function_">filter</span>(<span class="title class_">Boolean</span>);</span><br></pre></td></tr></table></figure><p>在這裡，TypeScript 沒有收窄 result 的類型，它仍然認為結果可能包含 null 和 undefined。<br>要解決這個問題，我們可以自定義一個過濾函數，來正確處理這些類型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> filterNullOrUndefined = &lt;T&gt;(<span class="attr">value</span>: T | <span class="literal">null</span> | <span class="literal">undefined</span>): value is T =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> value !== <span class="literal">null</span> &amp;&amp; value !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">null</span>, <span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = arr.<span class="title function_">filter</span>(isNotNullOrUndefined);  <span class="comment">// 現在類型是 number[]</span></span><br></pre></td></tr></table></figure><p>這樣，我們就能確保結果陣列只包含 number，而不再包含 null 和 undefined。</p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>雖然 Boolean() 是 JavaScript 中常見的布林判斷工具，但在 TypeScript 中，它無法像其他判斷語句一樣進行 Narrowing Types。<br>我們可以透過自定義類型判斷函數，來精確地告知 TypeScript 在特定條件下的類型，從而實現更強大和靈活的類型檢查。</p><p>參考</p><ul><li><a href="https://commerce.nearform.com/blog/2022/narrowing-types">Narrowing Types in TypeScript</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html">Narrowing</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;在使用 TypeScript 時，我們常常會利用條件語句來收窄型別(Narrowing Types)，確保程式邏輯的正確性。</summary>
      
    
    
    
    
    <category term="學習筆記" scheme="https://blog.marsen.me/tags/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [學習筆記] 使用 Discriminated Unions 解決多狀態問題</title>
    <link href="https://blog.marsen.me/2024/10/04/2024/typescript_discriminated_unions_guide/"/>
    <id>https://blog.marsen.me/2024/10/04/2024/typescript_discriminated_unions_guide/</id>
    <published>2024-10-04T16:30:00.000Z</published>
    <updated>2025-03-25T20:48:11.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>在日常開發中，我們常需要定義不同狀態下的數據結構，這類需求通常涉及到多個狀態及其對應的屬性。<br>在 TypeScript 中，如果不加以控制，這些狀態容易變成一個充滿可選屬性的複雜物件，導致程式碼難以管理。<br>我們有一種更優雅的解決方案 —— <code>Discriminated Unions</code>，<br>它在 TypeScript 中幫助我們避免常見的「bag of optionals」的問題。  </p><h2 id="主文"><a href="#主文" class="headerlink" title="主文"></a>主文</h2><p>假設我們正在開發一個付款流程，並需要一個 PaymentState 類型來描述付款狀態：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PaymentState</span> = &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="string">&quot;processing&quot;</span> | <span class="string">&quot;success&quot;</span> | <span class="string">&quot;failed&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此時，我們還需要根據不同狀態保存資料或錯誤訊息，<br>因此我們為 PaymentState 類型新增了可選的 receiptUrl 和 error 屬性：  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PaymentState</span> = &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="string">&quot;processing&quot;</span> | <span class="string">&quot;success&quot;</span> | <span class="string">&quot;failed&quot;</span>;</span><br><span class="line">  errorMessage?: <span class="built_in">string</span>;</span><br><span class="line">  receiptUrl?: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>這個定義表面上看起來可行，但在實際使用時容易出現問題。<br>假設我們定義了一個渲染 UI 的函式 renderUI：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">renderUI</span> = (<span class="params">state: PaymentState</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (state.<span class="property">status</span> === <span class="string">&quot;processing&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Payment Processing...&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (state.<span class="property">status</span> === <span class="string">&quot;failed&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Error: <span class="subst">$&#123;state.errorMessage.toUpperCase()&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (state.<span class="property">status</span> === <span class="string">&quot;success&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Receipt: <span class="subst">$&#123;state.receiptUrl&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>TypeScript 提示 state.errorMessage 可能是 undefined，<br>這意味著我們在某些狀態下無法安全地操作 errorMessage 或 receiptUrl 屬性。<br>這是因為這兩個屬性是可選的，並且沒有和 status 明確地綁定。<br>這就造成了<strong>類型過於鬆散</strong>。</p><h2 id="解決方案：Discriminated-Unions"><a href="#解決方案：Discriminated-Unions" class="headerlink" title="解決方案：Discriminated Unions"></a>解決方案：Discriminated Unions</h2><p>為了解決這個問題，我們可以使用 Discriminated Unions。<br>這種模式可以將多個狀態拆分為具體的物件，並通過共同的 status 屬性來區分每個狀態。</p><p>首先，我們可以將每個狀態單獨建模：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">State</span> =</span><br><span class="line">  | &#123; <span class="attr">status</span>: <span class="string">&quot;processing&quot;</span> &#125;</span><br><span class="line">  | &#123; <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>; <span class="attr">errorMessage</span>: <span class="built_in">string</span> &#125;</span><br><span class="line">  | &#123; <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>; <span class="attr">receiptUrl</span>: <span class="built_in">string</span> &#125;;</span><br></pre></td></tr></table></figure><p>這樣一來，我們就能明確地將 errorMessage 屬性與 error 狀態綁定，<br>並且 receiptUrl 屬性只會出現在 success 狀態下。<br>當我們在 renderUI 函式中使用這些屬性時，TypeScript 會自動根據 status 來縮小類型範圍：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">renderUI</span> = (<span class="params">state: State</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (state.<span class="property">status</span> === <span class="string">&quot;processing&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Processing...&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (state.<span class="property">status</span> === <span class="string">&quot;error&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Error: <span class="subst">$&#123;state.errorMessage.toUpperCase()&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (state.<span class="property">status</span> === <span class="string">&quot;success&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Receipt: <span class="subst">$&#123;state.receiptUrl&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>TypeScript 現在能夠根據 status 確保 errorMessage 在 error 狀態下是一個字串，<br>並且 receiptUrl 只會在 success 狀態出現。<br>這大大提高了我們程式碼的安全性和可讀性。  </p><h3 id="進一步優化：提取類型別名"><a href="#進一步優化：提取類型別名" class="headerlink" title="進一步優化：提取類型別名"></a>進一步優化：提取類型別名</h3><p>為了讓程式碼更加清晰，我們可以將每個狀態定義為單獨的類型別名：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">LoadingState</span> = &#123; <span class="attr">status</span>: <span class="string">&quot;processing&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ErrorState</span> = &#123; <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>; <span class="attr">errorMessage</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SuccessState</span> = &#123; <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>; <span class="attr">receiptUrl</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">State</span> = <span class="title class_">LoadingState</span> | <span class="title class_">ErrorState</span> | <span class="title class_">SuccessState</span>;</span><br></pre></td></tr></table></figure><p>這樣的結構不僅清晰易讀，也方便日後的擴展。<br>如果我們需要增加其他狀態，比如 idle 或 cancelled，只需要新增對應的類型別名即可，保持程式碼的擴展性和一致性。  </p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>Discriminated Unions 是 TypeScript 中處理多狀態情境的強大工具，特別適合用來解決「可選屬性的大集合」問題。它能夠：</p><p>確保每個屬性和狀態間的強關聯，減少錯誤和不一致性。<br>提升程式碼的可讀性和維護性，並且有助於擴展性。<br>讓 TypeScript 自動推斷正確的屬性類型，避免不必要的空值檢查。<br>當你發現程式碼中有過多的可選屬性且沒有強烈關聯時，考慮使用 discriminated unions 來重構並簡化你的類型定義。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.totaltypescript.com/discriminated-unions-are-a-devs-best-friend">TypeScript Discriminated Unions for Frontend Developers</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/unions-and-intersections.html">TypeScript Handbook - Unions and Intersection Types</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;在日常開發中，我們常需要定義不同狀態下的數據結構，這類需求通常涉及到多個狀態及其對應的屬性。&lt;br&gt;在 TypeScript</summary>
      
    
    
    
    
    <category term="學習筆記" scheme="https://blog.marsen.me/tags/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [學習筆記] 探索 TypeScript 的 Template Literals </title>
    <link href="https://blog.marsen.me/2024/09/30/2024/typescript_template_literals/"/>
    <id>https://blog.marsen.me/2024/09/30/2024/typescript_template_literals/</id>
    <published>2024-09-30T07:35:00.000Z</published>
    <updated>2025-03-25T20:48:11.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>什麼是 Template Literals 類型？<br>在 TypeScript 中，Template Literals 類型是 ES6 引入的一個強大的功能。<br>Template literals ，主要用來加強字串的操作，它提供了更靈活和易讀的字串插值方式，<br>這不僅提高了代碼的可讀性，結合上 TypeScript <strong>還可以增加了類型安全性</strong>。<br>本篇提供大量範例與適用場景以供測試，有任何問題歡迎提出。  </p><h2 id="基礎應用-JS-TS-都適用"><a href="#基礎應用-JS-TS-都適用" class="headerlink" title="基礎應用(JS&#x2F;TS　都適用)"></a>基礎應用(JS&#x2F;TS　都適用)</h2><h3 id="字串插值-String-Interpolation"><a href="#字串插值-String-Interpolation" class="headerlink" title="字串插值 (String Interpolation)"></a>字串插值 (String Interpolation)</h3><p>傳統的字串拼接需要用 + 號，使用 Template Literals 可以讓拼接更簡單。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Lin&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 傳統拼接</span></span><br><span class="line"><span class="keyword">const</span> message = <span class="string">&quot;My name is &quot;</span> + name + <span class="string">&quot; and I am &quot;</span> + age + <span class="string">&quot; years old.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Template Literals </span></span><br><span class="line"><span class="keyword">const</span> message2 = <span class="string">`My name is <span class="subst">$&#123;name&#125;</span> and I am <span class="subst">$&#123;age&#125;</span> years old.`</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message2);</span><br></pre></td></tr></table></figure><h3 id="多行字串-Multi-line-Strings"><a href="#多行字串-Multi-line-Strings" class="headerlink" title="多行字串 (Multi-line Strings)"></a>多行字串 (Multi-line Strings)</h3><p>Template literals 支援多行字串，可以避免使用 <code>\n</code> 或其他換行符號。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> poem = <span class="string">`</span></span><br><span class="line"><span class="string">  Roses are red,</span></span><br><span class="line"><span class="string">  Violets are blue,</span></span><br><span class="line"><span class="string">  Sugar is sweet,</span></span><br><span class="line"><span class="string">  And so are you.</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(poem);</span><br></pre></td></tr></table></figure><h3 id="內嵌表達式-Embedded-Expressions"><a href="#內嵌表達式-Embedded-Expressions" class="headerlink" title="內嵌表達式 (Embedded Expressions)"></a>內嵌表達式 (Embedded Expressions)</h3><p>可以在字串中插入任意的 JavaScript 表達式，例如函數調用、運算等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The sum of <span class="subst">$&#123;a&#125;</span> and <span class="subst">$&#123;b&#125;</span> is <span class="subst">$&#123;a + b&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h3 id="條件判斷-Conditional-Statements"><a href="#條件判斷-Conditional-Statements" class="headerlink" title="條件判斷 (Conditional Statements)"></a>條件判斷 (Conditional Statements)</h3><p>結合三元運算符或簡單的 if 判斷，可以在字串中靈活地處理條件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loggedIn = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> message = <span class="string">`You are <span class="subst">$&#123;loggedIn ? <span class="string">&quot;logged in&quot;</span> : <span class="string">&quot;not logged in&quot;</span>&#125;</span>.`</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br></pre></td></tr></table></figure><h3 id="標記模板字串-Tagged-Templates"><a href="#標記模板字串-Tagged-Templates" class="headerlink" title="標記模板字串 (Tagged Templates)"></a>標記模板字串 (Tagged Templates)</h3><p>標記模板允許你在插值之前處理字串，可以用於處理國際化、多語系或安全操作（如避免 XSS 攻擊）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sanitizeHTML</span>(<span class="params">literals, ...values</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  literals.<span class="title function_">forEach</span>(<span class="function">(<span class="params">literal, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> value = values[i] ? <span class="title class_">String</span>(values[i]).<span class="title function_">replace</span>(<span class="regexp">/&lt;/g</span>, <span class="string">&quot;&amp;lt;&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/&gt;/g</span>, <span class="string">&quot;&amp;gt;&quot;</span>) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    result += literal + value;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userInput = <span class="string">&quot;&lt;script&gt;alert(&#x27;Hacked!&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// call function use Tagged Template Literal</span></span><br><span class="line"><span class="keyword">const</span> safeOutput = sanitizeHTML<span class="string">`&lt;div&gt;<span class="subst">$&#123;userInput&#125;</span>&lt;/div&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(safeOutput);  <span class="comment">// &lt;div&gt;&amp;lt;script&amp;gt;alert(&#x27;Hacked!&#x27;)&amp;lt;/script&amp;gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="動態生成-HTML-或模版字串"><a href="#動態生成-HTML-或模版字串" class="headerlink" title="動態生成 HTML 或模版字串"></a>動態生成 HTML 或模版字串</h3><p>當需要動態生成 HTML 或動態內容時，使用 Template Literals 可以讓結構更清晰。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Cherry&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> html = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;list.map(item =&gt; <span class="string">`&lt;li&gt;<span class="subst">$&#123;item&#125;</span>&lt;/li&gt;`</span>).join(<span class="string">&#x27;&#x27;</span>)&#125;</span></span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(html);</span><br></pre></td></tr></table></figure><h2 id="進階應用-with-Type"><a href="#進階應用-with-Type" class="headerlink" title="進階應用 with Type"></a>進階應用 with Type</h2><h3 id="動態生成-URL-路徑"><a href="#動態生成-URL-路徑" class="headerlink" title="動態生成 URL 路徑"></a>動態生成 URL 路徑</h3><p>在構建 API 或動態路徑時，Template Literals 結合 TypeScript 類型檢查可以確保參數類型正確，避免拼接錯誤。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Endpoint</span> = <span class="string">&quot;/users&quot;</span> | <span class="string">&quot;/posts&quot;</span> | <span class="string">&quot;/comments&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createURL</span>(<span class="params">endpoint: Endpoint, id: <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`https://api.example.com<span class="subst">$&#123;endpoint&#125;</span>/<span class="subst">$&#123;id&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="title function_">createURL</span>(<span class="string">&quot;/users&quot;</span>, <span class="number">123</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url); <span class="comment">// https://api.example.com/users/123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 若傳入不存在的路徑，TypeScript 會報錯</span></span><br><span class="line"><span class="title function_">createURL</span>(<span class="string">&quot;/invalid&quot;</span>, <span class="number">123</span>); <span class="comment">// Error: Argument of type &#x27;&quot;invalid&quot;&#x27; is not assignable to parameter of type &#x27;Endpoint&#x27;.</span></span><br></pre></td></tr></table></figure><p>可以作開發中的路由檢查。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">HTTPMethod</span> = <span class="string">&quot;GET&quot;</span> | <span class="string">&quot;POST&quot;</span> | <span class="string">&quot;PUT&quot;</span> | <span class="string">&quot;DELETE&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Route</span> = <span class="string">`/api/<span class="subst">$&#123;<span class="built_in">string</span>&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">method: HTTPMethod, route: Route</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Sending <span class="subst">$&#123;method&#125;</span> request to <span class="subst">$&#123;route&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">request</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/api/users&quot;</span>);  <span class="comment">// 正確</span></span><br><span class="line"><span class="title function_">request</span>(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;/api/posts&quot;</span>); <span class="comment">// 正確</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 這會觸發類型檢查錯誤</span></span><br><span class="line"><span class="title function_">request</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/invalidRoute&quot;</span>); <span class="comment">// Error: Argument of type &#x27;&quot;/invalidRoute&quot;&#x27; is not assignable to parameter of type &#x27;Route&#x27;.</span></span><br></pre></td></tr></table></figure><p>相同的概念也可以來動態生成 SQL 查詢語句，同時確保參數的安全性與類型正確性。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TableName</span> = <span class="string">&quot;users&quot;</span> | <span class="string">&quot;posts&quot;</span> | <span class="string">&quot;comments&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">selectFromTable</span>(<span class="params">table: TableName, id: <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`SELECT * FROM <span class="subst">$&#123;table&#125;</span> WHERE id = <span class="subst">$&#123;id&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> query = <span class="title function_">selectFromTable</span>(<span class="string">&quot;users&quot;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(query); <span class="comment">// SELECT * FROM users WHERE id = 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 傳入錯誤的表名時，會被 TypeScript 類型檢查發現</span></span><br><span class="line"><span class="title function_">selectFromTable</span>(<span class="string">&quot;invalidTable&quot;</span>, <span class="number">1</span>); <span class="comment">// Error: Argument of type &#x27;&quot;invalidTable&quot;&#x27; is not assignable to parameter of type &#x27;TableName&#x27;.</span></span><br></pre></td></tr></table></figure><h3 id="字串聯合類型構造器"><a href="#字串聯合類型構造器" class="headerlink" title="字串聯合類型構造器"></a>字串聯合類型構造器</h3><p>一個常見的模式是將Template Literals 類型與聯合類型結合，這樣可以生成所有可能的組合。<br>例如，假設我們有一組顏色和相應的色調：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ColorShade</span> = <span class="number">100</span> | <span class="number">200</span> | <span class="number">300</span> | <span class="number">400</span> | <span class="number">500</span> | <span class="number">600</span> | <span class="number">700</span> | <span class="number">800</span> | <span class="number">900</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Color</span> = <span class="string">&quot;red&quot;</span> | <span class="string">&quot;blue&quot;</span> | <span class="string">&quot;green&quot;</span>;</span><br></pre></td></tr></table></figure><p>我們可以創建一個顏色調色板，代表所有可能的顏色和色調的組合：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ColorPalette</span> = <span class="string">`<span class="subst">$&#123;Color&#125;</span>-<span class="subst">$&#123;ColorShade&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">color</span>: <span class="title class_">ColorPalette</span> = <span class="string">&quot;red-500&quot;</span>; <span class="comment">// 正確</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">badColor</span>: <span class="title class_">ColorPalette</span> = <span class="string">&quot;red&quot;</span>; <span class="comment">// 錯誤</span></span><br></pre></td></tr></table></figure><p>這樣，我們就得到了 27 種可能的組合（3 種顏色乘以 9 種色調）。<br>又或者，在樣式生成工具或 CSS-in-JS 的場景中，Template Literals 可以結合類型系統來強化樣式生成工具的正確性。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">CSSUnit</span> = <span class="string">&quot;px&quot;</span> | <span class="string">&quot;em&quot;</span> | <span class="string">&quot;rem&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CSSProperty</span> = <span class="string">&quot;margin&quot;</span> | <span class="string">&quot;padding&quot;</span> | <span class="string">&quot;font-size&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">applyStyle</span>(<span class="params">property: CSSProperty, value: <span class="built_in">number</span>, unit: CSSUnit</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;property&#125;</span>: <span class="subst">$&#123;value&#125;</span><span class="subst">$&#123;unit&#125;</span>;`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">applyStyle</span>(<span class="string">&quot;margin&quot;</span>, <span class="number">10</span>, <span class="string">&quot;px&quot;</span>));  <span class="comment">// margin: 10px;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">applyStyle</span>(<span class="string">&quot;font-size&quot;</span>, <span class="number">1.5</span>, <span class="string">&quot;em&quot;</span>)); <span class="comment">// font-size: 1.5em;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 若單位或屬性錯誤，會觸發類型檢查錯誤</span></span><br><span class="line"><span class="title function_">applyStyle</span>(<span class="string">&quot;background&quot;</span>, <span class="number">10</span>, <span class="string">&quot;px&quot;</span>); <span class="comment">// Error: Argument of type &#x27;&quot;background&quot;&#x27; is not assignable to parameter of type &#x27;CSSProperty&#x27;.</span></span><br></pre></td></tr></table></figure><h3 id="另一個例子"><a href="#另一個例子" class="headerlink" title="另一個例子"></a>另一個例子</h3><p>在構建大型系統時，常常需要動態生成變量名稱或類型，<br>這時可以使用 Template Literal Types 來幫助構造更具彈性的類型系統。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Eventa</span> = <span class="string">&quot;click&quot;</span> | <span class="string">&quot;hover&quot;</span> | <span class="string">&quot;focus&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ElementID</span> = <span class="string">&quot;button&quot;</span> | <span class="string">&quot;input&quot;</span> | <span class="string">&quot;link&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 動態生成事件處理函數名稱 3x3 種型別檢查</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EventHandlerName</span>&lt;E <span class="keyword">extends</span> <span class="title class_">Eventa</span>, T <span class="keyword">extends</span> <span class="title class_">ElementID</span>&gt; = <span class="string">`<span class="subst">$&#123;T&#125;</span>On<span class="subst">$&#123;Capitalize&lt;E&gt;&#125;</span>Handler`</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">buttonOnClickHandler</span>: <span class="title class_">EventHandlerName</span>&lt;<span class="string">&quot;click&quot;</span>, <span class="string">&quot;button&quot;</span>&gt; = <span class="string">&quot;buttonOnClickHandler&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">buttonOnHoverHandler</span>: <span class="title class_">EventHandlerName</span>&lt;<span class="string">&quot;hover&quot;</span>, <span class="string">&quot;button&quot;</span>&gt; = <span class="string">&quot;buttonOnHoverHandler&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">buttonOnFocusHandler</span>: <span class="title class_">EventHandlerName</span>&lt;<span class="string">&quot;focus&quot;</span>, <span class="string">&quot;button&quot;</span>&gt; = <span class="string">&quot;buttonOnFocusHandler&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">inputOnClickHandler</span>: <span class="title class_">EventHandlerName</span>&lt;<span class="string">&quot;click&quot;</span>, <span class="string">&quot;input&quot;</span>&gt; = <span class="string">&quot;inputOnClickHandler&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">inputOnHoverHandler</span>: <span class="title class_">EventHandlerName</span>&lt;<span class="string">&quot;hover&quot;</span>, <span class="string">&quot;input&quot;</span>&gt; = <span class="string">&quot;inputOnHoverHandler&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">inputOnFocusHandler</span>: <span class="title class_">EventHandlerName</span>&lt;<span class="string">&quot;focus&quot;</span>, <span class="string">&quot;input&quot;</span>&gt; = <span class="string">&quot;inputOnFocusHandler&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">linkOnClickHandler</span>: <span class="title class_">EventHandlerName</span>&lt;<span class="string">&quot;click&quot;</span>, <span class="string">&quot;link&quot;</span>&gt; = <span class="string">&quot;linkOnClickHandler&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">linkOnHoverHandler</span>: <span class="title class_">EventHandlerName</span>&lt;<span class="string">&quot;hover&quot;</span>, <span class="string">&quot;link&quot;</span>&gt; = <span class="string">&quot;linkOnHoverHandler&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">linkOnFocusHandler</span>: <span class="title class_">EventHandlerName</span>&lt;<span class="string">&quot;focus&quot;</span>, <span class="string">&quot;link&quot;</span>&gt; = <span class="string">&quot;linkOnFocusHandler&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">invalidHandler</span>: <span class="title class_">EventHandlerName</span>&lt;<span class="string">&quot;click&quot;</span>, <span class="string">&quot;button&quot;</span>&gt; = <span class="string">&quot;buttonOnHoverHandler&quot;</span>; <span class="comment">// Error: Type &#x27;&quot;buttonOnHoverHandler&quot;&#x27; is not assignable to type &#x27;&quot;buttonOnClickHandler&quot;&#x27;.</span></span><br></pre></td></tr></table></figure><h3 id="參考網路上的例子"><a href="#參考網路上的例子" class="headerlink" title="參考網路上的例子"></a>參考網路上的例子</h3><p>Template Literals 類型允許我們在 TypeScript 中插入其他類型到字符串類型中。<br>例如，假設我們想要定義一個表示 PNG 文件的類型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Excel</span> = <span class="string">`<span class="subst">$&#123;<span class="built_in">string</span>&#125;</span>.xlsx`</span>;</span><br></pre></td></tr></table></figure><p>這樣，當我們為變量指定 Excel 類型時，它必須以 .xlsx 結尾：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">new_excel</span>: <span class="title class_">Excel</span> = <span class="string">&quot;my-image.xlsx&quot;</span>; <span class="comment">// ✅正確</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">old_excel</span>: <span class="title class_">Excel</span> = <span class="string">&quot;my-image.xls&quot;</span>; <span class="comment">// ❌錯誤</span></span><br></pre></td></tr></table></figure><p>當字符串不符合定義時，TypeScript 會顯示錯誤提示，這有助於減少潛在的錯誤。<br>我們可以確保字符串符合特定的前綴或中間包含特定子字符串。<br>例如，若要確保路由以 <code>/</code> 開頭，我們可以這樣定義：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Route</span> = <span class="string">`/<span class="subst">$&#123;<span class="built_in">string</span>&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">myRoute</span>: <span class="title class_">Route</span> = <span class="string">&quot;/home&quot;</span>; <span class="comment">// ✅正確</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">badRoute</span>: <span class="title class_">Route</span> = <span class="string">&quot;home&quot;</span>; <span class="comment">// ❌錯誤</span></span><br></pre></td></tr></table></figure><p>同樣的，如果我們需要確保字符串包含 ?，以便視為查詢字符串，我們可以這樣定義：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">QueryString</span> = <span class="string">`<span class="subst">$&#123;<span class="built_in">string</span>&#125;</span>?<span class="subst">$&#123;<span class="built_in">string</span>&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">myQueryString</span>: <span class="title class_">QueryString</span> = <span class="string">&quot;search?query=hello&quot;</span>; <span class="comment">// 正確</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">badQueryString</span>: <span class="title class_">QueryString</span> = <span class="string">&quot;search&quot;</span>; <span class="comment">// 錯誤</span></span><br></pre></td></tr></table></figure><p>此外，TypeScript 還提供了一些內建的實用類型來轉換字符串類型，例如 Uppercase 和 Lowercase，可以將字符串轉換為大寫或小寫：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UppercaseHello</span> = <span class="title class_">Uppercase</span>&lt;<span class="string">&quot;hello&quot;</span>&gt;; <span class="comment">// &quot;HELLO&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">LowercaseHELLO</span> = <span class="title class_">Lowercase</span>&lt;<span class="string">&quot;HELLO&quot;</span>&gt;; <span class="comment">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure><p>還有 Capitalize 和 Uncapitalize 這兩個實用類型，可以用來改變字符串的首字母大小寫：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">CapitalizeMatt</span> = <span class="title class_">Capitalize</span>&lt;<span class="string">&quot;matt&quot;</span>&gt;; <span class="comment">// &quot;Matt&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UncapitalizePHD</span> = <span class="title class_">Uncapitalize</span>&lt;<span class="string">&quot;PHD&quot;</span>&gt;; <span class="comment">// &quot;pHD&quot;</span></span><br></pre></td></tr></table></figure><p>這些功能展示了 TypeScript 類型系統的靈活性。</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>Template Literals 類型是一個非常有用的特性，能夠幫助開發者在 TypeScript 中更精確地控制字符串類型。<br>從定義特定格式的文件名到生成複雜的組合類型，它為代碼提供了更高的可讀性和安全性。<br>如果你在開發過程中需要處理字符串模式，Template Literals 類型無疑是值得考慮的工具。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">Template literals (Template strings)</a></li><li><a href="https://medium.com/onedegree-tech-blog/javascript-%E6%9C%89%E8%B6%A3%E7%9A%84%E5%86%B7%E7%9F%A5%E8%AD%98-tagged-template-literals-5ca9db71f066">JavaScript 有趣的冷知識：tagged template literals</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;什麼是 Template Literals 類型？&lt;br&gt;在 TypeScript 中，Template Literals 類型是 ES6 </summary>
      
    
    
    
    
    <category term="學習筆記" scheme="https://blog.marsen.me/tags/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [學習筆記] TypeScript 字串建議的小技巧</title>
    <link href="https://blog.marsen.me/2024/09/30/2024/typescript_string_intersection_trick/"/>
    <id>https://blog.marsen.me/2024/09/30/2024/typescript_string_intersection_trick/</id>
    <published>2024-09-30T06:00:14.000Z</published>
    <updated>2025-03-25T20:48:11.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>最近在寫一個 Hero component，需求是讓使用者能指定英雄的種族。<br>我們的設計有一些既定的種族，例如 human 和 demon，同時也希望讓使用者能輸入任何自定義的種族名稱。<br>最初的想法是用以下的定義：  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Race</span> = <span class="string">&#x27;human&#x27;</span> | <span class="string">&#x27;demon&#x27;</span> | <span class="built_in">string</span>;</span><br></pre></td></tr></table></figure><p>並在 Hero 的 props 中使用這個型別：  </p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">HeroProps</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">race</span>: <span class="title class_">Race</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// component 大概如下</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Hero</span> = (<span class="params">&#123; race,name &#125;: HeroProps</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hero: &#123;name&#125; is &#123;race&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>這樣一來，使用者可以像這樣使用：  </p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/HeroDisplay.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Hero</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../components/hero&#x27;</span>; <span class="comment">// 引入 Hero 型別</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">HeroDisplay</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Hero</span> <span class="attr">name</span>=<span class="string">&quot;alice&quot;</span> <span class="attr">race</span>=<span class="string">&quot;human&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Hero</span> <span class="attr">name</span>=<span class="string">&quot;mark&quot;</span> <span class="attr">race</span>=<span class="string">&quot;demon&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!--more heros --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">HeroDisplay</span>;</span><br></pre></td></tr></table></figure><p>一切看似沒問題，但問題是——在使用 Hero component 時，TypeScript 並不會自動給出 human 或 demon 這樣的建議。  </p><p><strong>既然我們希望能提供建議，該怎麼解決這個問題呢？</strong>  </p><h2 id="實作記錄"><a href="#實作記錄" class="headerlink" title="實作記錄"></a>實作記錄</h2><p>解決方法看起來有些奇怪，我們可以透過將字串類型與一個空的物件相交來達成目標：  </p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Race</span> = <span class="string">&#x27;human&#x27;</span> | <span class="string">&#x27;demon&#x27;</span> | (<span class="built_in">string</span> &amp; &#123;&#125;);</span><br></pre></td></tr></table></figure><p>這樣一來，在使用 Hero component 時，TypeScript 就會正確地給出 primary 和 secondary 的建議。<br>為什麼這會起作用？這其實是 TypeScript 編譯器的一個小「怪癖」。<br>當你把字串常值類型（例如 “human”）與字串類型（string）進行聯集時，<br>TypeScript 會急切地將其轉換為單純的 string，因此在 Hover 時會看到類似這樣的結果：  </p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Race</span> = <span class="string">&#x27;human&#x27;</span> | <span class="string">&#x27;demon&#x27;</span> | <span class="built_in">string</span> ;</span><br><span class="line"><span class="comment">// Hover 時會顯示： type Race = string</span></span><br></pre></td></tr></table></figure><p>換句話說，TypeScript 在使用前就忘記了 human 和 demon。<br>而透過與空物件 &amp; {} 進行相交，我們能「欺騙」 TypeScript，讓它在更長時間內保留這些字串常值類型。  </p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Race</span> = <span class="string">&#x27;human&#x27;</span> | <span class="string">&#x27;demon&#x27;</span> | (<span class="built_in">string</span> &amp; &#123;&#125;);</span><br><span class="line"><span class="comment">// Hover 時會顯示： type Race = &#x27;human&#x27; | &#x27;demon&#x27; | (string &amp; &#123;&#125;);</span></span><br></pre></td></tr></table></figure><p>這樣，我們在使用 Race 型別時，TypeScript 就能記得 human 和 demon，並給出對應的建議。</p><p>值得注意的是，<code>string &amp; &#123;&#125;</code> 實際上和單純的 string 是相同的類型，因此不會影響我們傳入的任何字串：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Hero</span> name=<span class="string">&quot;alice&quot;</span> race=<span class="string">&quot;human&quot;</span> /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Hero</span> <span class="attr">name</span>=<span class="string">&quot;mark&quot;</span> <span class="attr">race</span>=<span class="string">&quot;demon&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><p>這感覺像是在利用 TypeScript 的漏洞。<br>不過，TypeScript 團隊其實是知道這個「技巧」的，他們甚至針對這種情況進行測試。<br>或許將來，TypeScript 會原生支援這樣的功能，但在那之前，這仍是一個實用的小技巧。  </p><p><a href="https://gist.github.com/marsen/9b6f041177d736f36c42a372ff684f66">範例 Code</a></p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>總結來說，當你想允許使用者輸入任意字串但又想提供已知字串常值的自動補全建議時，可以考慮使用 <code>string &amp; &#123;&#125;</code> 這個技巧：  </p><p>它防止 TypeScript 過早將 <code>string | &#39;literal&#39;</code> 合併成單純的 string。<br>實際使用時行為與 string 一樣，但會多提供自動補全功能。<br>這或許不是最正式的解法，但目前仍是一個可以信賴的方式。<br>也許未來 TypeScript 能夠原生解決這個問題，但在那之前，這個小技巧可以為開發帶來便利。  </p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;最近在寫一個 Hero component，需求是讓使用者能指定英雄的種族。&lt;br&gt;我們的設計有一些既定的種族，例如 hum</summary>
      
    
    
    
    
    <category term="學習筆記" scheme="https://blog.marsen.me/tags/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [學習筆記] 淺談 TypeScript 方法簡寫與物件屬性語法的差異</title>
    <link href="https://blog.marsen.me/2024/09/26/2024/type_vs_object_method_syntax_typescript/"/>
    <id>https://blog.marsen.me/2024/09/26/2024/type_vs_object_method_syntax_typescript/</id>
    <published>2024-09-26T03:14:58.000Z</published>
    <updated>2025-03-25T20:48:11.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>在 TypeScript 中，我們常見到兩種方法的定義方式：<br><strong>方法簡寫語法(Method Shorthand Syntax) 和 物件屬性語法(Object property syntax)</strong>。<br>乍看之下，這兩種語法非常相似，但實際上，Method Shorthand Syntax 在類型檢查上的表現可能會導致潛在的運行時錯誤。<br>本篇將討論這個問題，並提供避免這類錯誤的最佳做法。</p><h2 id="本文"><a href="#本文" class="headerlink" title="本文"></a>本文</h2><p>在 TypeScript 中，我們可以用兩種不同的方式定義物件的方法：</p><p>Method Shorthand Syntax：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">makeSound</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Object property syntax：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">makeSound</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>兩者表面上似乎只是不同的語法選擇，但實際上，它們在類型檢查時有著不同的行為。<br>當我們使用 Method Shorthand Syntax 時，TypeScript 的類型檢查會出現雙變性（Bivariance），<br>這意味著參數的類型檢查會變得寬鬆，允許接受與定義不完全符合的類型。</p><p>問題例子<br>讓我們看一個新的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Character</span> &#123;</span><br><span class="line">  <span class="title function_">attack</span>(<span class="attr">character</span>: <span class="title class_">Character</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Monster</span> <span class="keyword">extends</span> <span class="title class_">Character</span> &#123;</span><br><span class="line">  <span class="attr">counterattack</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">hero</span>: <span class="title class_">Character</span> = &#123;</span><br><span class="line">    <span class="title function_">attack</span>(<span class="params">victim: Monster</span>) &#123;</span><br><span class="line">      <span class="comment">// victim do something</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">goblin</span>: <span class="title class_">Character</span> = &#123;</span><br><span class="line">    <span class="title function_">attack</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">hero.<span class="title function_">attack</span>(goblin); <span class="comment">// 編譯時無錯，運行時錯誤！</span></span><br></pre></td></tr></table></figure><p>在這個例子中，我們有一個 Character 介面和一個繼承它的 Monster 介面。<br>Monster 介面具有一個 counterattack 方法，這表示怪物應該能夠進行反擊。<br>接著，我們定義了一個 hero 物件，它可以攻擊任何 Monster 角色並呼叫它的 counterattack 方法。<br>然而，我們創建了一個 goblin 物件，這個物件實現了 Character 介面，但並不符合 Monster 介面的要求。<br>當我們試圖讓 hero 攻擊 goblin 時，雖然 TypeScript 在編譯時不會報錯，但在運行時會導致錯誤，因為 goblin 並沒有實作 counterattack 方法。<br>這是由於參數類型的雙變性（Bivariance）造成的問題，因為 hero.attack 方法的參數類型過於寬鬆，導致運行時出現預期外的行為。</p><p>解決方案<br>為了解決這個問題，應該使用物件屬性語法來定義方法，這樣 TypeScript 會進行更嚴格的類型檢查，並能在編譯時捕捉到類型不匹配的問題。</p><p>改寫後的範例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Character</span> &#123;</span><br><span class="line">  <span class="attr">attack</span>: <span class="function">(<span class="params">character: Character</span>) =&gt;</span> <span class="built_in">void</span>; <span class="comment">// 改用 Object property syntax</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 這裡會報錯，因為 attack 應該傳入的是 Character</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">hero</span>: <span class="title class_">Character</span> = &#123;</span><br><span class="line">    <span class="title function_">attack</span>(<span class="params">victim: Monster</span>) &#123;</span><br><span class="line">      <span class="comment">// victim do something</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在這個改寫後的範例中，TypeScript 會在編譯時警告我們 attack 方法的參數類型不匹配，從而避免了運行時錯誤。</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>TypeScript 的類型系統非常強大，但也有一些容易被忽略的陷阱。<br>雙變性可能看似便利，但它也可能導致運行(Runtime)時的錯誤。<br>為了減少這類錯誤的風險，我們應該使用物件屬性語法來定義方法，<br>可以讓 TypeScript 進行更加嚴格的類型檢查，從而在開發過程中及早發現問題。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.totaltypescript.com/method-shorthand-syntax-considered-harmful">Method Shorthand Syntax Considered Harmful</a></li><li><a href="https://webmix.cc/tutorials/typescript/%E9%80%B2%E9%9A%8E%E5%9E%8B%E5%88%A5">TypeScript Variance</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;在 TypeScript 中，我們常見到兩種方法的定義方式：&lt;br&gt;&lt;strong&gt;方法簡寫語法(Method Shorth</summary>
      
    
    
    
    
    <category term="學習筆記" scheme="https://blog.marsen.me/tags/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [學習筆記] 一些復盤的方法</title>
    <link href="https://blog.marsen.me/2024/09/17/2024/different_FUPAN_ways/"/>
    <id>https://blog.marsen.me/2024/09/17/2024/different_FUPAN_ways/</id>
    <published>2024-09-17T16:25:22.000Z</published>
    <updated>2025-03-25T20:48:11.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote><p>吾日三省吾身：為人謀而不忠乎？<br>與朋友交而不信乎？傳不習乎？<br>—論語‧學而</p></blockquote><p>在現代化的管理手段，反省、復盤是一個系統化系統中重要的一環，本文將記錄我所知道一些復盤方法。  </p><h2 id="為什麼要復盤？"><a href="#為什麼要復盤？" class="headerlink" title="為什麼要復盤？"></a>為什麼要復盤？</h2><p>復盤的核心目的是通過回顧和分析過去的行動，提升未來的表現。復盤的主要理由有三個：</p><ol><li>知其然與所以然<br>幫助了解實際情況及其背後的原因，不僅知道「發生了什麼」，還能明白「為什麼會發生」。  </li><li>從錯誤中學習，避免重蹈覆轍，進而提升表現。  </li><li>總結經驗，持續改善;系統化地總結經驗教訓，轉化為改善的具體步驟或方法論。</li></ol><h2 id="經典的復盤方法"><a href="#經典的復盤方法" class="headerlink" title="經典的復盤方法"></a>經典的復盤方法</h2><ol><li><p>PDCA 循環<br>PDCA 是一種持續改進的工具，適用於長期項目和計劃管理。其四個步驟為：  </p><ul><li>Plan（計劃）：設定目標和制定計劃。  </li><li>Do（執行）：實施計劃中的行動。  </li><li>Check（檢查）：檢查實施結果，與計劃進行對比。  </li><li>Act（行動）：根據檢查結果進行改進或調整，進入下一個循環。</li></ul><p>這種方法幫助我們在行動中不斷檢查和調整，達到持續改進的目的。  </p></li><li><p>SMART 目標<br> SMART 是一種設定明確目標的框架，使復盤更具體化。其五個原則為：  </p><ul><li>Specific（具體的）：目標應該明確，針對某一具體領域。  </li><li>Measurable（可衡量的）：確定可量化的指標。  </li><li>Achievable（可達成的）：設定合理且可實現的目標。  </li><li>Relevant（相關的）：確保目標與團隊或個人的發展方向一致。  </li><li>Time-bound（有時限的）：設定明確的時間範圍。</li></ul><p> SMART 方法幫助我們設立清晰且可衡量的目標，使復盤更具方向性和實效性。  </p></li><li><p>GARI 復盤法<br>GARI 是一種結構化的復盤方式，幫助我們從整體回顧、分析到總結經驗教訓。<br>其具體過程如下：</p><ul><li>Goal（回顧目標）：首先回顧當初設定的目標或期望，這有助於明確我們的初衷，為後續的結果分析奠定基礎。</li><li>Result（評估結果）：對比實際結果與當初目標，找出成功的亮點以及不足之處。</li><li>Analysis（分析原因）：深入分析事情成功或失敗的原因，這個過程需要考慮主觀和客觀的因素，例如個人行動、外部環境等。</li><li>Insight（總結規律）：最後，從分析中總結出可供未來參考的經驗和規律，找出更符合本質規律的方法。</li></ul><p>這是一個全面的工具，適合用來結構化地反思和提升，幫助我們在下一次行動中表現得更好</p></li><li><p>KISS 反思法<br>KISS 是一種簡潔有效的反思框架，著眼於具體行動的調整與改進。<br>它分為以下四個部分：</p><p>Keep（需要保持的）：回顧過程中哪些做法是有效的，應繼續保持並發揚光大。<br>Improve（需要改進的）：哪些環節還有提升的空間，並制定具體的改進計劃。<br>Stop（需要停止的）：有哪些不必要或無效的做法，應該果斷停止。<br>Start（需要開始的）：是否有新的嘗試或做法需要納入，以應對未來挑戰。</p><p>KISS 反思法簡明扼要，能夠快速聚焦在關鍵點上，幫助我們更具效率地進行行動調整。</p></li></ol><h2 id="分析法"><a href="#分析法" class="headerlink" title="分析法"></a>分析法</h2><ol><li><p>SWOT 分析<br>SWOT 分析是一種評估內外部環境的工具，幫助識別成功因素和改進空間。其四個要素為：  </p><ul><li>Strengths（優勢）：識別內部的優勢。  </li><li>Weaknesses（劣勢）：了解內部的劣勢。  </li><li>Opportunities（機會）：評估外部可能帶來的機會。  </li><li>Threats（威脅）：分析外部的潛在威脅。<br>這種方法可以幫助我們全面了解內外部環境，制定有效的策略。</li></ul></li><li><p>魚骨圖分析（Ishikawa Diagram）<br>魚骨圖用於分析問題的各種潛在原因，圖形像魚骨，因此得名。其步驟包括：<br>問題作為「魚頭」，根據不同類別（如人員、設備、流程等）畫出「魚刺」。<br>每條「魚刺」代表可能的原因，進行討論分析。<br>這種方法能夠系統化地分析問題的多種可能原因。  </p></li><li><p>德魯克的五個問題(Drucker’s five questions)<br>  這是一種基於商業戰略方法。其問題包括：</p><ul><li>我們的使命是什麼？What is your mission?  </li><li>我們的顧客是誰？Who is your customer?  </li><li>顧客真正重視的是什麼？What does your customer value?  </li><li>我們的成果是什麼？ What results do you seek?  </li><li>我們的計劃是什麼？ What is your plan?<br>有一種說法是上面五個問題可以被濃縮成<strong>我們怎樣满足顧客的需求？</strong></li></ul></li><li><p>5 Why 分析法<br>5 Why 分析法是一種深挖問題根源的方法，通過不斷追問「為什麼」來找到問題的核心原因。其步驟包括：<br>從問題開始，問「為什麼」。<br>每次回答後，再次問「為什麼」，重複五次或直到找到根本原因。<br>這種方法能夠幫助我們深入分析問題的根本原因，避免表面化的解決方案。</p></li></ol><h2 id="其他參考的方法"><a href="#其他參考的方法" class="headerlink" title="其他參考的方法"></a>其他參考的方法</h2><ul><li>AAR（After Action Review）</li><li>KPT（Keep, Problem, Try）</li><li>OKR（Objectives and Key Results）</li></ul><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>復盤能夠幫助我們從過去的行動中汲取智慧，避免重蹈覆轍，並促進持續進步。<br>「學而不思則罔，思而不學則殆」，復盤正是「思」與「學」的結合。<br>前面引言的白話文是：我每天都再三自我反省：替別人做事有沒有盡心竭力？<br>和朋友相處有沒有言而無信？學習到的道理，我有沒有好好認真實踐？  </p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;吾日三省吾身：為人謀而不忠乎？&lt;br&gt;與朋友交而不信乎？傳不習乎？&lt;br&gt;—論語‧學而&lt;/p&gt;
&lt;/blockqu</summary>
      
    
    
    
    
  </entry>
  
</feed>
