<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Marsen&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/c2458ad941ad5f8ca05b12c705fd4912</icon>
  <subtitle>waiting to load</subtitle>
  <link href="https://blog.marsen.me/atom.xml" rel="self"/>
  
  <link href="https://blog.marsen.me/"/>
  <updated>2023-12-16T14:52:33.547Z</updated>
  <id>https://blog.marsen.me/</id>
  
  <author>
    <name>Marsen L.</name>
    <email>admin@marsen.me</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title> [生活筆記] 修正 A 校的題目缺陷</title>
    <link href="https://blog.marsen.me/2023/12/15/2023/ac_defects_in_instructional_material/"/>
    <id>https://blog.marsen.me/2023/12/15/2023/ac_defects_in_instructional_material/</id>
    <published>2023-12-15T05:24:33.000Z</published>
    <updated>2023-12-16T14:52:33.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="導言"><a href="#導言" class="headerlink" title="導言"></a>導言</h2><p>在 A 校擔任雲端助教一陣子，主要有幾個原因，<br>我也是資策會出身，所以我對轉職的學生可以感同身受，<br>我在教學的過程中，自已也會成長，很多時候可以學習到新知也得到成就感，<br>最後就是可以獲得額外的收入。  </p><h2 id="問題發現"><a href="#問題發現" class="headerlink" title="問題發現"></a>問題發現</h2><p>這次是一個我有興趣的題目，簡單說 A 社利用 <a href="https://replit.com/">Replit</a> 網站提供作業，<br>由學生進行撰寫，很聰明的整合方式，而且幾乎零成本。<br>而且我覺得最棒的是，他可以寫測試腳本，透過測試腳本，就可以驗收大部份的作業，加速批改的時間。</p><p>但是，這次同學的作業在執行時期，發生了異常掉入了一個無限廻圈的狀態<br>問題不難，是一個邊際值的問題。 <strong>應該可以加上測試保護</strong>，這是我的第一個直覺。<br>我去檢查了 A 校提供的標準答案，不出意外的也有相同的問題。</p><p>另外一個問題是，<strong>寫邊際值的測試案例</strong>不是基本的嗎?<br>查看了測試案例，竟然還真的沒有寫</p><h2 id="問題排查"><a href="#問題排查" class="headerlink" title="問題排查"></a>問題排查</h2><p>我選擇下載了 Replit 到地端開發，<br>在開始前先簡單描述題目，在一個限範圍內進行猜數字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> answer = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span></span><br><span class="line"><span class="comment">// start coding</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> min = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> max = <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> guess = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getResult</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">while</span> (           ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (          ) &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (          ) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    guess = <span class="title class_">Math</span>.<span class="title function_">floor</span>((max + min) / <span class="number">2</span>)</span><br><span class="line">    count ++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(           )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下為測試檔，請勿更動</span></span><br><span class="line"><span class="title function_">getResult</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  guess,</span><br><span class="line">  answer,</span><br><span class="line">  count,</span><br><span class="line">  getResult</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這是很好的題目，可以同時使用到迴圈與判斷，也可以接觸 Math 模組。<br>我們來看一下測試案例，在 Replit 右下角的 Unit Test</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&quot;&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> spy = jest.<span class="title function_">spyOn</span>(<span class="variable language_">console</span>, <span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> &#123; </span><br><span class="line">    guess,</span><br><span class="line">    answer,</span><br><span class="line">    count,</span><br><span class="line">    getResult</span><br><span class="line">  &#125; = index;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getResult</span>()</span><br><span class="line">  <span class="keyword">if</span> (guess === answer) &#123;</span><br><span class="line">    <span class="title function_">expect</span>(count).<span class="title function_">toBeLessThanOrEqual</span>(<span class="number">10</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>測試很單純，<strong>當答案在 1~100 之間時，執行迴圈的次數不應該超過 10 次</strong>(其實 7 次內應該都猜得出來)<br>我們應該加上一些邊際測試。<br>例如 1 與 100 的案例，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&quot;Answer_is_1&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> spy = jest.<span class="title function_">spyOn</span>(<span class="variable language_">console</span>, <span class="string">&#x27;log&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> originalMathRandom = <span class="title class_">Math</span>.<span class="property">random</span>;</span><br><span class="line">  <span class="title class_">Math</span>.<span class="property">random</span> = jest.<span class="title function_">fn</span>()</span><br><span class="line">    .<span class="title function_">mockImplementationOnce</span>(<span class="function">() =&gt;</span> <span class="number">0.001</span>)</span><br><span class="line">    .<span class="title function_">mockImplementation</span>(<span class="function">() =&gt;</span> <span class="title function_">originalMathRandom</span>());</span><br><span class="line">  <span class="comment">//console.log(&#x27;now random is&#x27;, Math.random());</span></span><br><span class="line">  <span class="keyword">const</span> index = <span class="built_in">require</span>(<span class="string">&#x27;./index&#x27;</span>);</span><br><span class="line">  index.<span class="title function_">getResult</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Clean up</span></span><br><span class="line">  spy.<span class="title function_">mockRestore</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&quot;Answer_is_100&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> spy = jest.<span class="title function_">spyOn</span>(<span class="variable language_">console</span>, <span class="string">&#x27;log&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> originalMathRandom = <span class="title class_">Math</span>.<span class="property">random</span>;</span><br><span class="line">  <span class="title class_">Math</span>.<span class="property">random</span> = jest.<span class="title function_">fn</span>()</span><br><span class="line">    .<span class="title function_">mockImplementationOnce</span>(<span class="function">() =&gt;</span> <span class="number">0.999</span>)</span><br><span class="line">    .<span class="title function_">mockImplementation</span>(<span class="function">() =&gt;</span> <span class="title function_">originalMathRandom</span>());</span><br><span class="line">  <span class="comment">//console.log(&#x27;now random is&#x27;, Math.random());</span></span><br><span class="line">  <span class="keyword">const</span> index = <span class="built_in">require</span>(<span class="string">&#x27;./index&#x27;</span>);</span><br><span class="line">  index.<span class="title function_">getResult</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Clean up</span></span><br><span class="line">  spy.<span class="title function_">mockRestore</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>這裡注意到的是我們 mock 了<code>Math.random</code>，因為這才會影響我們的答案。</p><h3 id="問題後的問題"><a href="#問題後的問題" class="headerlink" title="問題後的問題"></a>問題後的問題</h3><p>當我們在測試案例為 100 時，會限入無窮迴圈，而 JavaScript 單緒的特性將無法離開這個測試，<br>雖然也不會報錯…但是測試將永遠跑不完。<br><strong>這驅使我再加上一個測試案例</strong>，當執行次數超過 10 次時拋出例外。<br>而學生使用的範本，我希望儘可能不去修改它，<br>這裡要對 jest 與 javascript 要有足夠的理解才可以寫的好，<br>所幸在這個時代，有 AI 與 google 的加持下，很快就解決了。</p><p>最後的測試程式如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Guessing Game&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> originalMathRandom;</span><br><span class="line">  <span class="keyword">let</span> spy;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Save the original functions</span></span><br><span class="line">    originalMathRandom = <span class="title class_">Math</span>.<span class="property">random</span>;</span><br><span class="line">    spy = jest.<span class="title function_">spyOn</span>(<span class="variable language_">console</span>, <span class="string">&#x27;log&#x27;</span>).<span class="title function_">mockImplementation</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Restore the original functions</span></span><br><span class="line">    <span class="title class_">Math</span>.<span class="property">random</span> = originalMathRandom;</span><br><span class="line">    spy.<span class="title function_">mockRestore</span>();</span><br><span class="line">    jest.<span class="title function_">resetModules</span>()</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&quot;Answer_is_1&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Math</span>.<span class="property">random</span> = jest.<span class="title function_">fn</span>().<span class="title function_">mockReturnValue</span>(<span class="number">0.001</span>);</span><br><span class="line">    <span class="keyword">const</span> index = <span class="built_in">require</span>(<span class="string">&#x27;./index&#x27;</span>);</span><br><span class="line">    index.<span class="title function_">getResult</span>();</span><br><span class="line">    <span class="title function_">expect</span>(index.<span class="property">answer</span>).<span class="title function_">toBe</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&quot;Answer_is_100&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Math</span>.<span class="property">random</span> = jest.<span class="title function_">fn</span>().<span class="title function_">mockReturnValue</span>(<span class="number">0.999</span>);</span><br><span class="line">    <span class="keyword">const</span> index = <span class="built_in">require</span>(<span class="string">&#x27;./index&#x27;</span>);</span><br><span class="line">    index.<span class="title function_">getResult</span>();</span><br><span class="line">    <span class="title function_">expect</span>(index.<span class="property">answer</span>).<span class="title function_">toBe</span>(<span class="number">100</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;guess under 10 times&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Math</span>.<span class="property">random</span> = jest.<span class="title function_">fn</span>().<span class="title function_">mockReturnValue</span>(<span class="number">0.5</span>);</span><br><span class="line">    <span class="keyword">const</span> index = <span class="built_in">require</span>(<span class="string">&#x27;./index&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++) &#123;</span><br><span class="line">      index.<span class="title function_">getResult</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">expect</span>(<span class="function">() =&gt;</span> index.<span class="title function_">getResult</span>()).<span class="property">not</span>.<span class="title function_">toThrow</span>();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should throw error if count is more than 10&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> originalMathFloor = <span class="title class_">Math</span>.<span class="property">floor</span>;</span><br><span class="line">    <span class="title class_">Math</span>.<span class="property">floor</span> = jest.<span class="title function_">spyOn</span>(<span class="variable language_">global</span>.<span class="property">Math</span>, <span class="string">&#x27;floor&#x27;</span>)</span><br><span class="line">      .<span class="title function_">mockImplementationOnce</span>(<span class="function">() =&gt;</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span>)</span><br><span class="line">      .<span class="title function_">mockImplementationOnce</span>(<span class="function">() =&gt;</span> <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">const</span> index = <span class="built_in">require</span>(<span class="string">&#x27;./index&#x27;</span>);</span><br><span class="line">    <span class="title function_">expect</span>(<span class="function">() =&gt;</span> index.<span class="title function_">getResult</span>()).<span class="title function_">toThrow</span>(<span class="string">&#x27;超過10次了，請重新開始&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add more tests as needed for the getResult function</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>給學生的出題程式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> answer = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// start coding</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> min = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> max = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> guess = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getResult</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Guess number is <span class="subst">$&#123;guess&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">while</span> (    ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (    ) &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;超過10次了，請重新開始&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`第<span class="subst">$&#123;count&#125;</span>回合，您猜<span class="subst">$&#123;guess&#125;</span>，猜對了`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下為測試檔，請勿更動</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  guess,</span><br><span class="line">  answer,</span><br><span class="line">  count,</span><br><span class="line">  getResult,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://replit.com/@Marsen/10-Ci-Nei-Cai-Dui-assignment-add-test-cases-and-model-answer">解答範本</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> answer = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// start coding</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> min = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> max = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> guess = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getResult</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Guess number is <span class="subst">$&#123;guess&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">while</span> (guess !== answer) &#123;</span><br><span class="line">    <span class="keyword">if</span> (answer &lt; guess) &#123;</span><br><span class="line">      max = guess; <span class="comment">//猜太大取代最大值</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`第<span class="subst">$&#123;count&#125;</span>回合，您猜<span class="subst">$&#123;guess&#125;</span>，太大了，請猜介於<span class="subst">$&#123;min&#125;</span>~<span class="subst">$&#123;max&#125;</span>之間的數字`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (answer &gt; guess) &#123;</span><br><span class="line">      min = guess; <span class="comment">//猜太小取代最小值</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`第<span class="subst">$&#123;count&#125;</span>回合，您猜<span class="subst">$&#123;guess&#125;</span>，太小了，請猜介於<span class="subst">$&#123;min&#125;</span>~<span class="subst">$&#123;max&#125;</span>之間的數字`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    guess = (max === min + <span class="number">1</span>) ? max : <span class="title class_">Math</span>.<span class="title function_">floor</span>((max + min) / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;超過10次了，請重新開始&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`第<span class="subst">$&#123;count&#125;</span>回合，您猜<span class="subst">$&#123;guess&#125;</span>，猜對了`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下為測試檔，請勿更動</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  guess,</span><br><span class="line">  answer,</span><br><span class="line">  count,</span><br><span class="line">  getResult,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>整個課程的調整與測試改寫，大概花了我 4~12 小時處理。<br>在改制後，互動環節變少了，計時制改為定時制的給薪，也讓無法花太多的時間幫學生排查問題。<br>這題目我有興趣就順手解決了。<br>可惜的是，我拿不到任何費用。</p><p>也再一次印証 AI 的強大，未來的人材需要有更高的整合能力，<br>寫測試寫程式，讀技術文章賺取資訊落的錢應該會越來越難賺。<br>但是能高度整合的人應該會更為搶手。</p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;導言&quot;&gt;&lt;a href=&quot;#導言&quot; class=&quot;headerlink&quot; title=&quot;導言&quot;&gt;&lt;/a&gt;導言&lt;/h2&gt;&lt;p&gt;在 A 校擔任雲端助教一陣子，主要有幾個原因，&lt;br&gt;我也是資策會出身，所以我對轉職的學生可以感同身受，&lt;br&gt;我在教學的過程中，自已也會成</summary>
      
    
    
    
    
    <category term="生活筆記" scheme="https://blog.marsen.me/tags/%E7%94%9F%E6%B4%BB%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] GCP Armor 設定</title>
    <link href="https://blog.marsen.me/2023/12/14/2023/gcp_armor_setting/"/>
    <id>https://blog.marsen.me/2023/12/14/2023/gcp_armor_setting/</id>
    <published>2023-12-14T11:40:23.000Z</published>
    <updated>2023-12-16T14:52:33.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>在加入負載平衡（load balancer）後，我們發現防火牆的某些規則失效了，<br>尤其是那些僅允許公司內網存取站台的規則。<br>這是相當重要的規則，因為我們的部分開發資訊與半成品儲存在這些機器上。  </p><p>之所以建立了負載平衡(load balancer)，有兩個原因<br>首先，我需要作後端 API 的版本切換，而因為使用的程式語言不同並部署在不同主機，<br>而 load balancer 透過路由規則將流量導向不同的機器群的機制非常適合。<br>第二，我們的正式環境一直有 load balancer，而測試環境沒有，趁這個機會將沙盒&#x2F;測試環境的配置調整成一致。  </p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>本來有設定某些防火牆的規則，在掛載 load balancer 後就失效了。<br>原因是規則會識別流量的 IP，而掛載後，所有的流量對於機器來說，所有流量都來自 load balancer 的 IP 了。<br>這樣的規則形同虛設，這個時候 Google Armor 就是一個不錯的替代方案</p><h2 id="Google-Armor-Tips"><a href="#Google-Armor-Tips" class="headerlink" title="Google Armor Tips"></a>Google Armor Tips</h2><p>設定上十分簡單，在 Cloud Armor 頁面上選擇 policies，<br>我的情況是在建立 load balancer 後，就已經自動建立，<br>所以就直接修改。</p><p>參考規則如下</p><table><thead><tr><th>Action</th><th>Type</th><th>IP Addresses&#x2F;Ranges</th><th>Priority</th></tr></thead><tbody><tr><td>Allow</td><td>IP addresses&#x2F;ranges</td><td>5*.1**.***.205&#x2F;32</td><td>999</td></tr><tr><td></td><td></td><td>10.140.0.0&#x2F;20</td><td></td></tr><tr><td>Deny</td><td>IP addresses&#x2F;ranges</td><td>0.0.0.0&#x2F;0</td><td>1,000</td></tr><tr><td></td><td></td><td>(block all)</td><td></td></tr></tbody></table><p>一個是對指定來源 IP 與內網允許流量進來，一個是拒絕所有流量，這裡的設定與防火牆蠻像的。<br>接下來是目標的部份，要設定你的機器群，設定好套用，大約 10 分鐘內就會生效(實測不到3分鐘就生效了)</p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>Google Armor的主要優勢之一是其簡單易用的設定。<br>在Cloud Armor頁面上，我們可以輕鬆地設定我們的安全策略，包括允許特定IP範圍的流量進入，同時拒絕不受歡迎的流量。<br>這些設定反映在我們的參考規則中，確保了對特定IP和內部網路的控制，同時阻止不受歡迎的流量。  </p><p>特別是對於我們使用負載平衡器進行後端API版本切換和環境配置調整的需求，Google Armor提供了一個理想的解決方案。<br>其能夠在不同機器群之間巧妙地分發流量，確保我們的應用程式在不同版本之間平穩運作，同時維持良好的安全性。  </p><p>這樣的調整不僅解決了我們遇到的具體問題，也提升了整體系統的安全性和可靠性。  </p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;在加入負載平衡（load balancer）後，我們發現防火牆的某些規則失效了，&lt;br&gt;尤其是那些僅允許公司內網存取站台的規</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] Hexo 7 升級的錯誤處理心得</title>
    <link href="https://blog.marsen.me/2023/11/19/2023/hexo_7_update_logs/"/>
    <id>https://blog.marsen.me/2023/11/19/2023/hexo_7_update_logs/</id>
    <published>2023-11-19T17:31:32.000Z</published>
    <updated>2023-12-16T14:52:33.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>最近在對Hexo進行升級至7.0版本的過程中，遇到了一些錯誤與問題。<br>這篇部落格將記錄下這次升級的過程中所遇到的問題以及解決方法，希望對有需要的讀者有所幫助。</p><h2 id="錯誤記錄"><a href="#錯誤記錄" class="headerlink" title="錯誤記錄"></a>錯誤記錄</h2><h3 id="Hexo-Action-錯誤"><a href="#Hexo-Action-錯誤" class="headerlink" title="Hexo Action 錯誤"></a>Hexo Action 錯誤</h3><p>升級後，遇到了Hexo Action報錯的問題，錯誤訊息如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">node:internal/modules/cjs/loader:1051</span><br><span class="line">  throw err;</span><br><span class="line">  ^</span><br><span class="line"></span><br><span class="line">Error: Cannot find module &#x27;hexo-util/lib/spawn&#x27;</span><br><span class="line">Require stack:</span><br></pre></td></tr></table></figure><p>解決方式是查找相應的模組，更新配置文件，在本案中，hexo-util&#x2F;lib&#x2F;spawn 路徑不存在，應該改為 hexo-util&#x2F;dist&#x2F;spawn。</p><h3 id="地端執行-Hexo-d-時-Permission-Denied"><a href="#地端執行-Hexo-d-時-Permission-Denied" class="headerlink" title="地端執行 Hexo d 時 Permission Denied"></a>地端執行 Hexo d 時 Permission Denied</h3><p>在地端執行Hexo d時，遇到了權限問題，無法提交到GitHub的問題。<br>暫時解決方式是將repository的協議由ssh改為https，暫時繞過了問題。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/marsen/marsen.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>後來因 https 需要提供帳號密碼，而這些資訊不適合簽入版本控制，故改回了 ssh，<br>為了解決相應的 SSH 連線問題，需配置 SSH 連線 .ssh&#x2F;config<br>參考：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  HostName github.com</span><br><span class="line">  User git</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h3 id="YouTube-Tag-無法處理"><a href="#YouTube-Tag-無法處理" class="headerlink" title="YouTube Tag 無法處理"></a>YouTube Tag 無法處理</h3><p>升級至Hexo 7.0後，發現內建的YouTube標籤無法使用，原因是Hexo 7.0中刪除了這些內建的標籤。<br>解決方式是引入安裝 hexo-tag-embed package。  </p><h3 id="Hexo-部署錯誤快取"><a href="#Hexo-部署錯誤快取" class="headerlink" title="Hexo 部署錯誤快取"></a>Hexo 部署錯誤快取</h3><p>在部署過程中，遇到了Hexo的快取問題，導致地端和CI都出現異常。<br>解決方式是清除 Hexo 的快取 <code>hexo clean</code>，完整 SOP 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf .deploy_git</span><br><span class="line">hexo clean </span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="使用-Docker-偵錯"><a href="#使用-Docker-偵錯" class="headerlink" title="使用 Docker 偵錯"></a>使用 Docker 偵錯</h3><p><a href="https://github.com/marsen/hexo-action">Hexo Action</a>本身是以容器去運行的，可以在本地端執行測試，不需推版<br>使用 Docker 進行 Hexo Action 時，進行偵錯的方法：</p><p>建置與執行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t hexo-action .</span><br><span class="line">docker run -d hexo-action</span><br></pre></td></tr></table></figure><p>觀察 logs 與 files 去偵錯，Docker Desktop 是很好的工具。</p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>這次Hexo 7.0的升級過程中，遇到了不少問題，但通過查找相應的解決方案，一一解決了這些問題。<br>在升級過程中，需要留意Hexo的官方文檔以及相關插件的更新，以確保能夠順利完成升級。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://rs11.xyz/articles/2.html">https://rs11.xyz/articles/2.html</a></li><li><a href="https://hexo.io/docs/tag-plugins.html#google_vignette">https://hexo.io/docs/tag-plugins.html#google_vignette</a></li><li><a href="https://github.com/hexojs/hexo-tag-embed">https://github.com/hexojs/hexo-tag-embed</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;最近在對Hexo進行升級至7.0版本的過程中，遇到了一些錯誤與問題。&lt;br&gt;這篇部落格將記錄下這次升級的過程中所遇到的問題以</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title> [實作筆記] Gitlab CI/CD 與 GCP - 錯誤處理</title>
    <link href="https://blog.marsen.me/2023/11/16/2023/gitlab_ci_error_handle/"/>
    <id>https://blog.marsen.me/2023/11/16/2023/gitlab_ci_error_handle/</id>
    <published>2023-11-16T08:32:09.000Z</published>
    <updated>2023-12-16T14:52:33.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>在持續整合&#x2F;持續交付 (CI&#x2F;CD) 的過程中，我們常常會遇到一個問題：<br>當發生錯誤時，系統並不總是會拋出 exit 1 的錯誤碼。<br>這種情況下，即使發生錯誤，CI&#x2F;CD 仍然會繼續執行，這可能導致部署了錯誤的版本上線，增加系統的不穩定性。</p><h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>為了解決這個問題，我們可以採取一些措施，確保在發生錯誤時 CI&#x2F;CD 立即停止，並拋出 exit 1 錯誤碼。</p><h3 id="1-記錄錯誤信息到-output-log"><a href="#1-記錄錯誤信息到-output-log" class="headerlink" title="1. 記錄錯誤信息到 output.log"></a>1. 記錄錯誤信息到 output.log</h3><p>  首先，我們可以將所有的執行日誌輸出到一個文件，例如 output.log。這樣一來，<br>  不管是哪個階段出現了問題，我們都能夠查閱這個文件，以便更好地理解錯誤的發生原因。  </p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Copy code</span><br><span class="line"><span class="comment"># 在腳本中添加以下命令，將所有輸出寫入 output.log 文件</span></span><br><span class="line">./your_script.sh &gt; output.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h3 id="2-使用-grep-檢查錯誤"><a href="#2-使用-grep-檢查錯誤" class="headerlink" title="2. 使用 grep 檢查錯誤"></a>2. 使用 grep 檢查錯誤</h3><p>  其次，我們可以使用 grep 命令來檢查 output.log 文件，查找關鍵字或錯誤模式。<br>  如果發現了任何錯誤，我們可以採取相應的措施。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Copy code</span><br><span class="line"><span class="comment"># 使用 grep 查找關鍵字，並在發現錯誤時執行相應的操作</span></span><br><span class="line"><span class="keyword">if</span> grep -q <span class="string">&quot;error&quot;</span> output.log; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Error found in output.log&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="3-發現錯誤時丟出-exit-1"><a href="#3-發現錯誤時丟出-exit-1" class="headerlink" title="3. 發現錯誤時丟出 exit 1"></a>3. 發現錯誤時丟出 exit 1</h3><p>  最後，在檢查完錯誤後，如果發現了問題，我們應該明確地拋出 exit 1，這會通知 CI&#x2F;CD 停止進一步的運行，<br>  確保不會將有問題的版本部署上線。  </p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Copy code</span><br><span class="line"><span class="comment"># 在發現錯誤時，明確地拋出 exit 1</span></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Error occurred. Exiting with code 1.&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>透過這些步驟，我們可以更好地管理 CI&#x2F;CD 中的錯誤，確保系統的穩定性和可靠性。<br>同時，我們能夠更快速地響應和解決問題，減少部署錯誤版本的風險。  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">generate-qa:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">generate-qa</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">generate:qa</span> <span class="string">|</span> <span class="string">tee</span> <span class="string">output.log</span>  <span class="comment"># 可能出錯的命令，將輸出寫到文件</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">grep</span> <span class="string">-q</span> <span class="string">&quot;Error.*\[500\]&quot;</span> <span class="string">output.log</span> <span class="string">&amp;&amp;</span> <span class="string">echo</span> <span class="string">-e</span> <span class="string">&quot;\e[31m生成異常！ Prerendering 發生 500 Error\e[0m&quot;</span> <span class="string">&amp;&amp;</span> <span class="string">exit</span> <span class="number">1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;generated successfully&quot;</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./.output/public</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">&#x27;$CI_COMMIT_BRANCH == &quot;qa&quot;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>這些方法不僅有助於提高系統的穩定性和可靠性，還能夠加速問題的識別和解決過程，減少了部署錯誤版本的風險。<br>透過這些實踐，我們可以更加信心滿滿地運用 Gitlab CI&#x2F;CD 與 GCP，確保順暢的開發和部署流程。  </p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://blog.marsen.me/2023/04/13/2023/gitlab_ci_and_gcp_vm/">架構全貌</a></li><li><a href="https://blog.marsen.me/2023/04/14/2023/gitlab_ci_and_gcp_vm_create_server/">建立 Web Server VM</a></li><li><a href="https://blog.marsen.me/2023/04/14/2023/gitlab_ci_and_gcp_vm_cretae_runner/">建立 Gitlab Runner VM</a></li><li><a href="https://blog.marsen.me/2023/04/14/2023/gitlab_ci_and_gcp_vm_firewall/">Firewall</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;在持續整合&amp;#x2F;持續交付 (CI&amp;#x2F;CD) 的過程中，我們常常會遇到一個問題：&lt;br&gt;當發生錯誤時，系統並不總</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
    <category term="CI/CD" scheme="https://blog.marsen.me/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title> [工作筆記] 退出 Azure DevOps 的組織</title>
    <link href="https://blog.marsen.me/2023/11/05/2023/azure_devops_leave_organization/"/>
    <id>https://blog.marsen.me/2023/11/05/2023/azure_devops_leave_organization/</id>
    <published>2023-11-05T11:27:29.000Z</published>
    <updated>2023-12-16T14:52:33.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>Azure DevOps 是一個由微軟開發的服務，提供開發團隊協作和快速交付軟體的解決方案。<br>它包含了版控、工作追蹤、持續整合&#x2F;持續部署 (CI&#x2F;CD) 等功能。<br>其中，我將重點使用其 Board 功能來進行工作項目的管理和追蹤。<br>然而，有一天我發現自己被不知名的人邀請進了一個 Azure DevOps 的 Organizations，<br>所以我開始尋找如何自行退出的方法。</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>首先進入 dev.azure.com，點擊 user setting icon (這在畫面的右上角，是一個人的右下角有齒輪的圖案)。<br>點擊 Profile 進到以下頁面，可以看到提示如下:  </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">You are currently subscribed to other communication regarding Visual Studio and/or Visual Studio Subscriptions.   </span><br><span class="line">Please visit the complete Azure DevOps Profile Page to change those settings.</span><br></pre></td></tr></table></figure><p>點擊連結到 <a href="https://aex.dev.azure.com/me">Azure DevOps Profile Page</a>  </p><p>這裡就可以看到你的 Organization 並選擇離開</p><h2 id="誤區"><a href="#誤區" class="headerlink" title="誤區"></a>誤區</h2><p>在 <a href="https://myaccount.microsoft.com/organizations">my account</a> 也有 Organization 但是不可以隨意離開。<br>簡單來說，在微軟的 my account 中，<code>Organizations</code> 代表的是你所屬於的 Azure Active Directory (Azure AD) 組織。<br>這些組織可能是你的工作場所、學校或其他團體，他們使用 Azure AD 來管理員工或成員的身份和訪問權限。<br>這裡的組織並不等同於 Azure DevOps 中的 Organizations，並且不能隨意離開。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://learn.microsoft.com/en-us/entra/external-id/leave-the-organization">https://learn.microsoft.com/en-us/entra/external-id/leave-the-organization</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;Azure DevOps 是一個由微軟開發的服務，提供開發團隊協作和快速交付軟體的解決方案。&lt;br&gt;它包含了版控、工作追蹤、</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>[踩雷筆記] 解決 GitHub 帳戶在 VS Code 中的管理問題</title>
    <link href="https://blog.marsen.me/2023/10/27/2023/github_account_management_in_vs_code/"/>
    <id>https://blog.marsen.me/2023/10/27/2023/github_account_management_in_vs_code/</id>
    <published>2023-10-27T11:08:57.000Z</published>
    <updated>2023-12-16T14:52:33.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>當我使用 VS Code 時，我需要同時存取多個 GitHub 帳戶，<br>自已的 Github - 主要存取 VS Code 一些地端的設定值<br>公司的 Github - 有免費的 Copilot 這很好用。<br>兩個都我需要，我要作出大人的選擇。</p><h2 id="實務上的困境"><a href="#實務上的困境" class="headerlink" title="實務上的困境"></a>實務上的困境</h2><p>我可以同時登入兩組帳戶，但是無法達到我要的需求</p><h3 id="登入兩組帳戶的方法"><a href="#登入兩組帳戶的方法" class="headerlink" title="登入兩組帳戶的方法"></a>登入兩組帳戶的方法</h3><ol><li>確保安裝了 Github Copilot 與 Github Pull Request and Issues 套件  </li><li>如果有其它 Github 帳號已經在登入狀態的，都先登出，並重啟 VS Code  </li><li>準備好兩個瀏覽器，分別登入公司與自已的 Github Account  </li><li>點擊在左下的頭像 Icon (沒有頭像 Icon 的話在左側欄任一處點右鍵，將<code>帳戶</code>打勾)  </li><li>選擇”使用 Github 登入，以使用 Github Copilot”  </li><li>選擇登入公司帳戶的瀏覽器，此時會提示要開啟 VS Code，選擇開啟  </li><li>回到 VS Code，重複第 4 步  </li><li>選擇”使用 Github 登入，以使用 Github 提取要求和問題”  </li><li>選擇登入自已帳戶的瀏覽器，此時會提示要開啟 VS Code，選擇開啟</li></ol><p>如果你的預設瀏覽器是登入公司 Github 的帳號，就複製網址，貼到登入自已的 Github 帳號瀏覽器，反之亦然。<br>但是這個作法，實際上沒有什麼幫助，<em>備份與同步設定與 Copilot 會共用同一組帳號</em>。<br>我並不需要 Github Pull Request and Issues 相關功能。  </p><h3 id="手動組態同步"><a href="#手動組態同步" class="headerlink" title="手動組態同步"></a>手動組態同步</h3><p>早期 VSCode 有人寫了組態同步的擴充套件，但是目前內建在 VSCode 內部後不再維護了。<br>但是我需要的就是自已長期以來的使用的設定，所以可以先登入自已的帳號。<br>再登出後，登入公司帳號。缺點是需要手動處理。</p><h3 id="安裝第二個-VSCode"><a href="#安裝第二個-VSCode" class="headerlink" title="安裝第二個 VSCode"></a>安裝第二個 VSCode</h3><p>這個方法也有很多不同的實作方式。<br>簡單說一個官方直接支援的方式。 VS Code Insider<br>這算是一個搶先試用版的 VSCode，也有其對應的風險。<br>但是你就可以在系統上安裝兩個 VSCode，並登入不同的帳戶。  </p><h3 id="花錢為自已的帳戶買-Copilot"><a href="#花錢為自已的帳戶買-Copilot" class="headerlink" title="花錢為自已的帳戶買 Copilot"></a>花錢為自已的帳戶買 Copilot</h3><p>這或許才是最大人的解法。<br>我們要的是”同步組態設定”與”Copilot”使用權。<br>根帳號本身其實沒有什麼關係。<br>資本主義大好，但就失去了一些童趣了。  </p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p>-<a href="https://tutorials.tinkink.net/zh-hant/vscode/copilot-usage-and-shortcut.html">https://tutorials.tinkink.net/zh-hant/vscode/copilot-usage-and-shortcut.html</a><br>-<a href="https://code.visualstudio.com/docs/?dv=osx&amp;build=insiders">https://code.visualstudio.com/docs/?dv=osx&amp;build=insiders</a></p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;當我使用 VS Code 時，我需要同時存取多個 GitHub 帳戶，&lt;br&gt;自已的 Github - 主要存取 VS Co</summary>
      
    
    
    
    
    <category term="踩雷筆記" scheme="https://blog.marsen.me/tags/%E8%B8%A9%E9%9B%B7%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [工作筆記] 問題，不重要不緊急，就永遠不作了嗎? </title>
    <link href="https://blog.marsen.me/2023/10/04/2023/minor_task_priority/"/>
    <id>https://blog.marsen.me/2023/10/04/2023/minor_task_priority/</id>
    <published>2023-10-04T16:05:55.000Z</published>
    <updated>2023-12-16T14:52:33.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>最近我在公司引導大家一些敏捷方法的實作，<br>在這過程中討論了 PBI 排序的原則，價值和風險。<br>那麼問題來了，這樣有一些事情很小，但價值也不高，又沒有什麼風險，那不就永遠作不到了嗎??  </p><h2 id="回答的心路歷程"><a href="#回答的心路歷程" class="headerlink" title="回答的心路歷程"></a>回答的心路歷程</h2><p>這是一個很好的提問，我反思一下常見的四象限模型，即「重要緊急矩陣」中，<br>我可以把重要對應到價值，緊急對應到風險，然後 A、B、C、D 四象限，<br>我們知道要先作 A、B 這樣我們 C、D 的事永遠都不作了嗎 ?</p><p>我分享一個故事如下：</p><p>有一位教授，他拿著大石頭、小石子、沙子和一個玻璃罐，<br>先放入大石頭，問學生滿了沒? 再來是小石子，再問學生滿了沒?<br>最後再倒入沙子，問學生滿了沒? 結果還是沒滿，還可以再放入水</p><p>你學到了什麼?<br>—常見的說法是要先處理重要的事情，順序很關鍵。</p><p>我們可以有一些反思，首先當然是重要的事先作(大石頭先放)，<br>再來，你總是還有辦法找到一些空隙。<br>—時間就像乳溝一樣擠一擠就有了。</p><p>這是我當時的回答，<br>—如果你能守住重要的事，剩下的小事，你是有辦法找到空隙塞進去的。</p><h2 id="回答後的反思"><a href="#回答後的反思" class="headerlink" title="回答後的反思"></a>回答後的反思</h2><p>我要怎麼知道可不可以塞進去??<br>這就是透明度的重要性，在 Scrum 或看板方法都有提出。<br>而我們可以在 Scrum 的每日例會使用看板方法(現行主流的作法)，<br>加上每次迭代所行成的 TimeBox，正好可以對應這個故事中玻璃罐。<br>有趣的是，我沒想過<strong>如果玻璃罐不是透明的話</strong>，教授的問題還有意義嗎 ?<br>正是透過每日例會與看板方法，讓我們可以透明的掌握進度(瓶子剩多少空間&#x2F;你剩多少時間)，<br>所以<strong>你可以判斷是不是可以再塞下石頭或沙、水。</strong>  </p><p>TimeBox</p><blockquote><p>它是一種任務和時間管理的方法，將任務分成小塊，每塊都有一個簡短而固定的時間，以確保高優先級的任務能按時完成。</p></blockquote><p>看板方法</p><blockquote><p>它包括將工作可視化、限制同時進行的工作(WIP)、管理流程、明確陳述流程政策、實施回饋循環以及以協作方式改善。<br>這些原則和工具都教導我們要優先處理最重要的事情，這是成功的關鍵。  </p></blockquote><p>看板方法我還會聯想到限制理論(Toc)，但就不過度展開了。</p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h2&gt;&lt;p&gt;最近我在公司引導大家一些敏捷方法的實作，&lt;br&gt;在這過程中討論了 PBI 排序的原則，價值和風險。&lt;br&gt;那麼問題來了，這樣有一些事情很小，</summary>
      
    
    
    
    
    <category term="Scrum" scheme="https://blog.marsen.me/tags/Scrum/"/>
    
  </entry>
  
  <entry>
    <title> [生活筆記] 潛水日誌</title>
    <link href="https://blog.marsen.me/2023/09/23/2023/diving_logs/"/>
    <id>https://blog.marsen.me/2023/09/23/2023/diving_logs/</id>
    <published>2023-09-23T13:38:42.000Z</published>
    <updated>2023-12-16T14:52:33.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="20230916"><a href="#20230916" class="headerlink" title="20230916"></a>20230916</h2><h3 id="一潛（導潛）"><a href="#一潛（導潛）" class="headerlink" title="一潛（導潛）"></a>一潛（導潛）</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">地區: 東北角美灩山</span><br><span class="line">入水時間: 14:08 |潛水時間:41 |出水時間: 14:49</span><br><span class="line">能見度: 10m |平均水深: 4.8m |最大深度: 10.5m |水溫: 26.4</span><br><span class="line">起始壓力: 200 |結束壓力: 70  |SCR: 3.17 Bar/min</span><br><span class="line">天氣: 晴 |浪況: 無浪 |目的: 訓練 |方式: 岸潛</span><br></pre></td></tr></table></figure><p>時隔半年再次下水<br>第一潜稍嫌緊張<br>首次體驗美灩山<br>無浪無流，嘗試三角、四角導潜<br>浮力控制不當，未注意深度<br>未能找到原位</p><h3 id="二潛（放呆）"><a href="#二潛（放呆）" class="headerlink" title="二潛（放呆）"></a>二潛（放呆）</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">地區: 東北角美灩山</span><br><span class="line">入水時間: 16:11 |潛水時間: 57 |出水時間: 17:08</span><br><span class="line">能見度:8m |平均水深:5.1m |最大深度:11.5m |水溫: 26.8</span><br><span class="line">起始壓力:200 |結束壓力:100 |SCR: 1.75 Bar/min</span><br><span class="line">天氣: 晴 |浪況: 無浪 |目的: 訓練 |方式: 岸潛</span><br></pre></td></tr></table></figure><p>第二潛是與小夥伴伴潛屬於放呆行程，比較沒有那麼緊張，<br>算是複習了一下背滾式與跨步式入水，<br>不過小夥伴的問題有點多，一個是有人被海膽刺到膝蓋，<br>另兩個小夥伴二級頭跟 BCD 卡住而不自覺，直到教練去救援，<br>回程有看到黑色相間類似蛇的生物</p><h3 id="三潛（導潛）"><a href="#三潛（導潛）" class="headerlink" title="三潛（導潛）"></a>三潛（導潛）</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">地區: 東北角美灩山</span><br><span class="line">入水時間: 17:30 |潛水時間:38 |出水時間: 18:08</span><br><span class="line">能見度: 5m |平均水深: 7.1m |最大深度:11.8m |水溫: 26.5</span><br><span class="line">起始壓力:200 |結束壓力:100 |SCR: 2.63 Bar/min</span><br><span class="line">天氣: 晴 |浪況: 無浪 |目的: 訓練 |方式: 岸潛</span><br></pre></td></tr></table></figure><p>這次練習導潛主要是跟著教練，並繪製海圖，<br>方向感本來就不好的我，加上水深這個緯度，<br>其實是個蠻大挑戰，我只知道大概的路徑是一個狹長的 U Turn，<br>試著認地形，入水後右側是壁，左側是斜坡，前進20米左右會出現沙地，<br>這裡教練會稍作轉向，然後出現一個更深的地方，大約有到 11 米<br>之後我就有些迷航了，可能是在附近作了一個四角或三角的繞圈<br>海圖繪製比例失恆，所幸未來還有好幾次的潛水機會</p><h3 id="四潛-夜潛"><a href="#四潛-夜潛" class="headerlink" title="四潛 (夜潛)"></a>四潛 (夜潛)</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">地區: 東北角美灩山</span><br><span class="line">入水時間: 19:03 |潛水時間: 53 |出水時間: 19:56</span><br><span class="line">能見度: 12m |平均水深: 5m |最大深度: 11.9m |水溫: 26.3</span><br><span class="line">起始壓力:200 |結束壓力:50 |SCR: 2.83 Bar/min</span><br><span class="line">天氣: 晴 |浪況: 無浪 |目的: 訓練 |方式: 岸潛</span><br></pre></td></tr></table></figure><p>最擔心的夜潛反而是最美的一潛，作好安全工作後再下水其實不會有什麼心理壓力，<br>除了教練外還有一個陪潛的前輩，看到很多生物但是叫不出名字，<br>過程中有點小意外，前輩以伏地魔之姿突然從下方出現，害我撞向礁石同時被海膽刺了，<br>所幸以前有被刺過的經驗，知道不會有生命危險，所以我沒有驚慌，但上岸後手上還是多了 4 個黑點，</p><h2 id="20230917"><a href="#20230917" class="headerlink" title="20230917"></a>20230917</h2><h3 id="一潛（高氧）"><a href="#一潛（高氧）" class="headerlink" title="一潛（高氧）"></a>一潛（高氧）</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">地區: 東北角龍洞四號</span><br><span class="line">入水時間: 9:51 |潛水時間:35 |出水時間: 10:26</span><br><span class="line">能見度: 10m |平均水深:16.2m |最大深度:25.5 |水溫: 25.6</span><br><span class="line">起始壓力:200 |結束壓力:100 |SCR: 2.85 Bar/min</span><br><span class="line">天氣: 晴 |浪況: 無浪 |目的: 訓練 |方式: 岸潛</span><br></pre></td></tr></table></figure><p>突破個人最深的記錄，沒有什麼感覺，下水點的魚群很多，<br>但深一點的地方就沒有魚了，看到很多三點蟹的空殼，<br>聽說是漁船上拋下來的，另外撿了一些垃圾</p><h3 id="二潛（高氧）"><a href="#二潛（高氧）" class="headerlink" title="二潛（高氧）"></a>二潛（高氧）</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">地區: 東北角龍洞四號</span><br><span class="line">入水時間: 11:07 |潛水時間: 45 |出水時間: 11:52</span><br><span class="line">能見度: 10m |平均水深: 11.8 |最大深度: 25.8 |水溫: 25.7</span><br><span class="line">起始壓力: 200 |結束壓力: 100 |SCR: 2.22 Bar/min</span><br><span class="line">天氣: 晴 |浪況: 無浪 |目的: 訓練 |方式: 岸潛</span><br></pre></td></tr></table></figure><p>再次突破個人最深的記錄到 25.8，浮力的控制還是很差，到深處會揚沙，<br>突中遇到一團揚沙大隊，簡直是我，<br>回程時有看到小丑魚</p><h3 id="三潛（放呆）"><a href="#三潛（放呆）" class="headerlink" title="三潛（放呆）"></a>三潛（放呆）</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">地區: 東北角美灩山</span><br><span class="line">入水時間: 14:47 |潛水時間: 37 |出水時間: 15:24</span><br><span class="line">能見度: 8m |平均水深: 5.1 |最大深度: 8.6 |水溫: 26.1</span><br><span class="line">起始壓力: 200 |結束壓力: 100 |SCR: 2.70 Bar/min</span><br><span class="line">天氣: 晴 |浪況: 無浪 |目的: 訓練 |方式: 岸潛</span><br></pre></td></tr></table></figure><p>看小夥伴考試，感覺大家很慌張，不過也都通過了，沒有到 11 米處的沙地<br>覺得有遇到流，但是教練是很清鬆就踢過去了，有種提早回程的感覺</p><h3 id="四潛-夜潛-1"><a href="#四潛-夜潛-1" class="headerlink" title="四潛 (夜潛)"></a>四潛 (夜潛)</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">地區: 東北角美灩山</span><br><span class="line">入水時間: 18:54 |潛水時間: 51 |出水時間: 19:45</span><br><span class="line">能見度: 12m |平均水深: 5.1 |最大深度: 11.2 |水溫: 25.9</span><br><span class="line">起始壓力: 200 |結束壓力: 100 |SCR: 1.96 Bar/min</span><br><span class="line">天氣: 晴 |浪況: 無浪 |目的: 訓練 |方式: 岸潛</span><br></pre></td></tr></table></figure><p>看到最多生物的一次，饅頭海星、海蛞蝓跟他的卵、海鰻、河豚、龍蝦<br>獅子魚、還有鼻子長長的不知什麼魚、黑的紅的、睡覺的、龍蝦等…<br>微型生物也很多，但是我看不太到，要很靠近峭壁，所以中心浮力控制要很重要。  </p><h2 id="20230918"><a href="#20230918" class="headerlink" title="20230918"></a>20230918</h2><h3 id="一潛（打浮力帶）"><a href="#一潛（打浮力帶）" class="headerlink" title="一潛（打浮力帶）"></a>一潛（打浮力帶）</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">地區: 東北角龍洞四號</span><br><span class="line">入水時間: 09:04 |潛水時間: 53 |出水時間: 09:57</span><br><span class="line">能見度: 8m |平均水深: 6.3 |最大深度: 8.4 |水溫: 25.2</span><br><span class="line">起始壓力: 200 |結束壓力: 50 |SCR: 3.65 Bar/min</span><br><span class="line">天氣: 晴 |浪況: 無浪 |目的: 訓練 |方式: 岸潛</span><br></pre></td></tr></table></figure><p>第一次打差點拉不住，後面就好多了，<br>不過看了紀錄，發現深度起伏很大，<br>中心浮力沒有控制好，應該至少有打了10次以上</p><h3 id="二潛（打浮力帶）"><a href="#二潛（打浮力帶）" class="headerlink" title="二潛（打浮力帶）"></a>二潛（打浮力帶）</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">地區: 東北角龍洞四號</span><br><span class="line">入水時間: 10:18 |潛水時間: 40 |出水時間: 10:58</span><br><span class="line">能見度: 8m |平均水深: 6.4 |最大深度: 12.2 |水溫: 24.9</span><br><span class="line">起始壓力: 200 |結束壓力: 50 |SCR: 3.75 Bar/min</span><br><span class="line">天氣: 晴 |浪況: 無浪 |目的: 訓練 |方式: 岸潛</span><br></pre></td></tr></table></figure><p>覺得很難控制趴姿，看了錄影，其實還不差，就是一直會停腳，<br>中心浮力控制不好外，還有旋轉的問題，所以一直忍不住踢腳，<br>不僅耗氣，看起來也很好笑，打氣只要二級頭向上就好，不用按壓</p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;20230916&quot;&gt;&lt;a href=&quot;#20230916&quot; class=&quot;headerlink&quot; title=&quot;20230916&quot;&gt;&lt;/a&gt;20230916&lt;/h2&gt;&lt;h3 id=&quot;一潛（導潛）&quot;&gt;&lt;a href=&quot;#一潛（導潛）&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="生活筆記" scheme="https://blog.marsen.me/tags/%E7%94%9F%E6%B4%BB%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [工作筆記] 採蘋果</title>
    <link href="https://blog.marsen.me/2023/09/22/2023/buy_macbook/"/>
    <id>https://blog.marsen.me/2023/09/22/2023/buy_macbook/</id>
    <published>2023-09-22T05:29:05.000Z</published>
    <updated>2023-12-16T14:52:33.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>公司有三台 Macbook pro 2017 年款，普遍都有電池的問題，<br>為此研究了一下在台灣舊機換新機的策略。</p><h2 id="折抵"><a href="#折抵" class="headerlink" title="折抵"></a>折抵</h2><p>選擇好你的新機，在「加入購物袋」前，找到「加入換購方案」，依指示輸入郵遞區號、選擇製造商 Apple 後<br>輸入<a href="https://support.apple.com/zh-tw/HT201581">序號</a>後選擇相關的硬體設備。<br>就會出現一個換購的金額，再繼續完成你的購物袋即可。</p><h2 id="企業商店"><a href="#企業商店" class="headerlink" title="企業商店"></a>企業商店</h2><p>企業採購的話可以有累積的金額優惠，如果滿足到累積的金額(一年內 5000 美金)，就可以以優惠的方式來做訂購，<br>需要打電話(見文末參考)，使用統編建立企業商店。<br>其它方式與折抵一樣。<br>訂單成立後可以刷卡或是匯款，刷卡可以立即看到訂單進度，<br>而匯款後需要再打電話(0800-020-021)確定訂單進度。</p><p>折抵的部份會再出貨後 14 天來回收舊機器，應該有足夠的時間轉移資料。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://support.apple.com/zh-tw/HT201581">https://support.apple.com/zh-tw/HT201581</a></li><li><a href="https://tradein.greenifp.com.tw/ios/reuserecycle">折抵試算</a></li><li>台北門市101：0800-020-005</li><li>台北門市A13: 0800-020-010</li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;公司有三台 Macbook pro 2017 年款，普遍都有電池的問題，&lt;br&gt;為此研究了一下在台灣舊機換新機的策略。&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title> [工作筆記] 軟體工程的檢傷分類</title>
    <link href="https://blog.marsen.me/2023/09/11/2023/injury_table/"/>
    <id>https://blog.marsen.me/2023/09/11/2023/injury_table/</id>
    <published>2023-09-11T08:05:12.000Z</published>
    <updated>2023-12-16T14:52:33.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>回想一下你手頭上的工作，你如何決定你的工作順序?<br>常見的有緊急&#x2F;重要四象限法。<br>另外在一些方法論上，利如 Scrum 交由特定角色排序，<br>而急診室的檢傷分類如下。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">第一級（復甦急救，立即處理－病況危急生命或肢體，需立即處理。如：心跳、呼吸停止、肢體及嘴唇發青、發紫，體溫高於41度或低於32度，無意識或意識混亂、持續抽搐且無意識。</span><br><span class="line"></span><br><span class="line">　　第二級（危急，可能等候時間10分鐘）－潛在性危及生命、肢體及器官功能，需快速控制與處理。如：急性意識狀態改變、持續胸悶、胸痛且冒冷汗、低血糖(&lt;40mg/dl)、外傷造成之大量出血，頭頸軀幹骨盆部位血流不止、高處墜落、車禍(乘客被拋出車外)、頭部撞擊後曾失去意識等。</span><br><span class="line"></span><br><span class="line">　　第三級（緊急，可能等候時間30分鐘）－病況可能持續惡化，需急診處置；病人可能伴隨明顯不適症狀，影響日常生活。如：無法控制的腹瀉或嘔吐、外傷後肢體腫脹變形疑似骨折/脫臼、高血壓(收縮壓&gt;200mmHg或舒張壓&gt;110mmHg)且沒有任何症狀等。</span><br><span class="line"></span><br><span class="line">　　第四級（次緊急，可能等候時間60分鐘）－病況可能為慢性病及急性發作，或某些疾病之合併症相關，需在1至2小時做處置避免惡化。如：局部蜂窩性組織炎、急性咳嗽但沒有發燒、發燒但無其他不適、反覆性疼痛或暈眩等。</span><br><span class="line"></span><br><span class="line">　　第五級（非緊急，可能等候時間120分鐘）－病況非緊急，需做鑑別性診斷或轉介門診。如：慢性噁心、嘔吐或打嗝、輕微擦傷，瘀青，軟組織受傷、螫傷或咬傷，但無發燒或疼痛不適、輕微腹瀉，無脫水現象等。</span><br></pre></td></tr></table></figure><p>我們可以參考。以等級與具體案例作為分析。</p><p>個人的經驗是以 3+1 個維度分析，<br>主要為發生風險、發生頻率、影響範圍和可否重現。</p><h2 id="判斷流程"><a href="#判斷流程" class="headerlink" title="判斷流程"></a>判斷流程</h2><ol><li>是否為線上問題：線上問題較可能產生價值的耗損</li><li>發生頻率：高頻的問題如果不處理會帶來大量干擾、下一階段可能會麻痺，甚至讓真正的問題從眼前跑走</li><li>影響範圍：誰會感到痛苦？老闆？客戶？PM ? RD ? 營運？怎麼作可以停止或減輕他們的痛苦。</li><li>風險評估：不作會怎麼樣？作了會怎麼樣？</li></ol><h2 id="定義"><a href="#定義" class="headerlink" title="定義"></a>定義</h2><p>x 的維度是風險的高低，風險高者需安排修正，風險低小者可以再觀察<br>y 的維度是影響範圍的大小，範圍大者需優先停損縮小範圍，範圍小者就安排修正<br>z 的維度是發生的頻率，高頻者需優先停損止傷，低頻者需要觀察，如果發生一次就會形成持續性或永久性的傷害即為高頻<br>加上可否重現分析如下：</p><h3 id="可重現"><a href="#可重現" class="headerlink" title="可重現"></a>可重現</h3><p>高風險／高範圍的情況下，頻率已經不重要，重要的不能讓發生 0 次的事情發生 １次，<br>一但發生只能砍掉重練，具體例子如<a href="https://www.businesstoday.com.tw/article/category/183015/post/202104210030/">廣達被勒索病毒攻擊</a></p><p>維度一：高風險／高範圍／高頻率：終止營業、暫停營運的等級<br>維度二：高風險／高範圍／低頻率：終止營業、暫停營運的等級</p><p>應急辦法，止血: 先限縮風險、範圍、頻率至少其中之一。</p><p>低風險／高範圍的情況，即使發生了仍有轉還的空間，高頻時處理的重點在縮小範圍與暫時的降噪<br>一但修正，理應停止降噪的設定，低頻時安排修正計劃即可</p><p>維度三：低風險／高範圍／高頻率：部份功能停止運作。應暫時的降噪（暫時停止通止，避免有其它警告被淹沒），安排修正計劃<br>維度四：低風險／高範圍／低頻率：部份功能停止運作。儘速安排修正計劃。</p><p>在高風險的情況，如果有小範圍的異常，都應立即處理，重點在於能不能根除問題，或是緩解發生頻次</p><p>維度五：高風險／低範圍／高頻率：根除問題，或是緩解發生頻次<br>維度六：高風險／低範圍／低頻率：根除問題，或是緩解發生頻次</p><p>在低風險／低範圍的情況下，要小心避免讓人習慣這類型的錯誤(麻痺)，或是產生過多雜訊影響判斷。<br>偶一為之但是知道原因的話可以不處理</p><p>維度七：低風險／低範圍／高頻率：降噪或是設定提示水位<br>維度八：低風險／低範圍／低頻率：不處理</p><h3 id="不可重現"><a href="#不可重現" class="headerlink" title="不可重現"></a>不可重現</h3><p>不知道自已不知道是最可怕的，如果發生時是高風險／高範圍大多也沒救了，<br>就死前能不能有所收獲</p><p>維度一：高風險／高範圍／高頻率：終止營業、暫停營運的等級<br>維度二：高風險／高範圍／低頻率：終止營業、暫停營運的等級</p><p>低風險／高範圍的情況，即使發生了仍有轉還的空間，高頻時處理的重點在縮小範圍與暫時的降噪<br>一但修正，理應停止降噪的設定，低頻時安排修正計劃即可</p><p>維度三：低風險／高範圍／高頻率：暫時的降噪（暫時停止通止，避免有其它告警被淹沒），查明原因，安排修正計劃<br>維度四：低風險／高範圍／低頻率：查明原因，安排修正計劃</p><p>在高風險的情況，如果有小範圍的異常，都應立即處理，重點會在能不能根除問題，或是緩解發生頻次</p><p>維度五：高風險／低範圍／高頻率：查明原因，根除問題，或是緩解發生頻次<br>維度六：高風險／低範圍／低頻率：查明原因，根除問題，或是緩解發生頻次</p><p>在低風險／低範圍的情況下，要小心避免讓人習慣這類型的錯誤(麻痺)，或是產生過多雜訊影響判斷。<br>偶一為之但是不知道原因的話要特別小心標記，這很可能是別處發生問題的潛兆</p><p>維度七：低風險／低範圍／高頻率：查明原因，降噪或是設定提示水位<br>維度八：低風險／低範圍／低頻率：查明原因</p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>幾個重點，預防勝於治療，<br>真的發生時儘可能讓風險降低、範圍縮小、頻率減少，<br>十萬火急時可以先用暫解去處理，減少傷害。<br>但是回到正常流程就是要找出根本原因，並用正確的方式治療。</p><p>我作了個表以供參考</p><table><thead><tr><th>情境</th><th>風險</th><th>範圍</th><th>頻率</th><th>行動</th></tr></thead><tbody><tr><td><strong>可重現情況（Reproducible）</strong></td><td></td><td></td><td></td><td></td></tr><tr><td>1</td><td>高</td><td>高</td><td>高</td><td>立即處理，確保不再發生。</td></tr><tr><td>2</td><td>高</td><td>高</td><td>低</td><td>立即處理，確保不再發生。</td></tr><tr><td>3</td><td>低</td><td>高</td><td>高</td><td>暫時降噪並制定修正計劃。</td></tr><tr><td>4</td><td>低</td><td>高</td><td>低</td><td>制定修正計劃。</td></tr><tr><td>5</td><td>高</td><td>低</td><td>高</td><td>根除問題或減少頻率。</td></tr><tr><td>6</td><td>高</td><td>低</td><td>低</td><td>根除問題或減少頻率。</td></tr><tr><td>7</td><td>低</td><td>低</td><td>高</td><td>降噪或設定提示水位。</td></tr><tr><td>8</td><td>低</td><td>低</td><td>低</td><td>不處理。</td></tr><tr><td><strong>不可重現情況（Non-Reproducible）</strong></td><td></td><td></td><td></td><td></td></tr><tr><td>9</td><td>高</td><td>高</td><td>高</td><td>查明原因，可能無法挽救。</td></tr><tr><td>10</td><td>高</td><td>高</td><td>低</td><td>查明原因，可能無法挽救。</td></tr><tr><td>11</td><td>低</td><td>高</td><td>高</td><td>暫時降噪，查明原因，制定修正計劃。</td></tr><tr><td>12</td><td>低</td><td>高</td><td>低</td><td>查明原因，制定修正計劃。</td></tr><tr><td>13</td><td>高</td><td>低</td><td>高</td><td>查明原因，根除問題或減少頻率。</td></tr><tr><td>14</td><td>高</td><td>低</td><td>低</td><td>查明原因，根除問題或減少頻率。</td></tr><tr><td>15</td><td>低</td><td>低</td><td>高</td><td>查明原因，降噪或設定提示水位。</td></tr><tr><td>16</td><td>低</td><td>低</td><td>低</td><td>查明原因，特別小心標記可能是其他問題的潛在預兆。</td></tr></tbody></table><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;回想一下你手頭上的工作，你如何決定你的工作順序?&lt;br&gt;常見的有緊急&amp;#x2F;重要四象限法。&lt;br&gt;另外在一些方法論上，利</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title> [生活筆記] 一些程式轉職相關的問答</title>
    <link href="https://blog.marsen.me/2023/08/22/2023/ac_QA_08/"/>
    <id>https://blog.marsen.me/2023/08/22/2023/ac_QA_08/</id>
    <published>2023-08-22T04:42:33.016Z</published>
    <updated>2023-12-16T14:52:33.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>一直有在作程式相關的助教、導師相關的工作，有些學生的問題很棒，也是我的盲點。<br>沒有心思好好整理，至少記錄下來，給未來的自已一絲反芻機會。  </p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><h3 id="Express-js在業界的實用性如何-優點和缺點是什麼-有需要再學習第二種語言-框架嗎-，建議的選擇是"><a href="#Express-js在業界的實用性如何-優點和缺點是什麼-有需要再學習第二種語言-框架嗎-，建議的選擇是" class="headerlink" title="Express.js在業界的實用性如何? 優點和缺點是什麼? 有需要再學習第二種語言&#x2F;框架嗎?，建議的選擇是?"></a>Express.js在業界的實用性如何? 優點和缺點是什麼? 有需要再學習第二種語言&#x2F;框架嗎?，建議的選擇是?</h3><p>算常見的 Nodejs 的 Web 框架，優點就是夠主流，資源好找。<br>缺點就太簡單。  </p><p>語言&#x2F;框架可以多學，自已判斷。不知道就先跟著公司或社群走。  </p><p>參考文章<a href="https://www.geeksforgeeks.org/best-nodejs-frameworks-for-app-development/">10 Best Nodejs Frameworks for App Development in 2023</a></p><p>Google 關鍵字：　<strong>Nodejs Web Framework 2023</strong></p><p>思路:不論什麼樣的程式語言，我的本質是 Web 開發，不同的語言與框架有不同的場景，總不缺乏新的挑戰者，<br>可以觀望、研究、測試、入坑，沒有一定的正確的答案，能夠快速作出判斷與取捨是重要的，但這需要經驗。</p><h3 id="2-如果想要在自有主機上部署Express-js，比較適合搭配的web伺服器軟體是"><a href="#2-如果想要在自有主機上部署Express-js，比較適合搭配的web伺服器軟體是" class="headerlink" title="2. 如果想要在自有主機上部署Express.js，比較適合搭配的web伺服器軟體是?"></a>2. 如果想要在自有主機上部署Express.js，比較適合搭配的web伺服器軟體是?</h3><p>這裡的”web伺服器軟體”是指什麼? Nginx 或 Apache 嗎?<br>選擇適合的場景就好。目前業界主流是 Nginx，思路參考第一題  </p><h3 id="3-樣板引擎在業界的使用度高嗎-有使用的話會是在什麼情況呢-有比較主流的選擇嗎-還是大部分被前端框架取代了"><a href="#3-樣板引擎在業界的使用度高嗎-有使用的話會是在什麼情況呢-有比較主流的選擇嗎-還是大部分被前端框架取代了" class="headerlink" title="3. 樣板引擎在業界的使用度高嗎? 有使用的話會是在什麼情況呢? 有比較主流的選擇嗎? 還是大部分被前端框架取代了?"></a>3. 樣板引擎在業界的使用度高嗎? 有使用的話會是在什麼情況呢? 有比較主流的選擇嗎? 還是大部分被前端框架取代了?</h3><p>註：學生這裡指的是 express + handlebars 的開發方式<br>大部份都前後分離端了，維護舊案可以能會碰到。<br>樣板引擎主要會發生在 Web Form 這類的舊專案，主流可能是 Php 或 Asp.Net 的某些專案。<br>或是在 2010 很主流的 MVC 開發方式，這段時間各家語言也有自已的解決方案。 　</p><p>思路:理解為什麼會有前後端分離的發生，某些情況的小專案，樣板引擎的開發方式會比前後端分離有效率。  </p><h3 id="4-AC一個練習教案的規模，大概有幾十個到百個檔案要維護。實際業界專案的檔案數量應該更多，檔案間的關係複雜，維護人員要如何弄得清楚呢-有沒有什麼比較好的管理工具"><a href="#4-AC一個練習教案的規模，大概有幾十個到百個檔案要維護。實際業界專案的檔案數量應該更多，檔案間的關係複雜，維護人員要如何弄得清楚呢-有沒有什麼比較好的管理工具" class="headerlink" title="4. AC一個練習教案的規模，大概有幾十個到百個檔案要維護。實際業界專案的檔案數量應該更多，檔案間的關係複雜，維護人員要如何弄得清楚呢? 有沒有什麼比較好的管理工具?"></a>4. AC一個練習教案的規模，大概有幾十個到百個檔案要維護。實際業界專案的檔案數量應該更多，檔案間的關係複雜，維護人員要如何弄得清楚呢? 有沒有什麼比較好的管理工具?</h3><p>檔案是指程式碼的部份嗎? 　<br>學會架構分層，基本就三層式架構、MVC、MVVM、MVP、MV* 等，<br>使用 OOP 語言的話可能也要依 Pattern 分層，現在比較流行 DDD、六角架構等…<br>再大一點會是微服務的情況。  </p><p>思路：想一下檔案間的關係複雜，那你會怎麼作？基本上就是分門別類，<br>好的分類可以讓錯誤發生時可以快速定位、實作功能時可以職責分離。<br>舉個生活化的例子，就是像是整理你的房間。  </p><h3 id="5-在前後端的協作中，如何決定一項功能應由前端製作或後端製作-舉例來說，要加上分頁的功能，本質上只是資料的整理重排，這樣的功能應該由前端或後端做呢"><a href="#5-在前後端的協作中，如何決定一項功能應由前端製作或後端製作-舉例來說，要加上分頁的功能，本質上只是資料的整理重排，這樣的功能應該由前端或後端做呢" class="headerlink" title="5. 在前後端的協作中，如何決定一項功能應由前端製作或後端製作? 舉例來說，要加上分頁的功能，本質上只是資料的整理重排，這樣的功能應該由前端或後端做呢?"></a>5. 在前後端的協作中，如何決定一項功能應由前端製作或後端製作? 舉例來說，要加上分頁的功能，本質上只是資料的整理重排，這樣的功能應該由前端或後端做呢?</h3><p>Case by Case, 以我來說跟畫面有關的歸前端、其它歸後端。　　<br>分頁通常會由後端處理、但是有些情況前端也要處理。<br>Ex: 避免太頻繁的 request 到 Server，一次性回傳大量資料，由前端自行製作分頁。  </p><p>思路：還是以需求為依歸、預設一個簡單的原則。團隊合作的話，最理想是團隊共識，次之由 Leader 決定，不要發生由某端強勢主導的情況。<br>舉例說明，欄位檢查，前後端都要作，前端的目的是引導使用者正確操作，後端是真正的防護。  </p><h3 id="6-求職網站中許多職缺要求會其他程式語言如-C-or-PHP-會建議再去學其他語言嗎-有推薦的學習平台或課程"><a href="#6-求職網站中許多職缺要求會其他程式語言如-C-or-PHP-會建議再去學其他語言嗎-有推薦的學習平台或課程" class="headerlink" title="6. 求職網站中許多職缺要求會其他程式語言如: C# or PHP,會建議再去學其他語言嗎? 有推薦的學習平台或課程?"></a>6. 求職網站中許多職缺要求會其他程式語言如: C# or PHP,會建議再去學其他語言嗎? 有推薦的學習平台或課程?</h3><p>我會想學 TypeScript、Python。<br>程式在 web 開發上有類似的作法，更多領域其實也需要程式人才，<br>例如：手機 App 開發、IoT 開發、AI 工程師等…<br>建議找一個自已可以生存的領域，專研打磨裡面的技術會建議<br>社群活動可以用來搜集關鍵字，<br>Udemy 的課程很便宜，YT 也有很多大神的頻道可以學習。  </p><p>思路：唯一的問題是學不完，怎麼整合應用變現，這個時候就不只是求職了，公司只是某一些技術棧整合的結果，<br>當你學的更多時，或許可以有別的出路？  </p><h3 id="7-建議如何練習LeetCode-才不會好像只是背答案-而不是懂背後的邏輯。有聽說-NeetCode-平台不錯用-不知道助教是否推薦"><a href="#7-建議如何練習LeetCode-才不會好像只是背答案-而不是懂背後的邏輯。有聽說-NeetCode-平台不錯用-不知道助教是否推薦" class="headerlink" title="7. 建議如何練習LeetCode? 才不會好像只是背答案,而不是懂背後的邏輯。有聽說 NeetCode 平台不錯用?不知道助教是否推薦"></a>7. 建議如何練習LeetCode? 才不會好像只是背答案,而不是懂背後的邏輯。有聽說 NeetCode 平台不錯用?不知道助教是否推薦</h3><p>就是多刷多累績經驗，看題目、看答案。<br>兩個重點，把題目看懂、把答案看懂，試著把自已的思路轉化成程式<br>平台很多：<a href="https://neetcode.io/">NeetCode</a>、<a href="https://leetcode.com/">Leetcode</a>、<a href="https://www.hackerrank.com/">Hackerrank</a>  </p><p>思路：助教用 TDD 刷 LeetCode，實務上蠻常遇到面試造火箭、入職擰螺絲的狀態，<br>但是仍然不知道要學什麼或作什麼樣的 Side Project 時，刷題是一個好的選擇。  </p><h3 id="8-Junior工程師除了準備作品集-LeetCode-與程式語言的觀念外-通常面試還會考什麼嗎"><a href="#8-Junior工程師除了準備作品集-LeetCode-與程式語言的觀念外-通常面試還會考什麼嗎" class="headerlink" title="8. Junior工程師除了準備作品集,LeetCode 與程式語言的觀念外,通常面試還會考什麼嗎?"></a>8. Junior工程師除了準備作品集,LeetCode 與程式語言的觀念外,通常面試還會考什麼嗎?</h3><p>我主要會問架構與流程題，如果能把自已開發的架構與流程說明清楚，就可以同時觀察到技術能力與溝通能力。  </p><p>思路:常常去面試就會知道現在業界常問什麼了。  </p><h3 id="10-職場上在開發專案時，後端工程師的實作範圍會是全部一手包辦還是還會細分工作？或者工作架構會是怎麼分配的？"><a href="#10-職場上在開發專案時，後端工程師的實作範圍會是全部一手包辦還是還會細分工作？或者工作架構會是怎麼分配的？" class="headerlink" title="10. 職場上在開發專案時，後端工程師的實作範圍會是全部一手包辦還是還會細分工作？或者工作架構會是怎麼分配的？"></a>10. 職場上在開發專案時，後端工程師的實作範圍會是全部一手包辦還是還會細分工作？或者工作架構會是怎麼分配的？</h3><p>看公司，建議去有分工的公司，一手包辦很可能會很雷，學到的可能也是一堆大泥球的作法  </p><h3 id="12-除了現有AC課程之外，助教建議Junior後端工程師還需要提升哪方面的技術"><a href="#12-除了現有AC課程之外，助教建議Junior後端工程師還需要提升哪方面的技術" class="headerlink" title="12. 除了現有AC課程之外，助教建議Junior後端工程師還需要提升哪方面的技術"></a>12. 除了現有AC課程之外，助教建議Junior後端工程師還需要提升哪方面的技術</h3><p>掌握好版控與協作流程／自動化與容器化技術／實用精實的開發實踐  </p><ul><li>Git、Docker、AWS&#x2F;Azure&#x2F;GCP、K8S</li><li>TDD (BDD、ATDD)&#x2F; Refactoring &#x2F;Design Pattern</li></ul><h3 id="13-目前軟體業有受到景氣影響而減少職缺數嗎或停止招聘"><a href="#13-目前軟體業有受到景氣影響而減少職缺數嗎或停止招聘" class="headerlink" title="13. 目前軟體業有受到景氣影響而減少職缺數嗎或停止招聘"></a>13. 目前軟體業有受到景氣影響而減少職缺數嗎或停止招聘</h3><p>國外有一波大裁員，有影響到，但台灣本身還好<br>至少我還好  </p><h3 id="14-請問助教平常寫程式會如何結合AI加速開發，有建議相關課程嗎"><a href="#14-請問助教平常寫程式會如何結合AI加速開發，有建議相關課程嗎" class="headerlink" title="14. 請問助教平常寫程式會如何結合AI加速開發，有建議相關課程嗎"></a>14. 請問助教平常寫程式會如何結合AI加速開發，有建議相關課程嗎</h3><p>Github Copilot+TDD  </p><h3 id="15-網站若有多國語言版本，技術上要怎麼實作呢"><a href="#15-網站若有多國語言版本，技術上要怎麼實作呢" class="headerlink" title="15. 網站若有多國語言版本，技術上要怎麼實作呢?"></a>15. 網站若有多國語言版本，技術上要怎麼實作呢?</h3><p>關鍵字<code>i18n</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;tw&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;login&quot;</span>:<span class="string">&quot;登入&quot;</span>            </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;en&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;login&quot;</span>:<span class="string">&quot;Login&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-手機版和電腦版的網站要怎麼分割呢"><a href="#16-手機版和電腦版的網站要怎麼分割呢" class="headerlink" title="16. 手機版和電腦版的網站要怎麼分割呢?"></a>16. 手機版和電腦版的網站要怎麼分割呢?</h3><p>我知道的兩種作法</p><ul><li>RWD</li><li>作兩個站，比如<ul><li><a href="https://xxx/m/index">https://xxx/m/index</a></li><li><a href="https://xxx/index">https://xxx/index</a></li></ul></li></ul><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>部份題目涉及專案內容，所以排除掉。<br>但是有關從無到有開發一個專案，或是與人合作開發專案，是整個職涯中會很常發生的事。<br>現在不作，以後也會遇到，可以儘量去嚐試。  </p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;一直有在作程式相關的助教、導師相關的工作，有些學生的問題很棒，也是我的盲點。&lt;br&gt;沒有心思好好整理，至少記錄下來，給未來的</summary>
      
    
    
    
    
    <category term="生活筆記" scheme="https://blog.marsen.me/tags/%E7%94%9F%E6%B4%BB%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] Websocket 初體驗</title>
    <link href="https://blog.marsen.me/2023/08/07/2023/websocket/"/>
    <id>https://blog.marsen.me/2023/08/07/2023/websocket/</id>
    <published>2023-08-07T07:33:16.000Z</published>
    <updated>2023-12-16T14:52:33.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>tl;dr, websocket 至少是一個 10 年以上的技術了，但是筆者一直沒有機會實作它。<br>大部份的時候是應用場景不符合，或是簡單 Long Polling 已經足夠，甚至就算用 Polling 這個方法也無法把 Server 打掛。<br>另一個情況是團隊已經很成熟，有專門負責的部門在統一處理這塊邏輯，<br>而通常這塊邏輯會與主要的核心功能作切分，所以我也沒有機會接觸到。<br>這次難得有個小型的專案，有機會實作，故稍作記錄一下。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>使用者會停留在某些頁面等待系統的資料狀態更新，大約每 10 秒要作一次 Polling,<br>而平均資料狀態更新需要 3~10 分鐘不等。在這個情況下要改用 websocket,<br>（註：我不認為這是一個很好的應用場景，但是牽扯更多未揭露的調整故不展開討論,<br>EX:Heartbeat、Keep-Alive 等等…機制也未討論到）</p><h2 id="WebSocket-Server-實作"><a href="#WebSocket-Server-實作" class="headerlink" title="WebSocket Server 實作"></a>WebSocket Server 實作</h2><p>使用的技術：Typescript + Express + ServerSocket</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import library</span></span><br><span class="line"><span class="keyword">import</span> express, &#123; <span class="title class_">Request</span>, <span class="title class_">Response</span> &#125; <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Server</span> <span class="keyword">as</span> <span class="title class_">ServerSocket</span> &#125; <span class="keyword">from</span> <span class="string">&quot;ws&quot;</span>; <span class="comment">// 引用 Server</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span>) &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&quot;dotenv&quot;</span>).<span class="title function_">config</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// form env 指定一個 port</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">PORT</span>: <span class="built_in">number</span> = <span class="title class_">Number</span>(process.<span class="property">env</span>.<span class="property">WS_PORT</span>);</span><br><span class="line"><span class="comment">// 設定斷開時間</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">CT</span>: <span class="built_in">number</span> = <span class="number">1000</span> * <span class="title class_">Number</span>(process.<span class="property">env</span>.<span class="property">CONNECTION_TIMEOUT</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> server = app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    <span class="string">`[Server] Listening on http://localhost:<span class="subst">$&#123;PORT&#125;</span> , timeout is <span class="subst">$&#123;CT&#125;</span> ms`</span></span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> wsServer = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(&#123; server &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Connection opened</span></span><br><span class="line">wsServer.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">ws: WebSocket, req: Request</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Connection 建立時發生的邏輯</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Listen for messages from client</span></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">data: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 發送 Message 時發生的邏輯</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Invalid JSON format: &quot;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Get clients who has connected</span></span><br><span class="line">    <span class="keyword">const</span> clients = wsServer.<span class="property">clients</span>;</span><br><span class="line">    <span class="comment">// Use loop for sending messages to each client</span></span><br><span class="line">    clients.<span class="title function_">forEach</span>(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">      client.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(docStatus));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 設定 ping 時間間隔，用來讓連線太久的 Client 斷開</span></span><br><span class="line">  <span class="keyword">const</span> interval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ws.<span class="property">alive</span>) &#123;</span><br><span class="line">      ws.<span class="title function_">terminate</span>();</span><br><span class="line">      <span class="built_in">clearInterval</span>(interval);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ws.<span class="property">alive</span> = <span class="literal">false</span>;</span><br><span class="line">    ws.<span class="title function_">ping</span>(<span class="string">&quot;&quot;</span>, <span class="literal">false</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[Timeout]&quot;</span>, ws.<span class="property">key</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, <span class="variable constant_">CT</span>); <span class="comment">// 30 秒</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Connection closed</span></span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">&quot;close&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Connection 關閉時發生的邏輯</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[Close connected]&quot;</span>, ws.<span class="property">key</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增一個路由處理器</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req: Request, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// health and version check</span></span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">`WebSocket Running Version <span class="subst">$&#123;process.env.WS_VERSION&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="前端實作，收送雙向"><a href="#前端實作，收送雙向" class="headerlink" title="前端實作，收送雙向"></a>前端實作，收送雙向</h2><p>使用的技術：JavaScript<br>以下內容大多參考於<a href="https://medium.com/enjoy-life-enjoy-coding/javascript-websocket-%E8%AE%93%E5%89%8D%E5%BE%8C%E7%AB%AF%E6%B2%92%E6%9C%89%E8%B7%9D%E9%9B%A2-34536c333e1b">神 Q 超人</a>的文章，<br>作為參考用，實務上會搭配使用的前端框架作修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 監聽 click 事件</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#connect&quot;</span>)?.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[click connect]&quot;</span>);</span><br><span class="line">  <span class="title function_">connect</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#disconnect&quot;</span>)?.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[click disconnect]&quot;</span>);</span><br><span class="line">  <span class="title function_">disconnect</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#sendBtn&quot;</span>)?.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> msg = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#sendMsg&quot;</span>);</span><br><span class="line">  <span class="title function_">sendMessage</span>(msg?.<span class="property">value</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Create WebSocket connection</span></span><br><span class="line">  ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;wss://localhost:8088&quot;</span>);</span><br><span class="line">  <span class="comment">// 在開啟連線時執行</span></span><br><span class="line">  ws.<span class="property">onopen</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Listen for messages from Server</span></span><br><span class="line">    ws.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 收到訊息的 Logic</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[Message from server]:\n %c<span class="subst">$&#123;event.data&#125;</span>`</span>, <span class="string">&quot;color: yellow&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">disconnect</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ws.<span class="title function_">close</span>();</span><br><span class="line">  <span class="comment">// 在關閉連線時執行</span></span><br><span class="line">  ws.<span class="property">onclose</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[close connection]&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 監聽 click 事件</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#sendBtn&quot;</span>)?.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> msg = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#sendMsg&quot;</span>);</span><br><span class="line">  <span class="title function_">sendMessage</span>(msg?.<span class="property">value</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen for messages from Server</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendMessage</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">  <span class="comment">// Send messages to Server</span></span><br><span class="line">  ws.<span class="title function_">send</span>(msg);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[send message]&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="後端實作，只送不收"><a href="#後端實作，只送不收" class="headerlink" title="後端實作，只送不收"></a>後端實作，只送不收</h2><p>使用技術: php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;./vendor/autoload.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$client</span> = <span class="keyword">new</span> <span class="title class_">WebSocket\Client</span>(<span class="string">&quot;wss://localhost:8088&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&quot;your_property&quot;</span> =&gt; <span class="string">&quot;Your Data&quot;</span>,</span><br><span class="line">    <span class="string">&quot;complex_property&quot;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&quot;no&quot;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;status&quot;</span> =&gt; <span class="string">&quot;Hello word&quot;</span></span><br><span class="line">    )</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="variable">$client</span>-&gt;<span class="title function_ invoke__">text</span>(<span class="variable">$message</span>);</span><br><span class="line"><span class="variable">$client</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>實務上在股票看盤即時更新、多人聊天室、多人網頁遊戲上或許十分有用，<br>但實際上在這此的案例上就有些大材小用了，先當作學習了。<br>在查找資料的過程有<a href="https://www.quora.com/What-is-the-best-language-to-program-a-websocket-server-in">一段話</a>很受用,<br>我稍作總結如下：<br>當討論到 WebSocket 時，不應用 Http 的標準去審視它，<br>更應該關注這些 Connection 會持續連接多久? Connection 之間交互的行為是什麼?　　<br>是運算密集的行為還是讀寫密集的行為？…等等，才是你決策的關鍵。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/27021102">WebSocket 与 TCP&#x2F;IP</a></li><li><a href="https://medium.com/enjoy-life-enjoy-coding/javascript-websocket-%E8%AE%93%E5%89%8D%E5%BE%8C%E7%AB%AF%E6%B2%92%E6%9C%89%E8%B7%9D%E9%9B%A2-34536c333e1b">JavaScript | WebSocket 讓前後端沒有距離</a></li><li><a href="https://zhuanlan.zhihu.com/p/411440557">关于 websocket 到底要不要做心跳</a></li><li><a href="https://www.piesocket.com/blog/php-websocket">How To Connect To WebSockets With PHP</a></li><li><a href="https://thoughtbot.com/blog/json-event-based-convention-websockets">A JSON event-based convention for WebSockets</a></li><li><a href="https://socket.io/">Socket.io</a></li><li><a href="https://pusher.com/">Pusher.com</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;tl;dr, websocket 至少是一個 10 年以上的技術了，但是筆者一直沒有機會實作它。&lt;br&gt;大部份的時候是應用場</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [踩雷筆記] Gitlab CI 執行 Command 結果與本地環境不一致</title>
    <link href="https://blog.marsen.me/2023/07/31/2023/not_working_sh_in_gitlab_ci/"/>
    <id>https://blog.marsen.me/2023/07/31/2023/not_working_sh_in_gitlab_ci/</id>
    <published>2023-07-31T09:16:56.000Z</published>
    <updated>2023-12-16T14:52:33.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>我們建立 CI 的一個目標是讓繁鎖的工作流程自動化，<br>而自動化的前題是標準化，而自動化的未來是可以規模化。<br>每一次的自動化，就像是在為工作流程添加柴火，讓未來的的每一步可以走的更穩更快。</p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>一直以來我認為只要在本機環境上可以執行的指令(command),就一定可以在 CI 中執行，<br>沒想到這次不一樣。</p><p>下面這個語法是我 CI 流程的一部份，主要的目的是要重啟 <code>pm2</code> 的服務</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 restart app.js</span><br></pre></td></tr></table></figure><p>這段在 Gitlab-runner CI 的寫法如下，主要的目的就在 Gitlab-runner 中將指令送到指定的機器<code>$VM</code>上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- ssh -i ~/.ssh/id_rsa gitlab-runner@$VM &#x27;pm2 restart app.j&#x27;</span><br></pre></td></tr></table></figure><p>不過我會收到錯誤訊息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash: pm2: command not found</span><br></pre></td></tr></table></figure><p>當我直接在<code>$VM</code>執行時，確又不會有錯誤</p><h2 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h2><p>原來在 Unix-like 系統中，shell 分為 Interactive Shell（互動式）和 Non-Interactive Shell（非互動式）。<br>兩者環境變數和 PATH 不同，導致在 CI 或遠程機器上執行命令可能與本地不一致</p><p>查詢了一下兩者的 PATH 如下</p><p>Interactive Shell</p><blockquote><p>&#x2F;home&#x2F;gitlab-runner&#x2F;.nvm&#x2F;versions&#x2F;node&#x2F;v20.4.0&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;games:&#x2F;usr&#x2F;local&#x2F;games:&#x2F;snap&#x2F;bin</p></blockquote><p>Non-Interactive Shell</p><blockquote><p>&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;games:&#x2F;usr&#x2F;local&#x2F;games:&#x2F;snap&#x2F;bin</p></blockquote><p>明顯可見的差異在於<code>NVM</code>的路徑設定,這個 PATH 是在安裝 <code>NVM</code> 時被加上去的</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>我們可以選擇重新 export NVM_DIR 這個作法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- ssh -i ~/.ssh/id_rsa gitlab-runner@$VM &#x27;export NVM_DIR=&quot;$HOME/.nvm&quot; &amp;&amp; [ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot; &amp;&amp;</span><br><span class="line">      pm2 restart app.js</span><br></pre></td></tr></table></figure><p>另一種作法會多上一層 shell，並再次執行互動式的 bash 我覺得較不易理解<br>不好維護，故不採用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- ssh -i ~/.ssh/id_rsa gitlab-runner@$VM &#x27;bash -i -l -c &quot;pm2 restart app.js&quot;&#x27;</span><br></pre></td></tr></table></figure><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.gnu.org/software/bash/manual/html_node/What-is-an-Interactive-Shell_003f.html">What is an Interactive Shell?</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;我們建立 CI 的一個目標是讓繁鎖的工作流程自動化，&lt;br&gt;而自動化的前題是標準化，而自動化的未來是可以規模化。&lt;br&gt;每一</summary>
      
    
    
    
    
    <category term="踩雷筆記" scheme="https://blog.marsen.me/tags/%E8%B8%A9%E9%9B%B7%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [生活筆記] 2023 半年工作回顧</title>
    <link href="https://blog.marsen.me/2023/07/20/2023/q2_work_review/"/>
    <id>https://blog.marsen.me/2023/07/20/2023/q2_work_review/</id>
    <published>2023-07-20T07:56:23.000Z</published>
    <updated>2023-12-16T14:52:33.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>這份是 2023 年, 3 至 6 月間，我在工作上獲得的成果，<br>以理性務實的態度推動各項工作，以下是在這段時間內所取得的重要成果：</p><h3 id="敏捷觀念的引進與實踐"><a href="#敏捷觀念的引進與實踐" class="headerlink" title="敏捷觀念的引進與實踐"></a>敏捷觀念的引進與實踐</h3><p>我引進了<code>迭代開發</code>和<code>要事優先</code>的敏捷觀念，<br>同時建立了 PBI（產品待辦項目）與工作看板，以確保團隊的<code>工作透明度</code>。<br>我們每日召開立會，及時更新資訊，並建立了<code>文件系統</code>，以便於知識的分享與傳承。</p><h3 id="前後端分離的優化"><a href="#前後端分離的優化" class="headerlink" title="前後端分離的優化"></a>前後端分離的優化</h3><p>我推動了<code>前後端分離</code>的工作方式，使專業得以適當分工，減少了彼此等待的時間。<br>這樣的優化使得服務可以被重複使用，避免了重複開發，節省了寶貴的時間與資源。</p><h3 id="自動化的部署機制引入-CI-CD"><a href="#自動化的部署機制引入-CI-CD" class="headerlink" title="自動化的部署機制引入(CI&#x2F;CD)"></a>自動化的部署機制引入(CI&#x2F;CD)</h3><p>我們成功建立了<code>自動化的部署機制</code>，每次部署都節省了至少 10~30 分鐘的時間，<br>同時大幅<code>減少了人工操作可能帶來的錯誤風險</code>。<br>這項優化為團隊帶來了高效率與更穩定的工作環境。<br>這是持續性的正面效益，假設每周部署 10 人次以上，以換算時薪為 600 計算，<br>每年每位 RD 約可以省下等值於 8 萬的工作時間。並大幅下降風險。</p><h3 id="準時交付-N-系統，完成參展目標"><a href="#準時交付-N-系統，完成參展目標" class="headerlink" title="準時交付 N 系統，完成參展目標"></a>準時交付 N 系統，完成參展目標</h3><p>我們順利地在新加坡、法國、台北和高雄四地參展，並提供了展場現場的支援，<br>這已超出我們本職專業的範疇。<br>但我們成功地達成目標，贏得了更多的曝光與商機。</p><h3 id="帶回自主開發的-I-上鏈系統，省下外包費用"><a href="#帶回自主開發的-I-上鏈系統，省下外包費用" class="headerlink" title="帶回自主開發的 I 上鏈系統，省下外包費用"></a>帶回自主開發的 I 上鏈系統，省下外包費用</h3><p>為了節省成本，我們將原本要外包的 I 上鏈系統帶回自主開發，從而節省了公司大筆的費用與時間。<br>這項舉措不僅讓我們獲得了更多的控制權，還提升了整體效率。<br>此項目，粗估至少擁有 300 萬以上的產值。</p><h3 id="其他突破與調整"><a href="#其他突破與調整" class="headerlink" title="其他突破與調整"></a>其他突破與調整</h3><p>除了以上成果，我還做了以下貢獻：</p><ul><li>解決了公司 domain 數量達到上限的問題，通過與系統商的溝通，成功解除了限制。</li><li>幫助查找了未關閉的 AWS 資源，避免了資源的浪費。</li><li>調整了資安需求，提高了系統的安全性。</li><li>協助調解了系統與需求之間的衝突，確保了順利推進工作。</li><li>未來的發展計劃</li><li>為了持續推動工作的進步，我擬定了以下計劃：</li></ul><h3 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h3><ul><li>將預計外包的 P 系統帶回自主開發，進一步節省公司費用。粗估其價值為 110~800 萬之間。</li><li>積極招募人才，引進新血，提升團隊實力。</li><li>推進單雲轉多雲的轉型，增加靈活性與彈性。</li><li>針對資安問題進行調整，包括關閉公開 IP 和加密資料等措施。</li><li>處理舊系統 L 的大泥球，逐步優化系統結構，提高整體效率。</li></ul><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>整體而言，在短短三個月內，接手的專案已為公司撙節了 <code>150 萬</code> 左右的支出，<br>而在自動化工具，用一個粗略評估的方式，假設每周每個 RD 會部署 5 次，<br>一年 52 周，一次部署可以省下 10 分鐘的情況下，目前公司 5 位 RD:<br>5*5*52*10&#x3D; 13000 分鐘，大約可以省下 <code>1.25 個人月</code>，用來作更有意義的事。<br>而其它工作在長久看來也會持續帶來收益，整體而言，這三個月的產值已超過 <code>500 萬</code>。<br>希望在未來的日子裡，能夠持續取得進步，為公司的發展做出更大的貢獻。</p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;這份是 2023 年, 3 至 6 月間，我在工作上獲得的成果，&lt;br&gt;以理性務實的態度推動各項工作，以下是在這段時間內所取</summary>
      
    
    
    
    
    <category term="生活筆記" scheme="https://blog.marsen.me/tags/%E7%94%9F%E6%B4%BB%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] GitHub Actions：停用 save-state 和 set-output 命令的措施</title>
    <link href="https://blog.marsen.me/2023/07/14/2023/github_action_output_console_logs/"/>
    <id>https://blog.marsen.me/2023/07/14/2023/github_action_output_console_logs/</id>
    <published>2023-07-14T10:12:02.000Z</published>
    <updated>2023-12-16T14:52:33.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>GitHub Actions 是一個強大的自動化工作流程工具，可讓您在 GitHub 存儲庫中執行各種自動化任務。<br>它允許您根據事件觸發工作流程，例如提交代碼或創建拉取請求。<br>您可以使用預設的操作或自定義操作來建立工作流程，並將其用於自動化測試、部署、持續集成等開發流程。<br>GitHub Actions 提供了一個靈活、可擴展和可自訂的方式來增強您的開發工作流程。</p><p>而我實務上的情境是用來寫 Blog，並進行自動部署，而我注意到了一個警告訊息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: The `set-output` command is deprecated and will be disabled soon. Please upgrade to using Environment Files. For more information see: https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/</span><br></pre></td></tr></table></figure><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>在 Github 的官方 Blog 指出，自 CI Runner 版本 2.298.2 起，<br>如果用戶在使用 save-state 或 set-output 將開始發出警告。<br>並計劃在 2023 年 5 月 31 日完全禁用它們。<br>從 2023 年 6 月 1 日開始，使用 <code>save-state</code> 或 <code>set-output</code> 命令的工作流程將因錯誤而失敗。</p><h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><p>實際上根據 Github 觀測數據顯示，這些命令的使用率相當高。<br>考慮到受影響的客戶數量，而推遲了移除的時間。</p><h2 id="我的情況"><a href="#我的情況" class="headerlink" title="我的情況"></a>我的情況</h2><p>為什麼我會用到這值呢？看看我的 CD 部署檔</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Skip ...</span></span><br><span class="line"><span class="attr">step:</span></span><br><span class="line">  <span class="comment"># Deploy hexo blog website.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">deploy</span></span><br><span class="line">    <span class="attr">uses:</span> <span class="string">marsen/hexo-action@v1.0.8</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">      <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">the</span> <span class="string">output</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      echo &quot;$&#123;&#123; steps.deploy.outputs.notify &#125;&#125;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="comment">## Skip ...</span></span><br></pre></td></tr></table></figure><p>在我這裡有兩步驟，Deploy 　與 Get the output<br>Deploy 直接用了我的另一專案進行部署，內部的工作簡單的說明如下：</p><ol><li>用 Dockerfile 建立執行環境</li><li>拉取 Hexo Blog</li><li>執行相關指令 ex: <code>hexo g</code></li><li>部署完成印出成功訊息</li></ol><p>問題就出在這個第四步，在 Github Runner 啟動的 image 執行過程的輸出，<br>並不會顯示在 Action Steps 的 Output 資料之中。<br>所以在這個專案多作一步 <code>Get the output</code> 來印出這個訊息。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">the</span> <span class="string">output</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123; steps.deploy.outputs.notify &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>可以知道我們的訊息是放在 <code>steps.deploy.outputs.notify</code> 之中，<br>而原始接出資料的方式如下，這個作法即將被逃汰了(為了避免無意間的資訊外洩)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo ::set-output name=notify::&quot;Deploy complate.&quot;</span><br></pre></td></tr></table></figure><h2 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h2><p>如果官方 Blog 所說，你只要將 key-value 用以下的形式設定到環境變數 <code>$GITHUB_OUTPUT</code> 即可，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;&#123;key&#125;=&#123;value&#125;&quot; &gt;&gt; $GITHUB_OUTPUT</span><br></pre></td></tr></table></figure><p>舉例來說:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result=&quot;Deploy complate.&quot;</span><br><span class="line">echo &quot;notify=$result&quot; &gt;&gt; $GITHUB_OUTPUT</span><br></pre></td></tr></table></figure><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/">GitHub Actions: Deprecating save-state and set-output commands</a></li><li><a href="https://blog.marsen.me/2022/09/26/2022/Hexo_CICD/">[實作筆記] Hexo CI&#x2F;CD 設置</a></li><li><a href="https://blog.marsen.me/2022/09/26/2022/Hexo_CICD/">[實作筆記] Hexo CI 自動執行 ncu -u 更新相依套件</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;GitHub Actions 是一個強大的自動化工作流程工具，可讓您在 GitHub 存儲庫中執行各種自動化任務。&lt;br&gt;它</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[踩雷筆記] 移除 VM 外部 IP 後 GCS 檢查異常的問題</title>
    <link href="https://blog.marsen.me/2023/07/12/2023/gcp_vm_upload_file_to_gcs_answer_is_vpc_settings/"/>
    <id>https://blog.marsen.me/2023/07/12/2023/gcp_vm_upload_file_to_gcs_answer_is_vpc_settings/</id>
    <published>2023-07-12T09:57:23.000Z</published>
    <updated>2023-12-16T14:52:33.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>我們使用 GCP Compute Engine 建立 VM，並且配置了一個對外的 IP(External IP)，<br>同時設定了一個排程，定期將 VM 上產生的資料轉存到 GCS(Google Cloud Storage)，<br>我們主要使用的工具是 <code>gcloud</code> 並且在 VM 上設定了某個 Service Account，<br>並且一切運作順利。</p><p>某日因為資安考量我們移除了 VM 的 External IP，而搬檔到 GSC 的排程就異常了。<br>我們簡單使用以下指令作檢查</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud storage ls</span><br></pre></td></tr></table></figure><p>這個指令會列出我們 GCS 上的資源，<br>當 VM 有 External IP 時一切運作正常，而移除時會豪無回應。</p><h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>這裡只需要修改 GCP 的 VPC 設定，<br>選擇 subnet (ex:asia-east1，看你的 VM 在哪個 Zone)<br>啟用 Private Google access 為 On 然後存檔</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://stackoverflow.com/questions/54984713/how-to-read-from-a-storage-bucket-from-a-gce-vm-with-no-external-ip">How to read from a Storage bucket from a GCE VM with no External IP?</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;我們使用 GCP Compute Engine 建立 VM，並且配置了一個對外的 IP(External IP)，&lt;br&gt;同</summary>
      
    
    
    
    
    <category term="踩雷筆記" scheme="https://blog.marsen.me/tags/%E8%B8%A9%E9%9B%B7%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] GCP 使用 IAP 連線 VM</title>
    <link href="https://blog.marsen.me/2023/07/10/2023/gcp_iap_and_iam/"/>
    <id>https://blog.marsen.me/2023/07/10/2023/gcp_iap_and_iam/</id>
    <published>2023-07-10T08:23:19.000Z</published>
    <updated>2023-12-16T14:52:33.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="簡介-IAP（Identity-Aware-Proxy"><a href="#簡介-IAP（Identity-Aware-Proxy" class="headerlink" title="簡介 IAP（Identity-Aware Proxy"></a>簡介 IAP（Identity-Aware Proxy</h2><p>GCP 的 IAP（Identity-Aware Proxy）是一個身份驗證和授權服務，<br>用於保護和管理對 Google Cloud 資源的訪問。<br>它提供了對虛擬機器（VM）實例的安全連接和控制，並可用於 SSH、RDP 等流量的安全轉發(Forwarding)。</p><p>通過 IAP，我們可以實現零信任訪問模型，僅允許經過身份驗證和授權的用戶訪問資源，<br>並且可以根據用戶的身份和上下文進行細粒度的訪問控制。<br>這提高了資源的安全性並減少了潛在的安全風險。</p><h3 id="零信任訪問模型"><a href="#零信任訪問模型" class="headerlink" title="零信任訪問模型"></a>零信任訪問模型</h3><p>零信任訪問模型（Zero Trust Access Model）是一種安全設計方法，該方法不假設內部網絡是可信的，<br>並對每個訪問請求進行驗證和授權，無論該請求來自內部還是外部網絡。<br>在零信任模型中，所有訪問都需要通過驗證和授權，並且需要進一步的身份驗證和授權步驟，<br>以確定用戶是否具有訪問資源的權限，更多可以查看參考資料。</p><h3 id="比較-VPN-與-RDP"><a href="#比較-VPN-與-RDP" class="headerlink" title="比較 VPN 與 RDP"></a>比較 VPN 與 RDP</h3><p>其他常見的連線方式包括傳統的虛擬專用網絡（VPN）和遠程桌面協議（RDP），<br>它們通常用於在企業內部建立安全連接，但對於雲環境和遠程用戶來說，這些方法可能不夠靈活和安全。</p><p>IAP 提供了一個更強大和安全的連接方式。<br>它在零信任訪問模型下工作，通過驗證和授權機制確保只有經過驗證的用戶可以訪問資源。<br>以下是 IAP 的優勢：</p><ul><li>精確的身份驗證和授權：IAP 可以根據用戶的身份和上下文進行細粒度的訪問控制，僅允許授權的用戶訪問資源。</li><li>無需公開 IP 地址：IAP 通過提供 IAP 隧道和代理服務，不需要公開資源的實際 IP 地址，增強了安全性。</li><li>雲原生和易於使用：IAP 是 GCP 的原生服務，與其他 GCP 服務整合，易於設置和管理。</li></ul><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>客戶在 GCP 上部署了多台 VM，每個 VM 都有公開的外部 IP 地址，並允許開發者使用 SSH 進行連線。<br>這樣的設置存在著安全風險，也需要為這些公開的 IP 付出額外的成本。</p><p>為了提高安全性並解決這個問題，我們使用 GCP 的 IAP（Identity-Aware Proxy）。<br>透過 IAP，我可以實現更安全的連線方式，不需要使用 Public IP 。<br>IAP 提供了精確的身份驗證和授權，只有經過驗證的使用者才能訪問 VM。<br>這種設置符合零信任訪問模型，提高了資源的安全性，同時減少了潛在的安全風險。</p><h3 id="實務操作"><a href="#實務操作" class="headerlink" title="實務操作"></a>實務操作</h3><p>我有一台測試用的 VM <code>beta</code> 已經拔除了 public IP,</p><ol><li><p>首先啟用(enable) Cloud Identity-Aware Proxy API,「Security」-&gt;「Identity-Aware Proxy」</p></li><li><p>在 IAM &gt; Permissions 找到需要登入 VM 主機的帳戶加上「IAP-secured Tunnel User」這個角色</p></li><li><p>防火牆規則，IP Range: <code>35.235.240.0/20</code>, 開通指定的 Protocols and ports，比如我們要 SSH 連線，就開通 <code>tcp:22</code>，Targets 設為 <code>Specified targets tags</code> Target tags 為 <code>ingress-from-iap</code>,</p></li><li><p>需要登入 VM 加上 tag <code>ingress-from-iap</code></p></li><li><p>可以用以下語法測試連線</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud compute ssh beta --project=my-project --zone=asia-east1-c --troubleshoot --tunnel-through-iap</span><br></pre></td></tr></table></figure></blockquote></li><li><p>排除所有問題後嚐試連線</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud compute ssh beta --project=my-project --zone=asia-east1-c --tunnel-through-iap</span><br></pre></td></tr></table></figure></blockquote></li></ol><h3 id="補充說明"><a href="#補充說明" class="headerlink" title="補充說明"></a>補充說明</h3><ul><li>開發環境在連線時已經透過 <code>gcloud auth login</code> 取得權限了。</li><li>連線的目標主機仍然需要設定 SSH 金鑰</li><li><code>35.235.240.0/20</code> 是 GCP 中 IAP 使用的特定 IP 範圍，不可修改</li></ul><h4 id="20230711-補充"><a href="#20230711-補充" class="headerlink" title="20230711 補充"></a>20230711 補充</h4><p>透過 IAP 連線會出現　“Increasing the IAP TCP upload bandwidth”　的警告<br>可以參考<a href="https://cloud.google.com/iap/docs/using-tcp-forwarding#increasing_the_tcp_upload_bandwidth">官方文件</a></p><p>下載 Numpy</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(gcloud info --format=<span class="string">&quot;value(basic.python_location)&quot;</span>) -m pip install numpy</span></span><br></pre></td></tr></table></figure><p>設定環境變數</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CLOUDSDK_PYTHON_SITEPACKAGES=1</span><br></pre></td></tr></table></figure><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://cloud.google.com/iap/docs/concepts-overview">IAP Concepts Overview</a> ‘</li><li><a href="https://cloud.google.com/iap/docs/using-tcp-forwarding#preparing_your_project_for_tcp_forwarding">Preparing your project for IAP TCP forwarding</a></li><li><a href="https://www.webcomm.com.tw/blog/zero-trust-security-model/">新世代資安概念：零信任安全模型介紹(Zero Trust)</a></li><li><a href="https://www.cloudflare.com/zh-tw/learning/security/glossary/what-is-zero-trust/">Zero Trust 安全性 | 什麼是 Zero Trust 網路？</a></li><li><a href="https://joehuang-pop.github.io/2020/10/25/GCP-%E4%BD%A0%E9%82%84%E5%9C%A8%E7%94%A8VPN%E9%80%A3%E7%B7%9A%E5%97%8E%EF%BC%9F-%E5%BF%AB%E9%BB%9E%E8%A9%A6%E8%A9%A6Cloud-IAP%EF%BC%8C%E8%B3%87%E5%AE%89%E6%89%8B%E6%B3%95%E5%A4%A7%E9%96%8B%E5%85%AC-Giving-it-a-Try-to-let-Cloud-IAP-protect-your-system-%E4%B8%8A/">[GCP] 你還在用 VPN 連線嗎？ 快點試試 Cloud IAP，資安手法大開公 | Giving it a Try to let Cloud IAP protect your system (上)</a></li><li><a href="https://joehuang-pop.github.io/2020/10/25/GCP-%E7%B6%B2%E9%A0%81%E9%80%8F%E9%81%8ECloud-IAP%E4%BF%9D%E8%AD%B7-Giving-it-a-Try-to-let-Cloud-IAP-protect-your-system-%E4%B8%8B/">[GCP] 網頁透過 Cloud IAP 保護 | Giving it a Try to let Cloud IAP protect your system (下)</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;簡介-IAP（Identity-Aware-Proxy&quot;&gt;&lt;a href=&quot;#簡介-IAP（Identity-Aware-Proxy&quot; class=&quot;headerlink&quot; title=&quot;簡介 IAP（Identity-Aware Proxy&quot;&gt;&lt;/a&gt;簡介 IA</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] MongoDB 解決方案評估-- Mongo Atlas</title>
    <link href="https://blog.marsen.me/2023/06/27/2023/mongo_atlas_peering_gcp_vpc/"/>
    <id>https://blog.marsen.me/2023/06/27/2023/mongo_atlas_peering_gcp_vpc/</id>
    <published>2023-06-27T10:19:33.000Z</published>
    <updated>2023-12-16T14:52:33.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>最近在 VM 部署了 MongoDB, 不知道為什麼同事在 QA 與正式環境採取了兩個不同的作法，<br>因此產生了一些版本不一致的問題。<br>為此需要更換 MongoDB 版本，進而有一些討論，　　<br>決策的考量主要有兩個面向，一、維運的成本。二、實際應付的帳務成本。<br>可行的方案比較如下，</p><ul><li>VM 部署 MongoDB<ul><li>GCP</li><li>Azure</li><li>Other Cloud …</li></ul></li><li>Mongo Atlas(Start from GCP Marketing)<ul><li>GCP VM with MongoDB(Pay as You Go)</li><li>Azure VM with MongoDB</li></ul></li><li>Azure CosmosDB</li></ul><h2 id="實作隨筆：Mongo-Atlas-Start-from-GCP-Marketing"><a href="#實作隨筆：Mongo-Atlas-Start-from-GCP-Marketing" class="headerlink" title="實作隨筆：Mongo Atlas(Start from GCP Marketing)"></a>實作隨筆：Mongo Atlas(Start from GCP Marketing)</h2><h3 id="測試規劃"><a href="#測試規劃" class="headerlink" title="測試規劃"></a>測試規劃</h3><p><img src="/../../images/2023/mongo_atlas_test_infra.png" alt="mongo atlas 連線的測試架構"></p><p>如圖，為了不影響原有的環境，我打算建一組新的 VPC Network 進行實驗，<br>並在這個網路中建立一台實體的 VM 機器，待 Mongo Atlas 設定完成後，<br>進行連線的測試。</p><p>測試的方法，由於 MongoDB Atlas 採用一種安全性較高的連線政策，<br>必需使用以下連線集群的三種方式才可以連到資料庫:<br>第一種，IP Access List，使用 GUI 建立 Cluster 的當下會自動加入一組你所在網路對外的 IP，<br>如果不是固定 IP 可能會有問題<br>第二種，Peering ，要付錢的版本 M10 以上才可用，也是我們這次實作的重點目標<br>最後一種，Create a Private Endpoint，也是<br>M10 以上才可用，但是不是我們這次的主要實作項目，所以不過多的展開。</p><h3 id="從-GCP-Marketing-建立-Mongo-Atlas"><a href="#從-GCP-Marketing-建立-Mongo-Atlas" class="headerlink" title="從 GCP Marketing 建立 Mongo Atlas"></a>從 GCP Marketing 建立 Mongo Atlas</h3><p>在 GCP 的 Marketing 搜尋並訂閱 Mongo Atlas 後點擊 <code>MANAGE ON PROVIDER</code><br>在 Mongo Atlas 建立 Cluster，也可以建立 Project 與 User 作更細緻的管控。<br>這時候可以到 Network Access 查看 IP Access List 的清單，應該會有你網路上設定的對外 IP,<br>這個流程是自動化的，但是我個人認為不是固定 IP 的話可能會有問題，如果有人可以給我一些提點會十分感激。</p><p><img src="/../../images/2023/mongo_atlas_ip_access_list.png" alt="IP Access List"></p><h3 id="建立-VM"><a href="#建立-VM" class="headerlink" title="建立 VM"></a>建立 VM</h3><p><a href="https://cloud.google.com/compute/docs/instances/create-start-instance">GCP 建立 VM</a> 是十分簡單的，就不多作說明。<br>同時記得安裝我們的<a href="https://www.mongodb.com/docs/mongodb-shell/install/">測試工具 - mongosh</a></p><h3 id="Mongo-DB-相關"><a href="#Mongo-DB-相關" class="headerlink" title="Mongo DB 相關"></a>Mongo DB 相關</h3><h4 id="切換-db"><a href="#切換-db" class="headerlink" title="切換 db"></a>切換 db</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mydb</span><br></pre></td></tr></table></figure><h4 id="查詢目前-DB-狀態"><a href="#查詢目前-DB-狀態" class="headerlink" title="查詢目前 DB 狀態"></a>查詢目前 DB 狀態</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.status()</span><br></pre></td></tr></table></figure><h4 id="Create-User"><a href="#Create-User" class="headerlink" title="Create User"></a>Create User</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123; <span class="keyword">user</span>: &quot;username&quot;, pwd: &quot;password&quot;, roles: [&#123; role: &quot;roleName&quot;, db: &quot;databaseName&quot; &#125;] &#125;);</span><br></pre></td></tr></table></figure><h4 id="Drop-User"><a href="#Drop-User" class="headerlink" title="Drop User"></a>Drop User</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropUser(&quot;username&quot;);</span><br></pre></td></tr></table></figure><h4 id="查詢-User"><a href="#查詢-User" class="headerlink" title="查詢 User"></a>查詢 User</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getUsers()</span><br></pre></td></tr></table></figure><h4 id="User-加入角色"><a href="#User-加入角色" class="headerlink" title="User 加入角色"></a>User 加入角色</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.grantRolesToUser(&quot;username&quot;, [&#123; role: &quot;readWriteAnyDatabase&quot;, db: &quot;mydb&quot; &#125;])</span><br></pre></td></tr></table></figure><h4 id="User-移除角色"><a href="#User-移除角色" class="headerlink" title="User 移除角色"></a>User 移除角色</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.revokeRolesFromUser(&quot;usernmae&quot;, [&#123; role: &quot;readWrite&quot;, db: &quot;admin&quot; &#125;])</span><br></pre></td></tr></table></figure><h3 id="前置作業-GCP-VPC-與-Firewall-Rules-設定"><a href="#前置作業-GCP-VPC-與-Firewall-Rules-設定" class="headerlink" title="前置作業: GCP VPC 與 Firewall Rules 設定"></a>前置作業: GCP VPC 與 Firewall Rules 設定</h3><p>為了避免影響原有的系統，<br>建立 GCP 一組新的 VPC Network : <code>vpc-lab</code>，一般來說 GCP 的專案會有自動建立一組 <code>default</code> VPC Network，<br>而 <code>default</code> VPC Network 會預設建立以下的防火牆規則</p><ul><li>default-allow-icmp – 允許來自任何來源對所有網路 IP 進行存取。ICMP 協議主要用於對目標進行 ping 測試。</li><li>default-allow-internal – 允許在任何埠口上的實例之間建立連接。</li><li>default-allow-rdp – 允許從任何來源連接到 Windows 伺服器的 RDP 會話。</li><li>default-allow-ssh – 允許從任何來源連接到 UNIX 伺服器的 SSH 會話。</li></ul><p>與此對應，我也建立相同的規則給<code>vpc-lab</code>，如下:</p><ul><li>vpc-lab-allow-icmp</li><li>vpc-lab-allow-internal</li><li>vpc-lab-allow-rdp</li><li>vpc-lab-allow-ssh</li></ul><p>可以用以下的語法測試一下網路是否能連，如果可以連線再進行 mongodb connection 的測試</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping &#123;ip address&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet &#123;ip address&#125; &#123;port&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -zv &#123;ip address&#125;</span><br></pre></td></tr></table></figure><h3 id="測試連線用的語法"><a href="#測試連線用的語法" class="headerlink" title="測試連線用的語法"></a>測試連線用的語法</h3><p>如果網路測試沒有問題，再進行 mongodb 的連線，由於目前沒有設定 Peering 連線，<br>所以在開發機上可以(網路環境需要在 IP Access List 內)，而使用 GCP VM 會無法連線，<br>開發機連線 GCP MongoDB 語法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongosh mongodb://&#123;user:pwd&#125;@&#123;mongodb_ip&#125;:27017/my_db</span><br></pre></td></tr></table></figure><p>開發機連線 MongoDB Atlas 語法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongosh mongodb+srv://&#123;user:pwd&#125;@&#123;atlas_cluster_name&#125;.mongodb.net/my_db</span><br></pre></td></tr></table></figure><h3 id="Peering-實作"><a href="#Peering-實作" class="headerlink" title="Peering 實作"></a>Peering 實作</h3><p>首先需要在 Mongo Atlas 進行設定，<br>Network Access &gt; Peering &gt; Add Peering Connection<br>在 Cloud Provider 中選擇 GCP，</p><p><img src="/../../images/2023/mongo_atlas_settings.png" alt="Mongo Atlas Setting"></p><p>設定 Project ID、VPC Name 與 Atlas CIDR，<br>比較特殊的是 Atlas CIDR 在 GUI 的說明是</p><blockquote><p>An Atlas GCP CIDR block must be a &#x2F;18 or larger.<br>You cannot modify the CIDR block if you have an existing cluster.</p></blockquote><p><strong>但我遇到的狀況是，無法修改預設值為 <code>192.168.0.0/16</code></strong><br>建立後會產生一組 Peering 的資料，請記住 Atlas GCP Project ID 與 Atlas VPC Name</p><p><img src="/../../images/2023/mongo_atlas_peering.png" alt="Mongo Atlas Peering"></p><p>接下來到 GCP &gt; VPC Network &gt; GCP Network Peering 選擇 Create peering connection<br>在 Peered VPC network 中選擇 Other Project，並填入上面的 Atlas GCP Project ID 與 Atlas VPC Name</p><p>大概等待一下子就會生效了(網路上寫 10 分鐘，實測不到 3 分鐘)</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.mongodb.com/docs/atlas/security-vpc-peering/">Set Up a Network Peering Connection</a></li><li><a href="https://blog.cloud-ace.tw/database/gcp-mongodb-atlas/">在 GCP 中使用 MongoDB Atlas 服務</a></li><li><a href="https://geekflare.com/gcp-firewall-configuration/">How to Configure Firewall Rules in Google Cloud Platform(GCP)</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;最近在 VM 部署了 MongoDB, 不知道為什麼同事在 QA 與正式環境採取了兩個不同的作法，&lt;br&gt;因此產生了一些版本</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] RWD 設計與 100vh 在行動裝置瀏覽器上的誤區</title>
    <link href="https://blog.marsen.me/2023/06/15/2023/100vh_problem_with_rwd/"/>
    <id>https://blog.marsen.me/2023/06/15/2023/100vh_problem_with_rwd/</id>
    <published>2023-06-15T09:05:57.000Z</published>
    <updated>2023-12-16T14:52:33.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>參考圖片</p><p><img src="/images/2023/100vh_rwd.png" alt="RWD 設計與 100vh 在行動裝置瀏覽器上的誤區"></p><p>我的網頁有作 RWD 的設計，需求大概是這樣，<br>綠色是在網頁底部懸浮的選單功能，<br>紅色區塊是一個控制面版，許多的功能、按鈕、連結都設定在上面。</p><p>我最一開始的設定方法如下，</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">height</span>: <span class="number">100vh</span>;</span><br></pre></td></tr></table></figure><p>在瀏覽器上使用模擬器顯示正常，但是在手機上就會出現異常<br>主要是手機上的 Chrome 和 Firefox 瀏覽器通常在頂部有一個 UI（例如導覽列及網址列等）　　<br>而 Safari 更不同網址列在底部，這使得情況變得更加棘手。<br>不同的瀏覽器擁有不同大小的視窗，手機會計算瀏覽器視窗為（頂部工具列 + 文件 + 底部工具列）&#x3D; 100vh。<br>使用 100vh 將整個文件填充到頁面上時可能導致顯示問題，因為內容可能超出視窗範圍或被遮擋。<br>因此，在移動設備上進行響應式設計時，應該避免使用 100vh 單位。</p><h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>解決的方法有好幾種，</p><h3 id="JS-計算"><a href="#JS-計算" class="headerlink" title="JS 計算"></a>JS 計算</h3><p>使用 JavaScript 監聽事件，動態計算高度，缺點是效能較差，在主流的框架(EX:React)要小心觸發重新渲染的行為</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">documentHeight</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"> <span class="keyword">const</span> doc = <span class="variable language_">document</span>.<span class="property">documentElement</span></span><br><span class="line"> doc.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;--doc-height&#x27;</span>, <span class="string">`<span class="subst">$&#123;<span class="variable language_">window</span>.innerHeight&#125;</span>px`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(‘resize’, documentHeight)</span><br><span class="line"><span class="title function_">documentHeight</span>()</span><br></pre></td></tr></table></figure><h3 id="CSS-變數"><a href="#CSS-變數" class="headerlink" title="CSS 變數"></a>CSS 變數</h3><p>使用 CSS 變數</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--doc-height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>; <span class="comment">/* fallback for Js load */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">var</span>(--doc-height);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="min-height-與-overflow-y"><a href="#min-height-與-overflow-y" class="headerlink" title="min-height 與 overflow-y"></a>min-height 與 overflow-y</h3><p>留言有人提到使用<code>min-height</code> 與 <code>overflow-y</code><br>但我的情境不適合，而且這個作法會產生捲軸</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line"><span class="attribute">overflow-y</span>: scroll;</span><br></pre></td></tr></table></figure><p>進一步依照不同的使用情境也許我們需要 <code>@supports</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@supports</span> (<span class="attribute">-moz-appearance</span>: meterbar) &#123;</span><br><span class="line">  <span class="comment">/* We&#x27;re on Mozilla! */</span></span><br><span class="line">  <span class="attribute">min-height</span>: <span class="built_in">calc</span>(<span class="number">100vh</span> - <span class="number">20px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或是 Browser Hacks 的手法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-ms-high-contrast</span>: active), (<span class="attribute">-ms-high-contrast</span>: none) &#123;</span><br><span class="line">  <span class="comment">/* We are on Internet Explorer! */</span></span><br><span class="line">  <span class="attribute">min-height</span>: <span class="built_in">calc</span>(<span class="number">100vh</span> - <span class="number">10px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="position-fixed-的作法"><a href="#position-fixed-的作法" class="headerlink" title="position:fixed 的作法"></a>position:fixed 的作法</h3><p>下面的方法可以將元素固定在畫面底部</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>: fixed;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>這是我最後選擇的方法，原文的討論相當精彩有趣，<br>但是我需要的其實是置底，而不是捲軸。<br>順帶一提我的專是基於 vue 與 tailwindcss，所以下面是 vue 與 tailwindcss 的寫法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;fixed bottom-0 top-0&quot;&gt;</span><br><span class="line">  &lt;!--HERE THE FEATURES--&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://dev.to/nirazanbasnet/dont-use-100vh-for-mobile-responsive-3o97">Don’t use 100vh for mobile responsive</a></li><li><a href="https://tools.wingzero.tw/article/sn/1463">解決手機瀏覽器(Chrome, Safari) 上設定 100vh 但會被導覽列及網址列遮掉的問題</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;參考圖片&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2023/100vh_rwd.png&quot; alt=&quot;RWD 設計與</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] 管理 Linux 主機與 GCP VM 的磁碟</title>
    <link href="https://blog.marsen.me/2023/06/09/2023/disk_space_management:_tips_for_linux_hosts_and_gcp_vms/"/>
    <id>https://blog.marsen.me/2023/06/09/2023/disk_space_management:_tips_for_linux_hosts_and_gcp_vms/</id>
    <published>2023-06-09T06:04:02.000Z</published>
    <updated>2023-12-16T14:52:33.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>在 GCP VM 上建立的 GitLab Runner 空間不足，導致執行失敗。<br>我們需要確保 GitLab Runner 有足夠的存儲空間來運行 CI 的 Jobs 。<br>有兩個解決方案可供選擇：<br>一、是清理磁碟空間<br>透過清理磁碟空間，可以移除不需要的文件和暫存資料，釋放寶貴的儲存空間。<br>二、是擴展磁碟空間<br>而擴展磁碟空間則是增加磁碟的容量，讓 GitLab Runner 可以持續運行而不受空間限制。<br>根據具體情況，可以選擇其中一種或兩種方案來解決空間不足的問題</p><h2 id="第一部分：查詢與清理磁碟空間"><a href="#第一部分：查詢與清理磁碟空間" class="headerlink" title="第一部分：查詢與清理磁碟空間"></a>第一部分：查詢與清理磁碟空間</h2><p>要查詢 Linux 主機的磁碟空間，可以使用 df 命令。下面是使用 df 命令查詢磁碟空間的語法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure><p>這將顯示磁碟空間的使用情況，包括每個檔案系統的大小、已使用的空間、可用的空間以及使用百分比。<br>要查詢特定目錄或資料夾的磁碟使用情況，可以使用 du 命令。以下是使用 du 命令查詢磁碟使用情況的語法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> -h --max-depth=1 /path/to/directory</span><br></pre></td></tr></table></figure><p>這將顯示指定目錄或資料夾的磁碟使用情況，並以人類可讀的格式顯示結果。<br>可以查詢到一些 cache 或是 log 如果沒有必要的話，可以將之刪除。</p><p>要清除 Docker 的磁碟空間，可以使用以下語法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system prune -f</span><br></pre></td></tr></table></figure><h2 id="第二部分：擴展-GCP-VM-的磁碟空間"><a href="#第二部分：擴展-GCP-VM-的磁碟空間" class="headerlink" title="第二部分：擴展 GCP VM 的磁碟空間"></a>第二部分：擴展 GCP VM 的磁碟空間</h2><p>要在 GCP VM 上垂直擴展 boot 磁碟空間，可以按照以下步驟進行操作：</p><p>在 GCP 控制台上，找到並選擇要擴展的 VM 實例。</p><ul><li>停止 VM:前往 VM instances 找到要停止的 VM，勾選後 STOP</li><li>調整:前往 Disks，找到要 VM instances 所用的 Disk，點擊 Edit 後增加磁碟的大小。</li><li>啟動 VM 實例。</li></ul><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>無論是清理磁碟空間還是擴展磁碟空間，都是為了讓我能確保足夠的空間供 GitLab Runner 使用，<br>確保順利運行 CI Jobs！</p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;在 GCP VM 上建立的 GitLab Runner 空間不足，導致執行失敗。&lt;br&gt;我們需要確保 GitLab Runn</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
</feed>
