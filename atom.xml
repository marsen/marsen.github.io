<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Marsen&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/c2458ad941ad5f8ca05b12c705fd4912</icon>
  <subtitle>waiting to load</subtitle>
  <link href="https://blog.marsen.me/atom.xml" rel="self"/>
  
  <link href="https://blog.marsen.me/"/>
  <updated>2024-06-23T15:25:45.172Z</updated>
  <id>https://blog.marsen.me/</id>
  
  <author>
    <name>Marsen L.</name>
    <email>admin@marsen.me</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[生活筆記] 2024 常用工具整理</title>
    <link href="https://blog.marsen.me/2024/06/14/2024/my_tools_2024/"/>
    <id>https://blog.marsen.me/2024/06/14/2024/my_tools_2024/</id>
    <published>2024-06-14T08:51:41.000Z</published>
    <updated>2024-06-23T15:25:45.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="輸入法"><a href="#輸入法" class="headerlink" title="輸入法"></a>輸入法</h2><ul><li>無蝦米 (加速打字，未來不太看好，考慮更換中…)</li></ul><h2 id="網站"><a href="#網站" class="headerlink" title="網站"></a>網站</h2><ul><li><a href="https://trends.google.com/trends/">Google Trends 技術趨勢比較</a></li><li>JSON 相關處理工具<ul><li><a href="https://jsonformatter.curiousconcept.com/">用來除錯：找到 JSON 格式不合的地方</a></li><li><a href="https://jsonformatter.org/">美化、壓縮、轉換、編碼</a></li><li><a href="https://json2csharp.com/">轉換成不同語言或格式</a></li><li><a href="https://www.jsonquerytool.com/">測試 JSON Query 怎麼寫</a></li><li><a href="https://www.jsondiff.com/">比較 JSON</a></li></ul></li><li><a href="https://www.yamllint.com/">Yaml 格式檢查器</a></li><li><a href="https://sqlformat.org/">SQL Format 檢查器</a></li><li>假文產生器<ul><li><a href="http://www.richyli.com/tool/loremipsum/">中文</a></li><li><a href="https://www.lipsum.com/feed/html">英文</a></li></ul></li><li><a href="https://comparetext.io/">文字比較</a></li><li>AI　文生文<ul><li><a href="https://chat.openai.com/">ChatGPT</a></li><li><a href="https://claude.ai/">Claude</a></li><li><a href="https://www.bing.com/images/create">Bing Image Create</a></li></ul></li><li>電子白板<ul><li><a href="https://miro.com/">Miro</a></li></ul></li><li>心智圖<ul><li><a href="https://whimsical.com/">whimsical</a></li></ul></li></ul><h2 id="資訊收集-廢文發佈-社群媒體"><a href="#資訊收集-廢文發佈-社群媒體" class="headerlink" title="資訊收集&#x2F;廢文發佈&#x2F;社群媒體"></a>資訊收集&#x2F;廢文發佈&#x2F;社群媒體</h2><ul><li><a href="https://zh-tw.facebook.com/">Facebook</a></li><li><a href="https://www.explainthis.io/zh-hant">Explain this</a></li></ul><h3 id="觀察名單-待汰換"><a href="#觀察名單-待汰換" class="headerlink" title="觀察名單(待汰換)"></a>觀察名單(待汰換)</h3><ul><li><a href="https://www.slant.co/">Slant 工具比較</a></li><li>文字比較工具 - Win Merge(Window限定)</li><li>Evernote<ul><li>專案分類</li><li>職涯規劃</li><li>已完成的項目</li></ul></li></ul><h2 id="Macbook-工具"><a href="#Macbook-工具" class="headerlink" title="Macbook 工具"></a>Macbook 工具</h2><ul><li>Git GUI<ul><li>Fork</li></ul></li><li>KeyCastr<ul><li>顯示鍵盤點擊歷程</li></ul></li><li>跨 PC 存放檔案<ul><li>Dropbox</li></ul></li><li>截圖錄影工具<ul><li>QuickTime</li></ul></li><li>Terminal<ul><li>iTerm</li><li><a href="https://www.warp.dev/">Warp</a></li></ul></li></ul><h2 id="筆記工具"><a href="#筆記工具" class="headerlink" title="筆記工具"></a>筆記工具</h2><ul><li><a href="https://www.notion.so/">Notion</a><ul><li>GTD</li><li>周記劃</li></ul></li><li><a href="https://hackmd.io/">HackMD</a><ul><li>暫存的記錄</li><li>會議&#x2F;社群活動即時記錄</li><li>Blog 草稿</li><li>共筆</li></ul></li><li><a href="https://marsen.me/">Blog</a><ul><li>技術實作記錄</li><li>社群活動記錄</li></ul></li><li><a href="https://notebooklm.google.com/">NotebookLM</a><ul><li>RAG AI 整合筆記</li></ul></li></ul><h2 id="瀏覽器-外掛"><a href="#瀏覽器-外掛" class="headerlink" title="瀏覽器 &amp; 外掛"></a>瀏覽器 &amp; 外掛</h2><p>都使用 Chromium 內核相關</p><ul><li>Brave</li><li>Chrome</li><li>Edge</li><li>FireFox</li><li>Arc 觀察中</li></ul><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><ul><li>tampermonkey<ul><li>撰寫網頁小工具</li></ul></li><li>One Tab<ul><li>快速收攏大量分頁，常用在特殊主題搜尋的暫存</li></ul></li><li>Trancy<ul><li>沉浸式翻譯與影片翻譯</li></ul></li><li>Bitbucket Diff Tree<ul><li>Bitbucket PR 差異比較</li></ul></li><li>JSONView<ul><li>當 response 為 json 時更為好讀</li></ul></li><li>Bitwarden<ul><li>密碼管理</li></ul></li><li>Wappalyzer<ul><li>分析網站使用的框架與技術</li></ul></li><li>cVim<ul><li>使用 Vim 的習慣操作網頁</li></ul></li></ul><h2 id="開發工具"><a href="#開發工具" class="headerlink" title="開發工具"></a>開發工具</h2><ul><li>Vim</li><li>VSCode</li><li>JetBrain 全系列</li><li>Docker Desktop</li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;輸入法&quot;&gt;&lt;a href=&quot;#輸入法&quot; class=&quot;headerlink&quot; title=&quot;輸入法&quot;&gt;&lt;/a&gt;輸入法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;無蝦米 (加速打字，未來不太看好，考慮更換中…)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;網站&quot;&gt;&lt;a href=&quot;#網站</summary>
      
    
    
    
    
    <category term="生活筆記" scheme="https://blog.marsen.me/tags/%E7%94%9F%E6%B4%BB%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] Azure Communication Services email</title>
    <link href="https://blog.marsen.me/2024/06/07/2024/azure_email_communication_service/"/>
    <id>https://blog.marsen.me/2024/06/07/2024/azure_email_communication_service/</id>
    <published>2024-06-07T09:58:53.000Z</published>
    <updated>2024-06-23T15:25:45.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>隨著現代企業在數位轉型中的步伐加快，電子郵件仍然是最重要的溝通工具之一。<br>公司現在的寄信服務採取了一個特別的解決方案，透過 App registrations 進行郵件發送。<br>實作的細節不展開，但這樣作有幾個問題:  </p><ul><li>App registrations 首次需人工授權取得 refresh_token</li><li>有了 refresh_token 仍需交換到 access_token 才能寄信</li><li>更新 refresh_token 失敗時，就需要人工重新介入</li></ul><p>而 Microsoft Azure 提供了強大的 Email Communication Service，可以幫助企業輕鬆、有效地發送大量電子郵件。<br>優點有整合簡單、高可擴展、安全性高、可靠性強等等優點…  </p><p>本篇文章將記錄我如何在 Azure 中實作 Email Communication Service。</p><h2 id="實作步驟"><a href="#實作步驟" class="headerlink" title="實作步驟"></a>實作步驟</h2><ol><li><p>建立 Azure Communication Services 資源<br>  首先，登入 Azure 入口網站，然後依序進行以下步驟：<br>  點選「建立資源」按鈕，搜尋並選擇「Communication Services」。<br>  點選「建立」按鈕，填寫必要的資訊如資源名稱、訂閱和資源群組等。<br>  選擇地區並設定其餘選項後，點選「檢閱 + 建立」，檢查設定並點選「建立」。  </p></li><li><p>配置電子郵件通道<br>  在 Communication Services 資源建立完成後，需要進行電子郵件通道的配置：<br>  在資源概覽頁面中，找到並點選「Email」。<br>  點選「新增郵件域」，並按照提示設定 SMTP 資訊及其他相關設定。<br>  驗證郵件域並完成配置。<br>  <em>這裡你需要有 domain 管理者的權限，用來在 DNS Records 建立相關的記錄(CNAME、TXT)</em></p></li><li><p>生成 API 金鑰<br>  接下來，我們需要生成 API 金鑰，以便應用程式能夠通過此金鑰進行認證和發送電子郵件：<br>  在 Communication Services 資源頁面中，找到並點選「密鑰」。<br>  點選「生成&#x2F;管理密鑰」，生成新的 API 金鑰並保存。</p></li><li><p>發送電子郵件<br>  有了 API 金鑰和配置好的電子郵件通道，現在可以使用 Azure 提供的 SDK 或 REST API 發送電子郵件。<br>  以下範例展示了如何使用 Nodejs 發送郵件：</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">EmailClient</span>, type <span class="title class_">EmailMessage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@azure/communication-email&#x27;</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">sendMail = <span class="keyword">async</span> (<span class="attr">req</span>: <span class="title class_">Request</span>, <span class="attr">res</span>: <span class="title class_">Response</span>): <span class="title class_">Promise</span>&lt;<span class="keyword">void</span>&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> connectionString = <span class="title function_">env</span>(<span class="string">&#x27;COMMUNICATION_SERVICES_CONNECTION_STRING&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> senderAddress = <span class="title function_">env</span>(<span class="string">&#x27;EMAIL_SENDER_ADDRESS&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> client = <span class="keyword">new</span> <span class="title class_">EmailClient</span>(connectionString)</span><br><span class="line">  <span class="keyword">const</span> &#123; to, subject, html &#125; = req.<span class="property">body</span></span><br><span class="line">  <span class="keyword">const</span> attachments = (req.<span class="property">files</span> != <span class="literal">null</span>)</span><br><span class="line">    ? (req.<span class="property">files</span> <span class="keyword">as</span> <span class="title class_">Express</span>.<span class="property">Multer</span>.<span class="property">File</span>[]).<span class="title function_">map</span>(<span class="function"><span class="params">file</span> =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">name</span>: file.<span class="property">originalname</span>,</span><br><span class="line">        <span class="attr">contentType</span>: file.<span class="property">mimetype</span>,</span><br><span class="line">        <span class="attr">contentInBase64</span>: file.<span class="property">buffer</span>.<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">      &#125;))</span><br><span class="line">    : []</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">emailMessage</span>: <span class="title class_">EmailMessage</span> = &#123;</span><br><span class="line">    senderAddress,</span><br><span class="line">    <span class="attr">content</span>: &#123;</span><br><span class="line">      subject,</span><br><span class="line">      html</span><br><span class="line">    &#125;,</span><br><span class="line">    attachments,</span><br><span class="line">    <span class="attr">recipients</span>: &#123;</span><br><span class="line">      <span class="attr">to</span>: [&#123; <span class="attr">address</span>: to &#125;],</span><br><span class="line">      <span class="attr">bcc</span>: [&#123; <span class="attr">address</span>: <span class="string">&#x27;noreply@marsen.me&#x27;</span> &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> poller = <span class="keyword">await</span> client.<span class="title function_">beginSend</span>(emailMessage)</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> poller.<span class="title function_">pollUntilDone</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;result:&#x27;</span>, result)</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">`Email <span class="subst">$&#123;subject&#125;</span> Sent!`</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在-Azure-Portal-執行整合測試"><a href="#在-Azure-Portal-執行整合測試" class="headerlink" title="在 Azure Portal 執行整合測試"></a>在 Azure Portal 執行整合測試</h3><p>在 Azure Portal &gt; Communication Service &gt; Email &gt; Try Email，<br>非常貼心的提供了 C#、JavaScript、Java、Python、cUrl　的範本，<br>也可以取得連線字串。</p><h3 id="使用上限與新增寄件帳號"><a href="#使用上限與新增寄件帳號" class="headerlink" title="使用上限與新增寄件帳號"></a>使用上限與新增寄件帳號</h3><p>原則上預設的使用量對開發人員來說，是非常足夠的<br>但是如果想增加上限，或是新增其它的寄件者帳號，需要開 support ticket 進行升級，<br>這是為了避免郵件的濫用，另外需新增 MX Record 可以避免當成垃圾郵件。<br>升級後就可以在 Azure Portal &gt; Email Communication Service &gt; Provision domains &gt; MailFrom addresses<br>新增寄件者，實際上 Azure Communication Service 只會寄件無法收件，<br>即使在 O365 有相同的帳號，在寄件備份中也看不到透過 ECS 寄出的郵件。　　</p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>實作上比較有風險大概是 DNS Records 的設定，最久大約需等到 1 小時生效。<br>而開發上非常的容易，甚至程式範例都整合到 Portal，非常方便。 　<br>但是其它方面需要開票等待 Azure 協力升級與設定，就會比較麻煩。 　</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://learn.microsoft.com/en-us/azure/communication-services/concepts/email/email-overview">Overview of Azure Communication Services email</a></li><li><a href="https://learn.microsoft.com/en-us/azure/communication-services/quickstarts/create-communication-resource?tabs=windows&pivots=platform-azp">Quickstart: Create and manage Communication Services resources</a></li><li><a href="https://learn.microsoft.com/en-us/azure/communication-services/concepts/email/email-quota-increase">Quota increase for email domains</a></li><li><a href="https://azure.microsoft.com/en-us/support/create-ticket/">Create Support Ticket</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;隨著現代企業在數位轉型中的步伐加快，電子郵件仍然是最重要的溝通工具之一。&lt;br&gt;公司現在的寄信服務採取了一個特別的解決方案，</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [踩雷筆記] Gitlab CI/CD 與 GCP - 靜態網站部署整合 404 與 `/`</title>
    <link href="https://blog.marsen.me/2024/05/14/2024/gitlab_ci_and_gcs_as_static_site/"/>
    <id>https://blog.marsen.me/2024/05/14/2024/gitlab_ci_and_gcs_as_static_site/</id>
    <published>2024-05-14T03:42:53.000Z</published>
    <updated>2024-06-23T15:25:45.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>最近將公司的所有靜態網站轉換到 GCS 上了，遇到一些情境，特此記錄<br>這篇會以 Vue 與 Nuxt 的角度出發。<br>在前後端分離的情況下，SEO 變成一個問題，SSR 可以解決這個問題，<br>我們可以使用 Nuxt 建立我們的專案，並透過 <code>generate</code> 生成靜態檔案。</p><p>再進一步來說，我們可以整合 <a href="https://cloud.google.com/storage/docs/hosting-static-website">GCS 進行靜態網站的部署</a></p><h3 id="題外話"><a href="#題外話" class="headerlink" title="題外話"></a>題外話</h3><p>Nuxt 的幾種建置方式</p><ol><li><p><code>npx nuxt build</code><br>  The build command creates a .output directory with all your application, server and dependencies ready for production.<br>  這個命令會建立一個 .output 目錄，裡面包含了你的應用程式、伺服器和所有必要的依賴，準備好用於生產環境。<br>  預設的行為，可以實作 SSR(Server Side Render)，適用有 SEO 需求，且變化快速的網站，Ex: 電商產品頁</p></li><li><p><code>npx nuxt build --prerender</code><br>  –prerenderfalsePre-render every route of your application. (note: This is an experimental flag. The behavior might be changed.) .<br>  –prerender false 會對應用程式的每個路由進行預渲染。（注意：這是一個實驗性的標誌。行為可能會更改。）；<br>  它會先產生好 HTML，適合 SSG 網站(內容不常改動，但有 SEO 需求）。Ex: BLOG</p></li><li><p><code>npx nuxt generate </code></p></li></ol><p>  The generate command pre-renders every route of your application and stores the result in plain HTML files that you can deploy on any static hosting services. The command triggers the nuxi build command with the prerender argument set to true<br>  這個命令會對你的應用程式的每個路由進行預渲染，並將結果存儲在普通的 HTML 文件中，你可以部署到任何靜態托管服務上。　　<br>  該命令會觸發 nuxi build 命令，並將 prerender 參數設置為 true。<br>  它適合純靜態的網頁(SPA)。Ex: Landing Page.　與前者最大的差異是，前者會建置成不同的 HTML，</p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>當我們在建置好靜態網站並部署到 GCS 上時，我遇到了一個異常的問題，<br>當我複製貼上網址時會發生 404 Not Found，主因是當我的網址結尾不是<code>/</code>時，<br>瀏覽器會轉導到 <code>/index.html</code>。<br>舉例說明:</p><p><code>https://marsen.me/sample</code> 複製貼上，會轉導到 <code>https://marsen.me/sample/index.html</code><br>而這頁不存在，導致產生 404 的錯誤</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>採取升級 Nuxt 到 <a href="https://github.com/nuxt/nuxt/releases/tag/v3.8.0">v3.8.0</a> 以上，<br>這是實驗性的功能，雖然目前有效，仍需觀注未來更新的狀況。<br>若不打算升級，另外有用 <code>middleware</code> 處理重定向，<br>可參考此 <a href="https://github.com/nuxt/nuxt/issues/15462#issuecomment-1407374859">issue</a> 的討論串，<br>要寫比較多，而且留言者在部署到 vercel 有遇到其他問題。故採升級的方式解決此題。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://blog.marsen.me/2022/03/09/2022/gcp_static_site_with_cloud_storage_and_loading_balancing/">靜態網站部署整合 GCP - Load Balancing &amp; Cloud Storage</a></li><li>[實作筆記] Gitlab CI&#x2F;CD 與 GCP 相關文章<ul><li><a href="https://blog.marsen.me/2023/04/13/2023/gitlab_ci_and_gcp_vm/">架構全貌</a></li><li><a href="https://blog.marsen.me/2023/04/14/2023/gitlab_ci_and_gcp_vm_create_server/">建立 Web Server VM</a></li><li><a href="https://blog.marsen.me/2023/04/14/2023/gitlab_ci_and_gcp_vm_cretae_runner/">建立 Gitlab Runner VM</a></li><li><a href="https://blog.marsen.me/2023/04/14/2023/gitlab_ci_and_gcp_vm_firewall/">防火牆設定</a></li><li><a href="https://blog.marsen.me/2023/04/24/2023/gitlab_ci_and_gcp_vm_account/">Linux User 與資料夾權限</a></li><li><a href="https://blog.marsen.me/2023/05/29/2023/gitlab_ci_and_gcp_vm_secret_config/">機敏資料的處理</a></li><li><a href="https://blog.marsen.me/2023/11/16/2023/gitlab_ci_error_handle/">錯誤處理</a></li><li><a href="https://blog.marsen.me/2024/03/13/2024/gitlab_ci_and_gcp_workload_federation/">Workload Identity Federation</a></li><li><a href="https://blog.marsen.me/2024/04/17/2024/gitlab_ci_and_gcp_cloud_run/">Cloud Run</a></li></ul></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;最近將公司的所有靜態網站轉換到 GCS 上了，遇到一些情境，特此記錄&lt;br&gt;這篇會以 Vue 與 Nuxt 的角度出發。&lt;b</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] 清理 CI/CD (Gitlab-runner) </title>
    <link href="https://blog.marsen.me/2024/04/17/2024/clear_gitlab-runner/"/>
    <id>https://blog.marsen.me/2024/04/17/2024/clear_gitlab-runner/</id>
    <published>2024-04-17T02:25:21.000Z</published>
    <updated>2024-06-23T15:25:45.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="寫在前面"><a href="#寫在前面" class="headerlink" title="寫在前面"></a>寫在前面</h2><p>NM;DR<br>沒有什麼意義，不需要讀這篇</p><h2 id="緣由"><a href="#緣由" class="headerlink" title="緣由"></a>緣由</h2><ul><li>CI&#x2F;CD 執行失敗，檢查錯誤發現是 Gitlab-runner[*1] 主機空間不足。</li></ul><h2 id="處理歷程"><a href="#處理歷程" class="headerlink" title="處理歷程"></a>處理歷程</h2><ul><li>連線 Gitlab-runner 主機</li><li>查詢空間使用狀況，找到佔磁區的資料<blockquote><p>marsen@gr00:~$  <code>sudo du -h --max-depth=1 /</code><br>24K &#x2F;tmp<br>0 &#x2F;sys<br>74M &#x2F;boot<br>… skip …<br>24K &#x2F;root<br>94G &#x2F;var<br>97G &#x2F;</p></blockquote></li><li>用指令作深層的搜尋　<code>sudo du -h --max-depth=3 /var</code></li><li>發現 docker 的問題最大<blockquote><p> 252K &#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers<br>4.0K &#x2F;var&#x2F;lib&#x2F;docker&#x2F;trust<br>4.0K &#x2F;var&#x2F;lib&#x2F;docker&#x2F;runtimes<br>91G &#x2F;var&#x2F;lib&#x2F;docker</p></blockquote></li><li>不選擇清理磁碟，而用 docker 指令檢查 <code>docker images</code></li><li>批次刪除指令　<code>docker images -f &quot;dangling=true&quot; -q | xargs docker rmi</code></li><li>再次檢查<blockquote><p>marsen@gr00:~$  <code>sudo du -h --max-depth=1 /</code><br>24K &#x2F;tmp<br>0 &#x2F;sys<br>74M &#x2F;boot<br>… skip …<br>24K &#x2F;root<br>16G &#x2F;var<br>20G &#x2F;</p></blockquote></li></ul><h2 id="後續"><a href="#後續" class="headerlink" title="後續"></a>後續</h2><ul><li>可能要建立一個排程定期去清理 CI&#x2F;CD 無用的 image<ul><li>可以的話想整入 CI&#x2F;CD 作業中，但在 DinD[*2] 的環境不確定怎麼實作</li></ul></li><li>log 與 cache 也有看到較高的資料成長曲線，未來也要納入評估</li></ul><h2 id="註解"><a href="#註解" class="headerlink" title="註解"></a>註解</h2><ol><li>Gitlab-Runner 是　Gitlab Solution 中執行工作的實體，可以是多台，此案只有單台</li><li>Dind: Docker In Docker,如同字面意思，在 Docker 中跑 Docker，是 Gitlab-runner 的實作方法之一</li></ol><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;寫在前面&quot;&gt;&lt;a href=&quot;#寫在前面&quot; class=&quot;headerlink&quot; title=&quot;寫在前面&quot;&gt;&lt;/a&gt;寫在前面&lt;/h2&gt;&lt;p&gt;NM;DR&lt;br&gt;沒有什麼意義，不需要讀這篇&lt;/p&gt;
&lt;h2 id=&quot;緣由&quot;&gt;&lt;a href=&quot;#緣由&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
    <category term="CI/CD" scheme="https://blog.marsen.me/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] Gitlab CI/CD 與 GCP - Cloud Run 方案選擇過程記錄</title>
    <link href="https://blog.marsen.me/2024/04/17/2024/gitlab_ci_and_gcp_cloud_run/"/>
    <id>https://blog.marsen.me/2024/04/17/2024/gitlab_ci_and_gcp_cloud_run/</id>
    <published>2024-04-17T02:18:25.000Z</published>
    <updated>2024-06-23T15:25:45.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提介"><a href="#前情提介" class="headerlink" title="前情提介"></a>前情提介</h2><p>在我的實務經驗上，很常與新創團隊合作，而架構選擇常常是第一個問題，<br>最常見的解法是，由技術負責人選擇最熟悉的技術…<br>這樣真的好嗎?<br>比如說，T 社早期由某群工程人員開發，<br>選擇了 Go、Nodejs、C# 等多語言與雲端 GKE(K8S) 作為開發架構，<br>事後不負責任離職後，對持續的運作與維護都造成了困難<br>這件事對我的警鐘是 — <strong>作為管理者，如果不具備識別專業的能力，就只能透過信賴某人或團隊;這是非常脆弱且危險的。</strong></p><h3 id="執行環境的選擇"><a href="#執行環境的選擇" class="headerlink" title="執行環境的選擇"></a>執行環境的選擇</h3><p>作為 Web 開發者，最常用的執行環境由簡入繁如下:</p><h4 id="地端到雲端到"><a href="#地端到雲端到" class="headerlink" title="地端到雲端到"></a>地端到雲端到</h4><ul><li>開發機就是正式機: 通常只是用來展示，開發者最常這樣作</li><li>地端的主機: 沒有技術能力公司，很有可能都是這樣的架構，直接向開發商買主機放機房或是由開發商部署</li><li>地端的虛擬機(VM): 會用較高規格的機器部署多台 VM，可以更有效使用資源</li><li>雲端的虛擬機(VM): 使用上與上面差不多，但是由大廠來維持高可用性，學習門檻低</li><li>雲端的 Server Less: 需要熟悉不同雲的相關產品，算是有點門檻，完成後可以精準控制預算、減少人力成本、透過雲維持高可用性</li><li>雲端的 K8s: 門檻較上面更高，也有相同的優點，但是會有更高的可控性，適合有一定使用規模後，需要細部彈性調整資源的公司。</li><li>再回地端: 如果規模再繼續成長，雲端的成本變得高不可攀時，或控制力下降，在有一定的技術水準情況下，有的公司會選擇回到地端。<a href="https://37signals.com/podcast/leaving-the-cloud/">參考 37signals 的例子</a></li></ul><h2 id="GCP-Cloud-Run"><a href="#GCP-Cloud-Run" class="headerlink" title="GCP Cloud Run"></a>GCP Cloud Run</h2><p>回歸本文，我選擇了 GCP Cloud Run，這是一種雲端的 Server Less 的解決方案。<br>產品的規模沒有大到需要 K8s，團隊成員的具備足夠的能力，<br>類似的方案還有 Cloud Function，<br>作為一個 Web API Base 的輕量專案，我評估 Cloud Run 更適合<br>Cloud Function 較適合 Event Driven 的片段行為<br>Cloud Run 較適合有點複雜度，但是可以容器化的應用。</p><h3 id="相關作業"><a href="#相關作業" class="headerlink" title="相關作業"></a>相關作業</h3><p>首先準備好我的程式，這是一個透過 Azure 寄信程式，需要在 <code>Azure Registered APP</code> 設定，<br>基本的讀取組態、寫 Log 到雲端與錯誤處理(Error Handle)、相依注入與測試等…<br>其中一個功能需要將 token 存儲在 <code>GCS(gcloud storage)</code> 裡，<br>並透過 <code>Cloud Scheduler</code> 定期更新，所以需要為其提供必要的權限與帳號(GCP Service Account).  </p><p>使用 <code>Cloud Run</code> 前，<code>Docker</code> 也是必要的前置知識，<br>你會需要撰寫 Dockerfile ，並且需要在 GCP 上建立一個 <code>Artifacts Registry</code><br>如此一來，就可以透過 <code>Cloud Build</code> 建立並部署 <code>Cloud Run</code> 了<br>用　<code>GCP Workload Identity Federation</code> 管理 <code>Service Account</code><br>管理的對像有 2 個，CI 的 Service Account 與執行程式的 Cloud Run 的 Service Account.  </p><p>後續有考慮透過 Cloud Run 提供 <code>Swagger</code> 之類的 API 文檔，但現階段先共享 <code>Postman</code> 資訊處理。</p><h4 id="20240427-更新"><a href="#20240427-更新" class="headerlink" title="20240427 更新"></a>20240427 更新</h4><p>我的 CI 腳本如下  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">export</span> <span class="string">CLOUDSDK_AUTH_ACCESS_TOKEN=&#123;provider</span> <span class="string">by</span> <span class="string">workload</span> <span class="string">identify</span> <span class="string">federation&#125;</span></span><br><span class="line"><span class="string">gcloud</span> <span class="string">builds</span> <span class="string">submit</span> <span class="string">--tag</span> <span class="string">your-registry/your-app:latest</span> <span class="string">.</span></span><br><span class="line"><span class="string">gcloud</span> <span class="string">run</span> <span class="string">services</span> <span class="string">update</span> <span class="string">your-app</span> <span class="string">--image=your-registry/your-app:latest</span> </span><br></pre></td></tr></table></figure><p>我的 Gitlab Runner 是透過 GCP 上 A Project 的 VM 建立並註冊的，<br>而我的 Cloud Run 需要部署並運作在 GCP B Project 上，<br>預設執行的身份會是 AProj 的 Compute Engine default service account，以下簡稱 A_CE_Account，<br>而 <code>CLOUDSDK_AUTH_ACCESS_TOKEN</code> 代表的是 B Project 的 Gitlab Runner Service Account，以下簡稱 B_GR_Service_Account，<br>另外在運作 B Project 的 Cloud Run 需要的是 B Project 的 Cloud Run Service Account，以下簡稱　B_CR_Service_Account，  </p><p>Gitlab Runner 在執行時，執行 <code>gcloud auth list</code> 會顯示 <code>A_CE_Account</code>，<br>但是由於有設定 <code>CLOUDSDK_AUTH_ACCESS_TOKEN</code>，所以相關命令的執行身份是　<code>B_GR_Service_Account</code>，<br>這會有足夠的權限執行　<code>gcloud builds submit --tag your-registry/your-app:latest .</code><br>但是沒有權限執行　<code>gcloud run services update your-app --image=your-registry/your-app:latest</code><br>原因是 Cloud Run 的執行身份是 <code>B_GR_Service_Account</code>，<br>為此，我們需要賦予 <code>B_GR_Service_Account</code> 角色 <code>Service Account User</code></p><h2 id="參考關鍵字"><a href="#參考關鍵字" class="headerlink" title="參考關鍵字"></a>參考關鍵字</h2><ul><li><a href="https://cloud.google.com/run?hl=en">Cloud Run</a></li><li><a href="https://cloud.google.com/functions">Cloud Function</a></li><li><a href="https://cloud.google.com/build">Cloud Build</a></li><li><a href="https://cloud.google.com/storage">Cloud Storage</a></li><li><a href="https://cloud.google.com/scheduler">Cloud Scheduler</a></li><li><a href="https://cloud.google.com/iam/docs/workload-identity-federation">Workload Identity Federation</a></li><li><a href="https://www.docker.com/">Docker</a></li><li><a href="https://learn.microsoft.com/en-us/security/zero-trust/develop/app-registration">Azure Registered APP</a></li></ul><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li>[實作筆記] Gitlab CI&#x2F;CD 與 GCP 相關文章<ul><li><a href="https://blog.marsen.me/2023/04/13/2023/gitlab_ci_and_gcp_vm/">架構全貌</a></li><li><a href="https://blog.marsen.me/2023/04/14/2023/gitlab_ci_and_gcp_vm_create_server/">建立 Web Server VM</a></li><li><a href="https://blog.marsen.me/2023/04/14/2023/gitlab_ci_and_gcp_vm_cretae_runner/">建立 Gitlab Runner VM</a></li><li><a href="https://blog.marsen.me/2023/04/14/2023/gitlab_ci_and_gcp_vm_firewall/">防火牆設定</a></li><li><a href="https://blog.marsen.me/2023/04/24/2023/gitlab_ci_and_gcp_vm_account/">Linux User 與資料夾權限</a></li><li><a href="https://blog.marsen.me/2023/05/29/2023/gitlab_ci_and_gcp_vm_secret_config/">機敏資料的處理</a></li><li><a href="https://blog.marsen.me/2023/11/16/2023/gitlab_ci_error_handle/">錯誤處理</a></li><li><a href="https://blog.marsen.me/2024/03/13/2024/gitlab_ci_and_gcp_workload_federation/">Workload Identity Federation</a></li><li><a href="https://blog.marsen.me/2024/04/17/2024/gitlab_ci_and_gcp_cloud_run/">Cloud Run</a></li></ul></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提介&quot;&gt;&lt;a href=&quot;#前情提介&quot; class=&quot;headerlink&quot; title=&quot;前情提介&quot;&gt;&lt;/a&gt;前情提介&lt;/h2&gt;&lt;p&gt;在我的實務經驗上，很常與新創團隊合作，而架構選擇常常是第一個問題，&lt;br&gt;最常見的解法是，由技術負責人選擇最熟悉的技術…&lt;b</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
    <category term="CI/CD" scheme="https://blog.marsen.me/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] MacBook Terminal 美化與設計</title>
    <link href="https://blog.marsen.me/2024/03/29/2024/mac_terminal_prompts_setting/"/>
    <id>https://blog.marsen.me/2024/03/29/2024/mac_terminal_prompts_setting/</id>
    <published>2024-03-29T08:48:10.000Z</published>
    <updated>2024-06-23T15:25:45.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>參考<a href="https://blog.marsen.me/2021/07/01/2021/mac_terminal_prompts_setting/">前文</a>，受同事啟發，改用 zim 取代 oh-my-zsh，<br>用更高效與精煉的方式設定 terminal 環境，<br>看看下面的小故事與 <a href="https://zimfw.sh/#install">Zim 的官網</a>，<br>這就我選擇更換的原因。  </p><h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>可以<a href="https://www.reddit.com/r/linuxadmin/comments/rhg7wx/zsh_frameworks/?rdt=39568">參考此文</a>，  </p><p>當前流行的 Zsh 框架有三個主要選項：Oh My Zsh、Prezto 和 Zim。<br>Oh My Zsh 是最受歡迎的，但因其過於龐大、混亂和性能問題而受到批評。<br>Prezto 是對其的重大改進，但未被合併回 Oh My Zsh。<br>而 Zim 是一個從頭重寫的框架，非常快速、高效，並將許多最佳想法結合在一起。<br>Zim 還提供了各種主題和模塊，並且易於安裝和管理。<br>這些框架在定製 Zsh 提示符、增加功能和優化性能方面提供了不同的選擇。</p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ul><li>下載與設定 iTerm2</li><li>安裝 zim</li><li>安裝 powerlevel10k</li></ul><h2 id="第一步-下載並安裝-iTerm2"><a href="#第一步-下載並安裝-iTerm2" class="headerlink" title="第一步 下載並安裝 iTerm2"></a>第一步 下載並安裝 <a href="https://iterm2.com/downloads.html">iTerm2</a></h2><h3 id="設定-iTerm2-的外觀"><a href="#設定-iTerm2-的外觀" class="headerlink" title="設定 iTerm2 的外觀"></a>設定 iTerm2 的外觀</h3><ol><li>從網站 iTerm2-Color-Schemes (<a href="https://github.com/mbadolato/iTerm2-Color-Schemes">https://github.com/mbadolato/iTerm2-Color-Schemes</a>) 下載你喜歡的配色方案，  </li><li>例如 “DimmedMonokai.itermcolors”。  </li><li>開啟 iTerm2，點擊菜單欄的 “iTerm2”，選擇 “Preferences”。</li><li>在偏好設定視窗中，選擇 “Profiles” 選項卡，然後選擇你要更改配色方案的會話配置文件。</li><li>在 “Colors” 選項卡下，點擊 “Color Presets” 按鈕，選擇 “Import…”。</li><li>找到剛才下載的配色方案檔案，例如 “DimmedMonokai.itermcolors”，點擊 “Open”。</li><li>選擇 “DimmedMonokai” 作為你的 iTerm2 配色方案。</li></ol><p><img src="https://i.imgur.com/d9qHicD.png" alt="import .itemcolors"></p><p>Profiles 裡有更多的設定, 字型、顏色<br>比如說, 調整啟始視窗大小與背景透明度, 可以前往 Windows 進行設定.<br>更多的細部設定可以自行摸索. 　<br><strong>記得重新載入才能看到效果</strong></p><h2 id="第二步-安裝-zim"><a href="#第二步-安裝-zim" class="headerlink" title="第二步, 安裝 zim"></a>第二步, 安裝 <a href="https://zimfw.sh/">zim</a></h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://raw.githubusercontent.com/zimfw/install/master/install.zsh | zsh</span><br></pre></td></tr></table></figure><p>即可完成安裝，並預設定一些相當實用的模組，可以<a href="https://zimfw.sh/docs/modules/">參考</a></p><h3 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h3><p>一般來說不需要這些額外的設定，我的情況是同時需要移除 <code>oh-my-zsh</code> 才會有額外的項目需要進行<br>進入 ~&#x2F;.zshrc　修改</p><p>一、刪除 <code>oh-my-zsh</code> 的區塊<br>常用的一些工具，都被整合在 <code>zim</code> 之中了<br>例如　zsh-syntax-highlighting　原本在 zshrc 的設定如下<br>現在都可以全數刪除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Install zsh-syntax-highlighting <span class="keyword">if</span> it<span class="string">&#x27;s not installed</span></span></span><br><span class="line">if [ ! -d $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting ]; then</span><br><span class="line">  git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Load zsh-syntax-highlighting plugin</span></span></span><br><span class="line">plugins+=(zsh-syntax-highlighting)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Set name of the theme to load --- if set to &quot;random&quot;, it will</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">load a random theme each time oh-my-zsh is loaded, in which case,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to know which specific one was loaded, run: echo $RANDOM_THEME</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</span></span></span><br><span class="line">ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;</span><br></pre></td></tr></table></figure><p>由於<code>zim</code>本身就有包含 zsh-syntax-highlighting，<br>所以其它相關的設定不會有問題。<br>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&#x27;fg=177&#x27;</span><br><span class="line">ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)</span><br><span class="line">typeset -A ZSH_HIGHLIGHT_STYLES</span><br><span class="line">ZSH_HIGHLIGHT_STYLES[comment]=&#x27;fg=242&#x27;</span><br></pre></td></tr></table></figure><h3 id="Prompt-設定"><a href="#Prompt-設定" class="headerlink" title="Prompt 設定"></a>Prompt 設定</h3><p>Prompt 主要影響 terminal 的外觀，<br>一般來說社群主流會推薦的 Powerlevel10k 後面會提供實作步驟，<br>但是 zim 已經提供足夠的 <a href="https://zimfw.sh/docs/themes/">theme</a>作選擇，<br>下面選用 minimal (zim 提供的輕量版主題)作範例 　<br>我們可以修改 <code>~/.zimrc</code> 即可完成設定  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">A heavily reduced, ASCII-only version of the Spaceship and Starship prompts.</span></span><br><span class="line">zmodule minimal </span><br></pre></td></tr></table></figure><h3 id="安裝-Powerlevel10k"><a href="#安裝-Powerlevel10k" class="headerlink" title="安裝 Powerlevel10k"></a>安裝 Powerlevel10k</h3><p>不過 zim 一樣可以使用 Powerlevel10k<br>前往 <a href="https://github.com/romkatv/powerlevel10k">Powerlevel10k</a><br>我們使用 zim 的方式安裝</p><p>修改 <code>~/.zimrc</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zmodule romkatv/powerlevel10k --use degit</span><br></pre></td></tr></table></figure><p>後執行　<code>zimfw install</code></p><p>之後重啟 iTerm2 將會有一連串設定問題, 依照喜歡的設定即可,<br>可以參考這個<a href="https://www.youtube.com/watch?v=JnJm4gRrWN8&t=326s">影片</a>,<br>如果設定完後不喜歡, 可以執行 <code>p10k configure</code> 重新設定<br>比較一下，效果我覺得都不錯</p><p><img src="/../../images/2024/mac_terminal_prompts_setting_zim.png" alt="爆"><br><img src="/../../images/2024/mac_terminal_prompts_setting_p10k.png" alt="爆"></p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://blog.marsen.me/2021/07/01/2021/mac_terminal_prompts_setting/">https://blog.marsen.me/2021/07/01/2021/mac_terminal_prompts_setting/</a></li><li><a href="https://www.reddit.com/r/linuxadmin/comments/rhg7wx/zsh_frameworks/?rdt=39568">https://www.reddit.com/r/linuxadmin/comments/rhg7wx/zsh_frameworks/?rdt=39568</a></li><li><a href="https://dev.to/techschoolguru/how-to-make-a-beautiful-terminal-j11">How to make a beautiful terminal</a></li><li><a href="https://github.com/romkatv/powerlevel10k">Powerlevel10k</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;參考&lt;a href=&quot;https://blog.marsen.me/2021/07/01/2021/mac_terminal</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [學習筆記] TypeScript 的 Using 與 Symbol.dispose</title>
    <link href="https://blog.marsen.me/2024/03/19/2024/typescript_using/"/>
    <id>https://blog.marsen.me/2024/03/19/2024/typescript_using/</id>
    <published>2024-03-19T05:13:45.000Z</published>
    <updated>2024-06-23T15:25:45.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p>TypeScript 在 5.2 引入了一個新關鍵字 using - 可用於在離開作用域時使用 Symbol.dispose 函數處理任何內容。</p><p>看一下官方的說明</p><blockquote><p>TypeScript 5.2 introduces support for the forthcoming Explicit Resource Management feature in ECMAScript,<br>which aims to address the need for “cleaning up” after creating an object.<br>This feature allows developers to perform necessary actions such as closing network connections,<br>deleting temporary files, or releasing memory.</p></blockquote><p><code>using</code> 與 <code>await</code> 的目的在於釋放資源上會非常有用。</p><p>在舉例子之前先看一下新的全域 Symbol:<code>Symbol.dispose</code> 與 <code>Symbol.asyncDispose</code>,<br>任何將函數分配給 Symbol.dispose 的物件都將被視為「資源」（“具有特定存留期的物件”），並且可以與 using 關鍵字一起使用。</p><p>舉例來說:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getResource</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      [<span class="title class_">Symbol</span>.<span class="property">dispose</span>]: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hooray!&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  using resource = <span class="title function_">getResource</span>();</span><br><span class="line">&#125; <span class="comment">// &#x27;Hooray!&#x27; logged to console</span></span><br></pre></td></tr></table></figure><p>當程式離開 resource 所在的 scope 後，就會觸發 <code>Symbol.dispose</code> 的 function</p><h2 id="應用"><a href="#應用" class="headerlink" title="應用"></a>應用</h2><p>比較常見的場景在於存取 DB、File System 等…<br>我們現在的作法需要用 <code>try...finally</code> 進行處理</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">processFile</span>(<span class="params">path: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> file = fs.<span class="title function_">openSync</span>(path, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// use file...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">someCondition</span>()) &#123;</span><br><span class="line">            <span class="comment">// do some more work...</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// Close the file and delete it.</span></span><br><span class="line">        fs.<span class="title function_">closeSync</span>(file);</span><br><span class="line">        fs.<span class="title function_">unlinkSync</span>(path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而改用 <code>using</code> 後可以變得如此簡單</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">processFile</span>(<span class="params">path: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    using file = <span class="keyword">new</span> <span class="title class_">TempFile</span>(path);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use file...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">someCondition</span>()) &#123;</span><br><span class="line">        <span class="comment">// do some more work...</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-2.html">using Declarations and Explicit Resource Management</a></li><li><a href="https://medium.com/@InspireTech/what-is-the-using-keyword-in-typescript-2a20738599e3">What is the “using” keyword in Typescript?</a></li><li><a href="https://www.totaltypescript.com/typescript-5-2-new-keyword-using">TypeScript 5.2’s New Keyword: ‘using’</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介紹&quot;&gt;&lt;a href=&quot;#介紹&quot; class=&quot;headerlink&quot; title=&quot;介紹&quot;&gt;&lt;/a&gt;介紹&lt;/h2&gt;&lt;p&gt;TypeScript 在 5.2 引入了一個新關鍵字 using - 可用於在離開作用域時使用 Symbol.dispose 函數處理任何內</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title> [實作筆記] Gitlab CI/CD 與 GCP - Workload Identity Federation</title>
    <link href="https://blog.marsen.me/2024/03/13/2024/gitlab_ci_and_gcp_workload_federation/"/>
    <id>https://blog.marsen.me/2024/03/13/2024/gitlab_ci_and_gcp_workload_federation/</id>
    <published>2024-03-13T07:25:55.000Z</published>
    <updated>2024-06-23T15:25:45.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提介"><a href="#前情提介" class="headerlink" title="前情提介"></a>前情提介</h2><p>現況用 Service Account 會有什麼問題？<br>當我們希望與第三方的服務與 GCP 作整合時，<br>傳統的（我之前的）作法是透過建立 Service Account Key 去提供給第三方資源存取的權限。<br>這會產生資安隱患，主要是這把 Key 的權粒度大難以稽核，有效期長風險，<br>而要定期更換 Key 會變成一個麻煩的管理問題。</p><h3 id="需求介紹"><a href="#需求介紹" class="headerlink" title="需求介紹"></a>需求介紹</h3><p>我目前透過 GCS 並掛載 Load Balancing 部署靜態網站，<br>而 CI&#x2F;CD 是透過 Service Account 的 Key 去執行工作，<br>這是一種有資安隱憂的作法，所以我試著使用 Workload Identity Federation 取代</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>TLDR;</p><p>而 Workload Identity Federation 是基於 IAM 機制，允許第三方服務整合 GCP 資源，<br>背後的技術原理是基於 OIDC， 在這裡我們不過度展開，簡單描述如下:</p><ol><li>Gitlab CI／CD 首先取 Gitlab OIDC Token，取得 Token 的作法可以參考<a href="https://docs.gitlab.com/ee/ci/secrets/id_token_authentication.html">官方文件</a>，下面是個簡單的範例:</li></ol>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">job_with_id_tokens:</span></span><br><span class="line">  <span class="attr">id_tokens:</span></span><br><span class="line">    <span class="attr">FIRST_ID_TOKEN:</span></span><br><span class="line">      <span class="attr">aud:</span> <span class="string">https://first.service.com</span></span><br><span class="line">    <span class="attr">SECOND_ID_TOKEN:</span></span><br><span class="line">      <span class="attr">aud:</span> <span class="string">https://second.service.com</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">first-service-authentication-script.sh</span> <span class="string">$FIRST_ID_TOKEN</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">second-service-authentication-script.sh</span> <span class="string">$SECOND_ID_TOKEN</span></span><br></pre></td></tr></table></figure><p>  ｜OIDC 是基於 Oauth2 的標準，簡單可以想成 Oauth2 再加上身份驗証。<br>2. 有了  Gitlab OIDC Token，我們可以透過 GOOGLE STS(Security Token Service) API 取得　Federated Token<br>  在這裡我們需要先建立好 Workload Identity Provider(IdP)，而可以設定 Attribute Conditions 來作限制<br>3. 這個時候可以用 Federated Token 與 GCP IAM API 交換來一個短周期的 Access Token<br>4. 本質上還是用 Service Account 在作事，但是用短周期的 Access Token 取代 Key, 從而簡化了 Key 的管理工作  </p><h2 id="實作步驟"><a href="#實作步驟" class="headerlink" title="實作步驟"></a>實作步驟</h2><ol><li><p>建立 Workload Identity Pool</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Update <span class="variable">$GCP_PROJECT_ID</span> value</span></span><br><span class="line">gcloud iam workload-identity-pools create gitlab-test-wip \</span><br><span class="line">  --location=&quot;global&quot; \</span><br><span class="line">  --description=&quot;Gitlab demo workload Identity pool&quot; \</span><br><span class="line">  --display-name=&quot;gitlab-test-wip&quot; \</span><br><span class="line">  --project=$GCP_PROJECT_ID</span><br></pre></td></tr></table></figure></li><li><p>設定 workload identity pool provider 並建立 Attribute conditions,<br>這步的關鍵是讓只符合你條件設定的 User 才能取得 Token</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Update GITLAB_NAMESPACE_PATH value</span></span><br><span class="line">gcloud iam workload-identity-pools providers create-oidc gitlab-identity-provider --location=&quot;global&quot; \</span><br><span class="line">--workload-identity-pool=&quot;gitlab-test-wip&quot; \</span><br><span class="line">--issuer-uri=&quot;https://gitlab.com&quot; \</span><br><span class="line">--allowed-audiences=https://gitlab.com \</span><br><span class="line">--attribute-mapping=&quot;google.subject=assertion.sub,attribute.aud=assertion.aud,attribute.project_path=assertion.project_path,attribute.project_id=assertion.project_id,attribute.namespace_id=assertion.namespace_id,attribute.namespace_path=assertion.namespace_path,attribute.user_email=assertion.user_email,attribute.ref=assertion.ref,attribute.ref_type=assertion.ref_type&quot; \</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--attribute-condition=<span class="string">&quot;assertion.namespace_path.startsWith(\&quot;<span class="variable">$GITLAB_NAMESPACE_PATH</span>\&quot;)&quot;</span> \</span></span><br><span class="line"><span class="language-bash">--attribute-condition=<span class="string">&quot;assertion.namespace_path.startsWith(\&quot;marsen\&quot;)&quot;</span> \</span></span><br><span class="line"><span class="language-bash">--project=<span class="variable">$GCP_PROJECT_ID</span></span></span><br></pre></td></tr></table></figure></li><li><p>建立 GCP Service Account<br>在我的例子中</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Create a service account</span></span><br><span class="line">gcloud iam service-accounts create gitlab-runner-sa --project=$GCP_PROJECT_ID</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Add sample permissions to the Service account</span></span><br><span class="line">gcloud projects add-iam-policy-binding $GCP_PROJECT_ID \</span><br><span class="line">  --member=serviceAccount:gitlab-wif-demo@$&#123;GCP_PROJECT_ID&#125;.iam.gserviceaccount.com \</span><br><span class="line">  --role=roles/storage.admin</span><br></pre></td></tr></table></figure></li><li><p>建立 Service Account 與 WIP 的角色關係綁定</p><p> 可以先取得專案的 GCP Project Id</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PROJECT_NUMBER=$(gcloud projects describe $(gcloud config get-value core/project) --format=value\(projectNumber\) --project $GCP_PROJECT_ID)</span><br></pre></td></tr></table></figure><p> 設定 Service Account 的角色為 workloadIdentityUser，並將其設定為 workloadIdentityPools 的服務帳戶</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcloud iam service-accounts add-iam-policy-binding gitlab-runner-sa@$&#123;GCP_PROJECT_ID&#125;.iam.gserviceaccount.com \</span><br><span class="line">    --role=roles/iam.workloadIdentityUser \</span><br><span class="line">    --member=&quot;principalSet://iam.googleapis.com/projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/gitlab-test-wip/*&quot;</span><br></pre></td></tr></table></figure></li><li><p>建立 Gitlab CI&#x2F;CD 進行測試</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">node:20.9.0-alpine</span></span><br><span class="line"></span><br><span class="line"><span class="string">.gcp_wif_auth:</span> <span class="meta">&amp;gcp_wif_auth</span></span><br><span class="line">  <span class="comment">#id_tokens to create JSON web tokens (JWT) to authenticate with third party services.This replaces the CI_JOB_JWT_V2</span></span><br><span class="line">  <span class="attr">id_tokens:</span></span><br><span class="line">    <span class="attr">GITLAB_OIDC_TOKEN:</span></span><br><span class="line">      <span class="attr">aud:</span> <span class="string">https://gitlab.com</span></span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">apt-get</span> <span class="string">update</span> <span class="string">&amp;&amp;</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="string">-yq</span> <span class="string">jq</span></span><br><span class="line">    <span class="comment">#Get temporary credentials using the ID token</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">      PAYLOAD=$(cat &lt;&lt;EOF</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">      &quot;audience&quot;: &quot;//iam.googleapis.com/$&#123;GCP_WORKLOAD_IDENTITY_PROVIDER&#125;&quot;,</span></span><br><span class="line"><span class="string">      &quot;grantType&quot;: &quot;urn:ietf:params:oauth:grant-type:token-exchange&quot;,</span></span><br><span class="line"><span class="string">      &quot;requestedTokenType&quot;: &quot;urn:ietf:params:oauth:token-type:access_token&quot;,</span></span><br><span class="line"><span class="string">      &quot;scope&quot;: &quot;https://www.googleapis.com/auth/cloud-platform&quot;,</span></span><br><span class="line"><span class="string">      &quot;subjectTokenType&quot;: &quot;urn:ietf:params:oauth:token-type:jwt&quot;,</span></span><br><span class="line"><span class="string">      &quot;subjectToken&quot;: &quot;$&#123;GITLAB_OIDC_TOKEN&#125;&quot;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      EOF</span></span><br><span class="line"><span class="string">      )</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">      echo &quot;Payload: $&#123;PAYLOAD&#125;&quot;</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">      FEDERATED_TOKEN=$(curl -s -X POST &quot;https://sts.googleapis.com/v1/token&quot; \</span></span><br><span class="line"><span class="string">      --header &quot;Accept: application/json&quot; \</span></span><br><span class="line"><span class="string">      --header &quot;Content-Type: application/json&quot; \</span></span><br><span class="line"><span class="string">      --data &quot;$&#123;PAYLOAD&#125;&quot; \</span></span><br><span class="line"><span class="string">      | jq -r &#x27;.access_token&#x27;</span></span><br><span class="line"><span class="string">      )</span></span><br><span class="line"><span class="string"></span>    <span class="comment">#- | </span></span><br><span class="line">    <span class="comment">#  echo &quot;Federated Token: $&#123;FEDERATED_TOKEN&#125;&quot;</span></span><br><span class="line">    <span class="comment">#Use the federated token to impersonate the service account linked to workload identity pool</span></span><br><span class="line">    <span class="comment">#The resulting access token is stored in CLOUDSDK_AUTH_ACCESS_TOKEN environment variable and this will be passed to the gcloud CLI</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">      WHAT_IT_IS=$(curl -s -X POST &quot;https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/$&#123;SERVICE_ACCOUNT_EMAIL&#125;:generateAccessToken&quot; \</span></span><br><span class="line"><span class="string">      --header &quot;Accept: application/json&quot; \</span></span><br><span class="line"><span class="string">      --header &quot;Content-Type: application/json&quot; \</span></span><br><span class="line"><span class="string">      --header &quot;Authorization: Bearer $&#123;FEDERATED_TOKEN&#125;&quot; \</span></span><br><span class="line"><span class="string">      --data &#x27;&#123;&quot;scope&quot;: [&quot;https://www.googleapis.com/auth/cloud-platform&quot;]&#125;&#x27; \</span></span><br><span class="line"><span class="string">      | jq -r &#x27;.&#x27;</span></span><br><span class="line"><span class="string">      )</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">      echo &quot;WHAT_IT_IS: $&#123;WHAT_IT_IS&#125;&quot;</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">      export CLOUDSDK_AUTH_ACCESS_TOKEN=$(curl -s -X POST &quot;https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/$&#123;SERVICE_ACCOUNT_EMAIL&#125;:generateAccessToken&quot; \</span></span><br><span class="line"><span class="string">      --header &quot;Accept: application/json&quot; \</span></span><br><span class="line"><span class="string">      --header &quot;Content-Type: application/json&quot; \</span></span><br><span class="line"><span class="string">      --header &quot;Authorization: Bearer $&#123;FEDERATED_TOKEN&#125;&quot; \</span></span><br><span class="line"><span class="string">      --data &#x27;&#123;&quot;scope&quot;: [&quot;https://www.googleapis.com/auth/cloud-platform&quot;]&#125;&#x27; \</span></span><br><span class="line"><span class="string">      | jq -r &#x27;.accessToken&#x27;</span></span><br><span class="line"><span class="string">      )</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy-prod</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy-prod:</span></span><br><span class="line">  <span class="attr">variables:</span></span><br><span class="line">    <span class="attr">GCP_PROJECT_NAME:</span> <span class="string">my-project-9527</span></span><br><span class="line">    <span class="attr">GCP_WORKLOAD_IDENTITY_PROVIDER:</span> <span class="string">&quot;projects/000009527/locations/global/workloadIdentityPools/gitlab-test-wip/providers/gitlab-identity-provider&quot;</span></span><br><span class="line">    <span class="attr">SERVICE_ACCOUNT_EMAIL:</span> <span class="string">&quot;gitlab-runner@my-project9527.iam.gserviceaccount.com&quot;</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*gcp_wif_auth</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy-prod</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">google/cloud-sdk:latest</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Deploying artifacts to PROD GCS🚀🚀🚀&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">$CLOUDSDK_AUTH_ACCESS_TOKEN</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">gcloud</span> <span class="string">config</span> <span class="string">set</span> <span class="string">project</span> <span class="string">$&#123;GCP_PROJECT_NAME&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">gcloud</span> <span class="string">storage</span> <span class="string">cp</span> <span class="string">-r</span> <span class="string">$CI_PROJECT_DIR/dist/*</span> <span class="string">gs://my-static-website/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://cloud.google.com/iam/docs/workload-identity-federation">https://cloud.google.com/iam/docs/workload-identity-federation</a></li><li><a href="https://www.youtube.com/watch?v=4vajaXzHN08">https://www.youtube.com/watch?v=4vajaXzHN08</a></li><li><a href="https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/generateAccessToken">GCP IAM generateAccessToken</a></li><li><a href="https://cloud.google.com/iam/docs/reference/sts/rest">Security Token Service API</a></li><li><a href="https://ermetic.com/blog/gcp/how-attackers-can-exploit-gcps-multicloud-workload-solution/">Workload 可能的資安風險:How Attackers Can Exploit GCP’s Multicloud Workload Solution</a></li><li>OIDC 相關<ul><li><a href="https://hackmd.io/@Burgess/rkjLdxbmU#">OIDC(OpenID Connection)</a></li><li><a href="https://www.ory.sh/docs/oauth2-oidc">Ory - OAuth2 and OpenID Connect</a></li><li><a href="https://docs.gitlab.com/ee/ci/cloud_services/google_cloud/">Gitlab OIDC</a></li><li><a href="https://juejin.cn/post/7175385017479069754?from=search-suggest">一文带你搞懂OAuth2.0</a></li><li><a href="https://juejin.cn/post/7340481613144293395">彻底搞懂OAuth2.0第三方授权免登原理</a></li><li><a href="https://www.technice.com.tw/experience/12520/">認識 OAuth 2.0：一次了解各角色、各類型流程的差異</a></li><li><a href="https://medium.com/@pumudu88/google-oauth2-api-explained-dbb84ff97079">Google Oauth2 API Explained</a></li><li><a href="https://shuninjapan.medium.com/%E6%B7%B1%E5%85%A5%E6%B7%BA%E5%87%BA-openid-connect-%E4%B8%80-8701bbf00958">深入淺出 OpenID Connect (一)</a></li><li><a href="https://medium.com/google-cloud/use-workload-identity-federation-with-another-gcp-project-98dc3b1c236c">Use Workload Identity Federation with another GCP project</a></li><li><a href="https://medium.com/google-cloud/how-does-the-gcp-workload-identity-federation-work-with-github-provider-a9397efd7158">How does the GCP Workload Identity Federation work with Github Provider?</a></li><li><a href="https://medium.com/@derek10cloud/how-to-use-gcp-services-securely-from-aws-with-workload-identity-federation-cc15fd8d7960">How to use GCP services securely from AWS with Workload Identity Federation</a></li></ul></li><li>[實作筆記] Gitlab CI&#x2F;CD 與 GCP 相關文章<ul><li><a href="https://blog.marsen.me/2023/04/13/2023/gitlab_ci_and_gcp_vm/">架構全貌</a></li><li><a href="https://blog.marsen.me/2023/04/14/2023/gitlab_ci_and_gcp_vm_create_server/">建立 Web Server VM</a></li><li><a href="https://blog.marsen.me/2023/04/14/2023/gitlab_ci_and_gcp_vm_cretae_runner/">建立 Gitlab Runner VM</a></li><li><a href="https://blog.marsen.me/2023/04/14/2023/gitlab_ci_and_gcp_vm_firewall/">防火牆設定</a></li><li><a href="https://blog.marsen.me/2023/04/24/2023/gitlab_ci_and_gcp_vm_account/">Linux User 與資料夾權限</a></li><li><a href="https://blog.marsen.me/2023/05/29/2023/gitlab_ci_and_gcp_vm_secret_config/">機敏資料的處理</a></li><li><a href="https://blog.marsen.me/2023/11/16/2023/gitlab_ci_error_handle/">錯誤處理</a></li><li><a href="https://blog.marsen.me/2024/03/13/2024/gitlab_ci_and_gcp_workload_federation/">Workload Identity Federation</a></li><li><a href="https://blog.marsen.me/2024/04/17/2024/gitlab_ci_and_gcp_cloud_run/">Cloud Run</a></li></ul></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提介&quot;&gt;&lt;a href=&quot;#前情提介&quot; class=&quot;headerlink&quot; title=&quot;前情提介&quot;&gt;&lt;/a&gt;前情提介&lt;/h2&gt;&lt;p&gt;現況用 Service Account 會有什麼問題？&lt;br&gt;當我們希望與第三方的服務與 GCP 作整合時，&lt;br&gt;傳統的（</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
    <category term="CI/CD" scheme="https://blog.marsen.me/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title> [學習筆記] 為前端框架 Component 建立 Props Typing 的幾種方式，以 React 為例</title>
    <link href="https://blog.marsen.me/2024/02/24/2024/typing_with_props/"/>
    <id>https://blog.marsen.me/2024/02/24/2024/typing_with_props/</id>
    <published>2024-02-24T12:11:01.000Z</published>
    <updated>2024-06-23T15:25:45.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在開發 React 應用程式時(其它框架其實也適用)，<br>使用 TypeScript 來強制定義 props 是一個常見的做法。<br>然而，有許多不同的方法可以實現這一目標。這篇文章討論了三種主要的方法。</p><h2 id="比較"><a href="#比較" class="headerlink" title="比較"></a>比較</h2><h3 id="Inline-Object-Literals"><a href="#Inline-Object-Literals" class="headerlink" title="Inline Object Literals"></a>Inline Object Literals</h3><p>在這個方法中，我們直接在函式的參數位置定義了 props 的型別，如下所示：  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Wrapper</span> = (<span class="params">props: &#123;</span></span><br><span class="line"><span class="params">  children?: ReactNode;</span></span><br><span class="line"><span class="params">&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>優點：快速簡潔。<br>缺點：不太適合長期維護。  </p><p>另一種解構的寫法會有更少的字數，<br>它會有一個 <code>&#123;&#125;:&#123;&#125;</code>特殊寫法，前者表示傳入的參數，後者表示要被解構的物件與型別<br>這樣的寫法最主要在 component 當中要使用傳入參數時可以省略 <code>prop.</code> 的語法，<br>但是理解上會不會更困難(對於不熟悉的開發者而言)就見團隊見智了…  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Wrapper</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">  children,</span></span><br><span class="line"><span class="params">&#125;: &#123;</span></span><br><span class="line"><span class="params">  children?: ReactNode;</span></span><br><span class="line"><span class="params">&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Type-Aliases"><a href="#Type-Aliases" class="headerlink" title="Type Aliases"></a>Type Aliases</h3><p>在這個方法中，我們把 props 的型別定義抽取到一個類型別名中：  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">WrapperProps</span> = &#123;</span><br><span class="line">  children?: <span class="title class_">ReactNode</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Wrapper</span> = (<span class="params">props: WrapperProps</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>優點：可以在其他文件中重用。<br>缺點：在大型代碼庫中可能會讓 TypeScript 變慢。  </p><h3 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h3><p>在這個方法中，我們使用介面來定義 props：  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">WrapperProps</span> &#123;</span><br><span class="line">  children?: <span class="title class_">ReactNode</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Wrapper</span> = (<span class="params">props: WrapperProps</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>優點：性能較好，在大型代碼庫中表現較好。<br>缺點：需要較多的代碼。  </p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>儘量使用 interface 會有較好的效能，同時可以共用這些代碼並幫助理解。  </p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.totaltypescript.com/react-props-typescript">https://www.totaltypescript.com/react-props-typescript</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">Destructuring assignment</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在開發 React 應用程式時(其它框架其實也適用)，&lt;br&gt;使用 TypeScript 來強制定義 props 是一個常見的做法。&lt;br&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title> [學習筆記] Vim 學習資源</title>
    <link href="https://blog.marsen.me/2024/02/22/2024/vim_learning_source/"/>
    <id>https://blog.marsen.me/2024/02/22/2024/vim_learning_source/</id>
    <published>2024-02-22T06:01:17.000Z</published>
    <updated>2024-06-23T15:25:45.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p>Vim 是一款強大高效的文本編輯器，強調效率和快速操作。<br>學習 Vim 能顯著提升編輯速度和效率，無需滑鼠，節省操作時間。<br>這裡記錄著我的學習資源，提供給未來的我複習使用。</p><h2 id="TLDR-Tips"><a href="#TLDR-Tips" class="headerlink" title="TLDR Tips"></a>TLDR Tips</h2><ol><li><code>gg</code>：移動到檔案的第一行</li><li><code>G</code>：移動到檔案的最後一行</li><li><code>gg=G</code>：重新縮排整個檔案</li><li><code>gv</code>：重新選取上一次的視覺選取</li><li>&#96;&#96; &lt;&#96;：跳到上一次視覺選取的開始</li><li>&#96;&#96; &gt;&#96;：跳到上一次視覺選取的結尾</li><li><code>^</code>：移動到行的第一個非空白字符</li><li><code>g_</code>：移動到行的最後一個非空白字符</li><li><code>g_lD</code>：刪除行上的所有尾部空白</li><li><code>ea</code>：在當前單字的末尾插入</li><li><code>gf</code>：跳到游標下的文件名</li><li><code>xp</code>：向前交換字符</li><li><code>Xp</code>：向後交換字符</li><li><code>yyp</code>：複製當前行</li><li><code>yapP</code>：複製當前段落</li><li><code>dat</code>：刪除包括標籤在內的 HTML 標籤</li><li><code>dit</code>：刪除 HTML 標籤內的內容，但不包括標籤本身</li><li><code>w</code>：向右移動一個單字</li><li><code>b</code>：向左移動一個單字</li><li><code>dd</code>：刪除當前行</li><li><code>zc</code>：關閉當前摺疊</li><li><code>zo</code>：打開當前摺疊</li><li><code>za</code>：切換當前摺疊</li><li><code>zi</code>：完全切換摺疊</li><li><code>&lt;&lt;</code>：向左移動當前行的縮排</li><li><code>&gt;&gt;</code>：向右移動當前行的縮排</li><li><code>z=</code>：顯示拼寫更正</li><li><code>zg</code>：添加到拼寫字典</li><li><code>zw</code>：從拼寫字典中刪除</li><li><code>~</code>：切換當前字符的大小寫</li><li><code>gUw</code>：將大小寫轉換到單字的末尾（u 用於小寫，~ 用於切換）</li><li><code>gUiw</code>：將整個單字轉換為大寫（u 用於小寫，~ 用於切換）</li><li><code>gUU</code>：將整行轉換為大寫</li><li><code>gu$</code>：將直到行尾的文本轉換為小寫</li><li><code>da&quot;</code>：刪除下一個雙引號括起來的字符串</li><li><code>+</code>：移動到下一行的第一個非空白字符</li><li><code>S</code>：刪除當前行並進入插入模式</li><li><code>I</code>：在行的開頭插入</li><li><code>ci&quot;</code>：更改下一個雙引號括起來的字符串內容</li><li><code>ca&#123;</code>：更改大括號內的內容（也可以試試 [, ( 等）</li><li><code>vaw</code>：視覺選取單字</li><li><code>dap</code>：刪除整個段落</li><li><code>r</code>：替換字符</li><li>&#96;&#96;[&#96;：跳轉到上次複製的文本的開始</li><li>&#96;&#96;]&#96;：跳轉到上次複製的文本的結尾</li><li><code>g;</code>：跳轉到上次更改的位置</li><li><code>g,</code>：向前跳轉到更改列表</li><li><code>&amp;</code>：在當前行上重複上次的替換</li><li><code>g&amp;</code>：在所有行上重複上次的替換</li><li><code>ZZ</code>：儲存當前檔案並關閉</li></ol><h2 id="學習資源"><a href="#學習資源" class="headerlink" title="學習資源"></a>學習資源</h2><p>內建學習工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; vimtutor</span><br></pre></td></tr></table></figure><ul><li><a href="https://vimtricks.com/p/50-useful-vim-commands/">50 Useful Vim Commands</a></li><li><a href="https://www.youtube.com/playlist?list=PLBd8JGCAcUAH56L2CYF7SmWJYKwHQYUDI">影片:即將失傳的古老技藝 Vim — 高見龍</a></li><li><a href="https://kaochenlong.com/2011/12/28/vim-tips/">網站:Vim 的操作小技巧</a></li><li><a href="https://www.vimgolf.com/">Vim Golf</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介紹&quot;&gt;&lt;a href=&quot;#介紹&quot; class=&quot;headerlink&quot; title=&quot;介紹&quot;&gt;&lt;/a&gt;介紹&lt;/h2&gt;&lt;p&gt;Vim 是一款強大高效的文本編輯器，強調效率和快速操作。&lt;br&gt;學習 Vim 能顯著提升編輯速度和效率，無需滑鼠，節省操作時間。&lt;br&gt;這裡</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title> [實作筆記] 一些關於 Azure Resource Group 的冷知識</title>
    <link href="https://blog.marsen.me/2024/01/25/2024/all_about_azure_resource_group/"/>
    <id>https://blog.marsen.me/2024/01/25/2024/all_about_azure_resource_group/</id>
    <published>2024-01-25T08:22:17.000Z</published>
    <updated>2024-06-23T15:25:45.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>Resource Group 是 Azure 上比較特別的一個設計，<br>這裡拿來記錄一些知道就知道，不知道就不知道的小事務。</p><h2 id="本文"><a href="#本文" class="headerlink" title="本文"></a>本文</h2><h3 id="NetworkWatcherRG"><a href="#NetworkWatcherRG" class="headerlink" title="NetworkWatcherRG"></a>NetworkWatcherRG</h3><ul><li><a href="https://learn.microsoft.com/zh-tw/azure/network-watcher/network-watcher-create?tabs=portal#delete-a-network-watcher-in-the-portal">https://learn.microsoft.com/zh-tw/azure/network-watcher/network-watcher-create?tabs=portal#delete-a-network-watcher-in-the-portal</a></li></ul><blockquote><p>注意</p><p>當您使用 Azure 入口網站 建立網路監看員實例時：</p><p>網路監看員實例的名稱會自動設定為NetworkWatcher_region，其中region會對應至 網路監看員 實例的 Azure 區域。<br>例如，在美國東部區域中啟用的網路監看員名為NetworkWatcher_eastus。<br>網路監看員實例會建立在名為NetworkWatcherRG的資源群組中。 若尚無該資源群組，將會加以建立。</p></blockquote><h3 id="Azure-DevOps"><a href="#Azure-DevOps" class="headerlink" title="Azure DevOps"></a>Azure DevOps</h3><ul><li><a href="https://learn.microsoft.com/en-us/azure/devops/organizations/billing/set-up-billing-for-your-organization-vs?view=azure-devops">https://learn.microsoft.com/en-us/azure/devops/organizations/billing/set-up-billing-for-your-organization-vs?view=azure-devops</a></li></ul><p>當我們將 Azure DevOps 的 Billing 綁定之時，<br>會建立一組 <code>VisualStudioOnline-XXXX</code> 的 Resource Group</p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;Resource Group 是 Azure 上比較特別的一個設計，&lt;br&gt;這裡拿來記錄一些知道就知道，不知道就不知道的小事</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title> [實作筆記] Macbook 壓縮檔案</title>
    <link href="https://blog.marsen.me/2024/01/25/2024/mac_zip_password_automator/"/>
    <id>https://blog.marsen.me/2024/01/25/2024/mac_zip_password_automator/</id>
    <published>2024-01-25T05:17:14.000Z</published>
    <updated>2024-06-23T15:25:45.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>假設分享機密文件給同事或者發送文件到郵件或雲端儲存時，就必須手動處理壓縮和加密，<br>可以參考一些文章，大致有三個作法</p><ul><li>購買付款壓縮軟體</li><li>使用雲端服務</li><li>手動執行 terminal 指令</li></ul><p>手動執行就可以處理的問題，我不會特別想要付款買一個軟體，<br>而雲端服務會擔心資訊安全，特別是要加密的資料代表有一定程度的重要性。<br>Terminal 大概是網路文章的主流解。<br>當我需要經常這樣做時，就太麻煩了，還要記得操作指令，額外增加心智負擔。<br>理想上，我希望只要選擇文件或資料夾，右鍵點擊”Zip with Password”，就能創建加密的 zip 文件。</p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><ol><li><p>打開 Automator app。</p></li><li><p>創建一個新 Automator 文件：File &gt; New (或按 ⌘N)，選擇 “Quick Action” 類型。</p></li><li><p>將輸入類型更改為 “files or folders”。</p></li><li><p>在左側的 Actions library 中，雙擊 “Run AppleScript”，或拖放到右側工作區。刪除示例代碼，替換為第 5 步的腳本。</p></li><li><p>複製並粘貼下面的 AppleScript 代碼。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">set prompt_text to &quot;請輸入壓縮密碼&quot;</span><br><span class="line"></span><br><span class="line">repeat</span><br><span class="line">    set zip_password to text returned of (display dialog prompt_text default answer &quot;&quot; with hidden answer)</span><br><span class="line">    set verify_password to text returned of (display dialog &quot;再次輸入壓縮密碼&quot; buttons &#123;&quot;OK&quot;&#125; default button 1 default answer &quot;&quot; with hidden answer)</span><br><span class="line">    considering case and diacriticals</span><br><span class="line">        if (zip_password = verify_password) then</span><br><span class="line">          exit repeat</span><br><span class="line">        else</span><br><span class="line">            set prompt_text to &quot;密碼不一致，請重新設定&quot;</span><br><span class="line">        end if</span><br><span class="line">    end considering</span><br><span class="line">end repeat</span><br><span class="line"></span><br><span class="line">tell application &quot;Finder&quot;</span><br><span class="line">    set the_items to selection</span><br><span class="line">    if ((class of the_items is list) and (count of the_items) &gt; 0) then</span><br><span class="line">        set items_to_zip to &quot;&quot;</span><br><span class="line">        repeat with each_item in the_items</span><br><span class="line">            set each_item_alias to each_item as alias</span><br><span class="line">            set item_name to name of each_item_alias</span><br><span class="line">            set item_name to quoted form of (item_name &amp; &quot;&quot;)</span><br><span class="line">            set items_to_zip to items_to_zip &amp; item_name &amp; &quot; &quot;</span><br><span class="line">        end repeat</span><br><span class="line"></span><br><span class="line">        set first_item to (item 1 of the_items) as alias</span><br><span class="line">        set containing_folder to POSIX path of (container of first_item as alias)</span><br><span class="line">        set zip_name to text returned of (display dialog &quot;輸入壓檔名&quot; default answer &quot;&quot;)</span><br><span class="line">        set zip_file_name to quoted form of (zip_name &amp; &quot;.zip&quot;)</span><br><span class="line"></span><br><span class="line">        if zip_password is not equal to &quot;&quot; then</span><br><span class="line">            -- 如果存在密碼，執行加密壓縮</span><br><span class="line">            do shell script &quot;cd &#x27;&quot; &amp; containing_folder &amp; &quot;&#x27;; zip -x .DS_Store -r0 -P &#x27;&quot; &amp; zip_password &amp; &quot;&#x27; &quot; &amp; zip_file_name &amp; &quot; &quot; &amp; items_to_zip</span><br><span class="line">        else</span><br><span class="line">            -- 否則執行單純壓縮</span><br><span class="line">            do shell script &quot;cd &#x27;&quot; &amp; containing_folder &amp; &quot;&#x27;; zip -x .DS_Store -r0 &quot; &amp; zip_file_name &amp; &quot; &quot; &amp; items_to_zip</span><br><span class="line">        end if</span><br><span class="line">    else</span><br><span class="line">        display dialog &quot;你未選擇任何檔案。&quot; buttons &#123;&quot;OK&quot;&#125; default button 1</span><br><span class="line">    end if</span><br><span class="line">end tell</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>儲存工作流程：File &gt; Save (或按 ⌘S)，給它一個名字，如 “Zip with Password”</p></li></ol><p>現在，選擇文件或文件夾，右擊，選擇 “Quick Actions” 中的 “Zip with Password”，<br>按照提示輸入密碼、驗證密碼和設置 zip 文件的名字。測試新創建的 zip 文件，確保一切運作正常。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://jimmysie.com/2021/04/30/how-to-create-a-password-protected-zip-file-using-quick-action-on-mac/">https://jimmysie.com/2021/04/30/how-to-create-a-password-protected-zip-file-using-quick-action-on-mac/</a></li><li><a href="https://www.tech-girlz.com/2022/03/mac-password-protect-zip-file.html">https://www.tech-girlz.com/2022/03/mac-password-protect-zip-file.html</a></li><li><a href="https://www.minwt.com/mac/22863.html">https://www.minwt.com/mac/22863.html</a></li><li><a href="https://www.tech-girlz.com/2021/04/mac-zip-with-password.html">https://www.tech-girlz.com/2021/04/mac-zip-with-password.html</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;假設分享機密文件給同事或者發送文件到郵件或雲端儲存時，就必須手動處理壓縮和加密，&lt;br&gt;可以參考一些文章，大致有三個作法&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title> [實作筆記] ClamAV 安裝</title>
    <link href="https://blog.marsen.me/2024/01/03/2024/clamav_install/"/>
    <id>https://blog.marsen.me/2024/01/03/2024/clamav_install/</id>
    <published>2024-01-03T09:14:54.000Z</published>
    <updated>2024-06-23T15:25:45.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="提要"><a href="#提要" class="headerlink" title="提要"></a>提要</h2><p>因 ISO 需要在 GCP VM(Linux 系統)上安裝防毒。<br>ClamAV 是一款強大的開源防毒引擎，專為檢測和清除惡意程式而設計。<br>這篇用來記錄終端機中安裝和配置 ClamAV，包括系統更新、病毒庫更新、自動運行設定等步驟，<br>以確保系統有效抵禦各種威脅。  </p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先，在終端機中輸入以下指令，展開系統更新的步驟：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br></pre></td></tr></table></figure><p>出現警示請按 Y</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">After this operation, 12.1 MB of additional disk space will be used.</span><br><span class="line">Do you want to continue? [Y/n] Y</span><br></pre></td></tr></table></figure><p>接著，透過以下指令安裝 ClamAV，一強大的防護工具，以確保系統免受惡意程式的侵害：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install clamav clamav-daemon -y </span><br></pre></td></tr></table></figure><p>當安裝完成後</p><p>確保沒有其他 freshclam 進程在運行，您可以使用以下指令查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep freshclam</span><br></pre></td></tr></table></figure><p>如果有其他 freshclam 進程在運行，請終止(kill)它們。</p><p>執行以下指令可更新 ClamAV 的病毒定義庫：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo freshclam</span><br></pre></td></tr></table></figure><p>隨後，您可以進行系統掃描，以查找並清除潛在的威脅，請使用以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo clamscan -r /path/to/folder</span><br></pre></td></tr></table></figure><p>若欲使 ClamAV 在系統啟動時自動運行，請執行以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> clamav-daemon</span><br></pre></td></tr></table></figure><p>這將設定 ClamAV 在每次系統啟動時主動保護您的系統。</p><p>啟動 ClamAV 服務（如果它沒有在系統啟動時自動啟動）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start clamav-daemon</span><br></pre></td></tr></table></figure><p>檢查 ClamAV 服務的運行狀態：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status clamav-daemon</span><br></pre></td></tr></table></figure><p>這樣，您可以確保 ClamAV 已經更新、服務已經啟動，並檢查服務的當前運行狀態。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://blog.yslifes.com/archives/3129">https://blog.yslifes.com/archives/3129</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;提要&quot;&gt;&lt;a href=&quot;#提要&quot; class=&quot;headerlink&quot; title=&quot;提要&quot;&gt;&lt;/a&gt;提要&lt;/h2&gt;&lt;p&gt;因 ISO 需要在 GCP VM(Linux 系統)上安裝防毒。&lt;br&gt;ClamAV 是一款強大的開源防毒引擎，專為檢測和清除惡意程式而設計</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title> [生活筆記] 2023 的回顧與展望</title>
    <link href="https://blog.marsen.me/2024/01/02/2024/2024_plan/"/>
    <id>https://blog.marsen.me/2024/01/02/2024/2024_plan/</id>
    <published>2024-01-02T04:54:12.000Z</published>
    <updated>2024-06-23T15:25:45.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>2023 年過去了, 作個回顧</p><h2 id="工作相關"><a href="#工作相關" class="headerlink" title="工作相關"></a>工作相關</h2><p>2023 年對我來說是個不穩定的一年，甚至考慮出國去唸語言學校，但最終留在了台灣。<br>T 社的本來想說點什麼，一年內提筆多次想想就又算了。<br>一年都過了還是作個簡單記錄。</p><h3 id="T-社事件"><a href="#T-社事件" class="headerlink" title="T 社事件"></a>T 社事件</h3><p>本來想加入一個前輩 S 作為主管的團隊，<br>與這位前輩其實沒那麼多接觸，但知道技術實力不差，本來也是 N 社早期的創業員工之一。<br>預計是希望能近距離合作並學習，並以創業心態開發一款國際產品。<br>實際上加入 T 社後，S 桑進公司的次數屈指可數，<br>產品的發展也與預期不符，市場已有大量類似的競品，老闆吹的天花亂墜，但只是一個點餐系統<br>T 社本身到母公司 W 集團，完全缺乏軟體專案的管理經驗，隨便而缺乏專業開發團隊，<br>而缺乏軟體工程的管理專業，使得他們<strong>無法有效追蹤進度</strong>。  </p><h4 id="需求與溝通"><a href="#需求與溝通" class="headerlink" title="需求與溝通"></a>需求與溝通</h4><p>後續的結果是開發團隊與 W 集團互信不足，演員底的老闆，只能帶著兒子、特助或是咖啡甜點來信心喊話，<br>團隊內的產品部門變成了對講機與美工，唯一的功能就是轉達集團的需求與繪製 Figma。<br>整個產品團隊無法回答開發團隊的疑問，反而不斷的抱怨集團、特助或老闆，<br>整個溝通變得<strong>無效且變形</strong></p><h4 id="開發"><a href="#開發" class="headerlink" title="開發"></a>開發</h4><p>反過來是招募時，餅畫得太大，導致 RD 明顯過度設計，<br>比如說，RD 跑了一個沒有 Domain Expert 的 DDD，<br>在沒有上線、沒有賺錢沒有用戶的情況下，用自已的腦補進行了領域的分工，<br>不到10人的團隊切分了 10 幾個微服務，並且濫用了 GraphQL。<br>這樣又帶來後續的問題，<br>第一、語言不一致，一開始的想法是讓各個開發者有開發的自主，但問題變成無法互相支援，各自畫地為王<br>第二、開發風格不一致，即使是使用相同的語言，使用的套件與寫作風格也未統一，所以要支援也有難度<br>第三、開發準備作業多，很多需求經討論後都需要新建成服務,RD 需要從建立 Repo，<br>到自行建置 GCP 相關服務（網路、資料庫、CI&#x2F;CD 等），<br>第三、串接複雜，API 重重呼叫，為了要追蹤錯誤，需要延申很多額外的設計，<br>一個簡單的 CRUD，需要兩個 GraphQL 如果有要異動到呼叫的 API，更新一個 API 就要動到三個專案<br>第四，但是因為團隊缺乏領導者(S 桑)的情況下，開發者沒有有效的權責分工，GCP 的權限被一些早期入職的員工掌握，而需要等待。<br>第五，無溝通與不透明，晨會就形同虛設，整個團隊每個人變成一個一個穀倉</p><h4 id="缺乏用戶"><a href="#缺乏用戶" class="headerlink" title="缺乏用戶"></a>缺乏用戶</h4><p>整個產品核心的兩個功能（點餐與收費）在兩個系統上，一個外部公司開發的軟體，一個在老舊的 POS。<br>而我們開發的系統比較像是一個單純的 App 加周邊整合。<br>這麼簡單的東西，卻用了一個複雜的架構，導致修改速度緩慢，遲遲無法上線，面對需求調整時也沒有彈性。<br>更進一步加深集團與開發團隊的不信任。</p><h4 id="團隊狀況"><a href="#團隊狀況" class="headerlink" title="團隊狀況"></a>團隊狀況</h4><ul><li>資料與雲端權限在一個菜鳥身上，不論有意無意，權限與知識不願意共享，除非有人踩到雷  </li><li>前端上班睡覺，開發品質低下的 React(完全沒有模組化的思維，不如用原生三本柱開發還比較快)</li><li>產品設計的後台實務上沒有人會使用，主要還是在母公司的 ERP E  </li><li>APP 組用了 Flutter 思維確停留在 IOS&#x2F;Android&#x2F;Web 的分工，到後來兩人也無法互相支援  </li><li>想學 C# 的 RD 整天吹噓 N 社的失敗專案（XmiERP），而代碼品質可讀、可測試性極差，讓我理解 Php 工程師的下限</li><li>想學 Golang 的 RD 應該是整體過度設計的原兇，第一時間離職了。</li><li>領頭　S 桑遲遲未進入團隊後，</li><li>來了一個之前也在 N 社待過”幾天”的 R 主管<ul><li>缺乏開發能力（至少在這樣的穀倉下）</li><li>也缺乏軟體開發管理的素養</li><li>甚至連基本守法都作不到</li></ul></li></ul><p>　　</p><p>勉強要說會作簡報，但是產品設計不合理，比如說，他花了 ３ 個月作簡報搞了一個動態標籤點餐，<br>然後跟廠商要了一個動態標籤機，丟在那裡再放３個月，然後拒絕承認有過這件事ಠ_ಠａ，是在哈囉。<br>然後面試找來自已的樁腳。<br><strong>整個公司與團隊缺乏互信</strong></p><h4 id="我的努力"><a href="#我的努力" class="headerlink" title="我的努力"></a>我的努力</h4><p>試著找 S 桑與團隊開了一場大會，總算把 APP 推上架。<br>上架唯一可以收費的功能由我開發部署到實體店面驗收，並給了團隊與主管中實的逆耳忠言。<br>儘可能的 Change Your Company。<br>只可惜爛泥扶不上牆，石瓦塗黃泥也不成金。</p><p>以上是 T 社的故事概述，至於關於 R 與 W 集團的非法行為就另一個故事了(🍵</p><h3 id="顧問"><a href="#顧問" class="headerlink" title="顧問"></a>顧問</h3><p>年初有找到很多的機會，例如在 C 社擔任顧問職，<br>或是接案，也算是個不錯的經驗，主要的發現如下。</p><ul><li>沒有識別專業能力的能力→如何確定軟體開發的產品如期如質？</li><li>沒有正確分工的能力→大環境太偏向技能分工(ex:前後端、SRE、DBA etc…, 我認為應該更偏向需求端與實作端)</li><li>沒有建立與管理流程的能力，版控流程、權限控管、需求流程</li></ul><p>這剛好是我擅長且有經驗的，<br>資深的開發者的問題在停止學習，執著於自已的開發習慣，<br>資淺的開發太想炫技，而過度設計，兩者都需要透過管理手段去調控。</p><h3 id="A-社相關"><a href="#A-社相關" class="headerlink" title="A 社相關"></a>A 社相關</h3><p>目前的事就先不多說，至少我開發的東西已經幫公司賺到 3000 萬以上，<br>遺憾的事是，幾個下屬想拉拉不起來，只好協議讓他離開，一切流程也合法合情，　　<br>這也是我說的，有資金的人不見得有識別專業的能力，千里馬常有伯樂不常有。<br>其他一些甘苦還在進行式，至少比 T 社好多了，就不多談。</p><ul><li>主管技能學習中…</li><li>GCP 技術大躍進</li><li>ISO 認証學習中</li><li>Azure 技術學習中</li></ul><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><ul><li>潛水終於考到 AWO，下次想換個潛點了 　</li><li>跳舞方面<ul><li>跟知名的老師跳了一首，2023 足夠了</li><li>上了幾個國際老師的課，不過還是沒有感到進步<ul><li>Jo</li><li>Meti &amp; Andante</li><li>Bianca and Nils (沒上課但是有跟 Bianca 跳到舞)</li><li>Lisa &amp; Fabien</li><li>Dasha &amp; Roman (有跟 Dasha 跳到舞)</li><li>Melanie &amp; Jeremy</li><li>Chloe &amp; Rico</li><li>Moondewti</li><li>Laura &amp; Youngbo</li></ul></li><li>在誠品表演、嚐試一些空中動作　 </li><li>喜歡的樂手<ul><li>Charlie Christian</li><li>YOASOBI</li></ul></li><li>喜歡的漫畫<ul><li>莽送的莉芙蓮</li><li>Völundio(休刊中)</li></ul></li></ul><p>　 </p></li><li>換了護照準備出國但是還不知道要去哪裡？<ul><li>打算再帶媽媽出國一次</li><li>也想去倫敦看阿森納比賽</li><li>也想再參加國外的 workshop</li><li>不想變成只會希望而不行動的麵包師傅</li></ul></li></ul><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><h3 id="投資"><a href="#投資" class="headerlink" title="投資"></a>投資</h3><p>Q1 總資產有望達到一個重大里程碑。下一個目標是持股資產達這個里程碑</p><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>制定計劃中</p><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>仍是目標全遠端／斜槓或接案</p><h3 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h3><p>毫無頭序，也應該制定計劃嗎???</p><h3 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h3><p>踢球?健身?跳舞</p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;2023 年過去了, 作個回顧&lt;/p&gt;
&lt;h2 id=&quot;工作相關&quot;&gt;&lt;a href=&quot;#工作相關&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title> [生活筆記] 修正 A 校的題目缺陷</title>
    <link href="https://blog.marsen.me/2023/12/15/2023/ac_defects_in_instructional_material/"/>
    <id>https://blog.marsen.me/2023/12/15/2023/ac_defects_in_instructional_material/</id>
    <published>2023-12-15T05:24:33.000Z</published>
    <updated>2024-06-23T15:25:45.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="導言"><a href="#導言" class="headerlink" title="導言"></a>導言</h2><p>在 A 校擔任雲端助教一陣子，主要有幾個原因，<br>我也是資策會出身，所以我對轉職的學生可以感同身受，<br>我在教學的過程中，自已也會成長，很多時候可以學習到新知也得到成就感，<br>最後就是可以獲得額外的收入。  </p><h2 id="問題發現"><a href="#問題發現" class="headerlink" title="問題發現"></a>問題發現</h2><p>這次是一個我有興趣的題目，簡單說 A 社利用 <a href="https://replit.com/">Replit</a> 網站提供作業，<br>由學生進行撰寫，很聰明的整合方式，而且幾乎零成本。<br>而且我覺得最棒的是，他可以寫測試腳本，透過測試腳本，就可以驗收大部份的作業，加速批改的時間。</p><p>但是，這次同學的作業在執行時期，發生了異常掉入了一個無限廻圈的狀態<br>問題不難，是一個邊際值的問題。 <strong>應該可以加上測試保護</strong>，這是我的第一個直覺。<br>我去檢查了 A 校提供的標準答案，不出意外的也有相同的問題。</p><p>另外一個問題是，<strong>寫邊際值的測試案例</strong>不是基本的嗎?<br>查看了測試案例，竟然還真的沒有寫</p><h2 id="問題排查"><a href="#問題排查" class="headerlink" title="問題排查"></a>問題排查</h2><p>我選擇下載了 Replit 到地端開發，<br>在開始前先簡單描述題目，在一個限範圍內進行猜數字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> answer = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span></span><br><span class="line"><span class="comment">// start coding</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> min = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> max = <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> guess = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getResult</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">while</span> (           ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (          ) &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (          ) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    guess = <span class="title class_">Math</span>.<span class="title function_">floor</span>((max + min) / <span class="number">2</span>)</span><br><span class="line">    count ++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(           )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下為測試檔，請勿更動</span></span><br><span class="line"><span class="title function_">getResult</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  guess,</span><br><span class="line">  answer,</span><br><span class="line">  count,</span><br><span class="line">  getResult</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這是很好的題目，可以同時使用到迴圈與判斷，也可以接觸 Math 模組。<br>我們來看一下測試案例，在 Replit 右下角的 Unit Test</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&quot;&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> spy = jest.<span class="title function_">spyOn</span>(<span class="variable language_">console</span>, <span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> &#123; </span><br><span class="line">    guess,</span><br><span class="line">    answer,</span><br><span class="line">    count,</span><br><span class="line">    getResult</span><br><span class="line">  &#125; = index;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getResult</span>()</span><br><span class="line">  <span class="keyword">if</span> (guess === answer) &#123;</span><br><span class="line">    <span class="title function_">expect</span>(count).<span class="title function_">toBeLessThanOrEqual</span>(<span class="number">10</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>測試很單純，<strong>當答案在 1~100 之間時，執行迴圈的次數不應該超過 10 次</strong>(其實 7 次內應該都猜得出來)<br>我們應該加上一些邊際測試。<br>例如 1 與 100 的案例，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&quot;Answer_is_1&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> spy = jest.<span class="title function_">spyOn</span>(<span class="variable language_">console</span>, <span class="string">&#x27;log&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> originalMathRandom = <span class="title class_">Math</span>.<span class="property">random</span>;</span><br><span class="line">  <span class="title class_">Math</span>.<span class="property">random</span> = jest.<span class="title function_">fn</span>()</span><br><span class="line">    .<span class="title function_">mockImplementationOnce</span>(<span class="function">() =&gt;</span> <span class="number">0.001</span>)</span><br><span class="line">    .<span class="title function_">mockImplementation</span>(<span class="function">() =&gt;</span> <span class="title function_">originalMathRandom</span>());</span><br><span class="line">  <span class="comment">//console.log(&#x27;now random is&#x27;, Math.random());</span></span><br><span class="line">  <span class="keyword">const</span> index = <span class="built_in">require</span>(<span class="string">&#x27;./index&#x27;</span>);</span><br><span class="line">  index.<span class="title function_">getResult</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Clean up</span></span><br><span class="line">  spy.<span class="title function_">mockRestore</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&quot;Answer_is_100&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> spy = jest.<span class="title function_">spyOn</span>(<span class="variable language_">console</span>, <span class="string">&#x27;log&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> originalMathRandom = <span class="title class_">Math</span>.<span class="property">random</span>;</span><br><span class="line">  <span class="title class_">Math</span>.<span class="property">random</span> = jest.<span class="title function_">fn</span>()</span><br><span class="line">    .<span class="title function_">mockImplementationOnce</span>(<span class="function">() =&gt;</span> <span class="number">0.999</span>)</span><br><span class="line">    .<span class="title function_">mockImplementation</span>(<span class="function">() =&gt;</span> <span class="title function_">originalMathRandom</span>());</span><br><span class="line">  <span class="comment">//console.log(&#x27;now random is&#x27;, Math.random());</span></span><br><span class="line">  <span class="keyword">const</span> index = <span class="built_in">require</span>(<span class="string">&#x27;./index&#x27;</span>);</span><br><span class="line">  index.<span class="title function_">getResult</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Clean up</span></span><br><span class="line">  spy.<span class="title function_">mockRestore</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>這裡注意到的是我們 mock 了<code>Math.random</code>，因為這才會影響我們的答案。</p><h3 id="問題後的問題"><a href="#問題後的問題" class="headerlink" title="問題後的問題"></a>問題後的問題</h3><p>當我們在測試案例為 100 時，會限入無窮迴圈，而 JavaScript 單緒的特性將無法離開這個測試，<br>雖然也不會報錯…但是測試將永遠跑不完。<br><strong>這驅使我再加上一個測試案例</strong>，當執行次數超過 10 次時拋出例外。<br>而學生使用的範本，我希望儘可能不去修改它，<br>這裡要對 jest 與 javascript 要有足夠的理解才可以寫的好，<br>所幸在這個時代，有 AI 與 google 的加持下，很快就解決了。</p><p>最後的測試程式如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Guessing Game&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> originalMathRandom;</span><br><span class="line">  <span class="keyword">let</span> spy;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Save the original functions</span></span><br><span class="line">    originalMathRandom = <span class="title class_">Math</span>.<span class="property">random</span>;</span><br><span class="line">    spy = jest.<span class="title function_">spyOn</span>(<span class="variable language_">console</span>, <span class="string">&#x27;log&#x27;</span>).<span class="title function_">mockImplementation</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Restore the original functions</span></span><br><span class="line">    <span class="title class_">Math</span>.<span class="property">random</span> = originalMathRandom;</span><br><span class="line">    spy.<span class="title function_">mockRestore</span>();</span><br><span class="line">    jest.<span class="title function_">resetModules</span>()</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&quot;Answer_is_1&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Math</span>.<span class="property">random</span> = jest.<span class="title function_">fn</span>().<span class="title function_">mockReturnValue</span>(<span class="number">0.001</span>);</span><br><span class="line">    <span class="keyword">const</span> index = <span class="built_in">require</span>(<span class="string">&#x27;./index&#x27;</span>);</span><br><span class="line">    index.<span class="title function_">getResult</span>();</span><br><span class="line">    <span class="title function_">expect</span>(index.<span class="property">answer</span>).<span class="title function_">toBe</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&quot;Answer_is_100&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Math</span>.<span class="property">random</span> = jest.<span class="title function_">fn</span>().<span class="title function_">mockReturnValue</span>(<span class="number">0.999</span>);</span><br><span class="line">    <span class="keyword">const</span> index = <span class="built_in">require</span>(<span class="string">&#x27;./index&#x27;</span>);</span><br><span class="line">    index.<span class="title function_">getResult</span>();</span><br><span class="line">    <span class="title function_">expect</span>(index.<span class="property">answer</span>).<span class="title function_">toBe</span>(<span class="number">100</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;guess under 10 times&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Math</span>.<span class="property">random</span> = jest.<span class="title function_">fn</span>().<span class="title function_">mockReturnValue</span>(<span class="number">0.5</span>);</span><br><span class="line">    <span class="keyword">const</span> index = <span class="built_in">require</span>(<span class="string">&#x27;./index&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++) &#123;</span><br><span class="line">      index.<span class="title function_">getResult</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">expect</span>(<span class="function">() =&gt;</span> index.<span class="title function_">getResult</span>()).<span class="property">not</span>.<span class="title function_">toThrow</span>();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should throw error if count is more than 10&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> originalMathFloor = <span class="title class_">Math</span>.<span class="property">floor</span>;</span><br><span class="line">    <span class="title class_">Math</span>.<span class="property">floor</span> = jest.<span class="title function_">spyOn</span>(<span class="variable language_">global</span>.<span class="property">Math</span>, <span class="string">&#x27;floor&#x27;</span>)</span><br><span class="line">      .<span class="title function_">mockImplementationOnce</span>(<span class="function">() =&gt;</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span>)</span><br><span class="line">      .<span class="title function_">mockImplementationOnce</span>(<span class="function">() =&gt;</span> <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">const</span> index = <span class="built_in">require</span>(<span class="string">&#x27;./index&#x27;</span>);</span><br><span class="line">    <span class="title function_">expect</span>(<span class="function">() =&gt;</span> index.<span class="title function_">getResult</span>()).<span class="title function_">toThrow</span>(<span class="string">&#x27;超過10次了，請重新開始&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add more tests as needed for the getResult function</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>給學生的出題程式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> answer = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// start coding</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> min = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> max = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> guess = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getResult</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Guess number is <span class="subst">$&#123;guess&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">while</span> (    ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (    ) &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;超過10次了，請重新開始&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`第<span class="subst">$&#123;count&#125;</span>回合，您猜<span class="subst">$&#123;guess&#125;</span>，猜對了`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下為測試檔，請勿更動</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  guess,</span><br><span class="line">  answer,</span><br><span class="line">  count,</span><br><span class="line">  getResult,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://replit.com/@Marsen/10-Ci-Nei-Cai-Dui-assignment-add-test-cases-and-model-answer">解答範本</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> answer = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// start coding</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> min = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> max = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> guess = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getResult</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Guess number is <span class="subst">$&#123;guess&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">while</span> (guess !== answer) &#123;</span><br><span class="line">    <span class="keyword">if</span> (answer &lt; guess) &#123;</span><br><span class="line">      max = guess; <span class="comment">//猜太大取代最大值</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`第<span class="subst">$&#123;count&#125;</span>回合，您猜<span class="subst">$&#123;guess&#125;</span>，太大了，請猜介於<span class="subst">$&#123;min&#125;</span>~<span class="subst">$&#123;max&#125;</span>之間的數字`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (answer &gt; guess) &#123;</span><br><span class="line">      min = guess; <span class="comment">//猜太小取代最小值</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`第<span class="subst">$&#123;count&#125;</span>回合，您猜<span class="subst">$&#123;guess&#125;</span>，太小了，請猜介於<span class="subst">$&#123;min&#125;</span>~<span class="subst">$&#123;max&#125;</span>之間的數字`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    guess = (max === min + <span class="number">1</span>) ? max : <span class="title class_">Math</span>.<span class="title function_">floor</span>((max + min) / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;超過10次了，請重新開始&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`第<span class="subst">$&#123;count&#125;</span>回合，您猜<span class="subst">$&#123;guess&#125;</span>，猜對了`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下為測試檔，請勿更動</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  guess,</span><br><span class="line">  answer,</span><br><span class="line">  count,</span><br><span class="line">  getResult,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>整個課程的調整與測試改寫，大概花了我 4~12 小時處理。<br>在改制後，互動環節變少了，計時制改為定時制的給薪，也讓無法花太多的時間幫學生排查問題。<br>這題目我有興趣就順手解決了。<br>可惜的是，我拿不到任何費用。</p><p>也再一次印証 AI 的強大，未來的人材需要有更高的整合能力，<br>寫測試寫程式，讀技術文章賺取資訊落的錢應該會越來越難賺。<br>但是能高度整合的人應該會更為搶手。</p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;導言&quot;&gt;&lt;a href=&quot;#導言&quot; class=&quot;headerlink&quot; title=&quot;導言&quot;&gt;&lt;/a&gt;導言&lt;/h2&gt;&lt;p&gt;在 A 校擔任雲端助教一陣子，主要有幾個原因，&lt;br&gt;我也是資策會出身，所以我對轉職的學生可以感同身受，&lt;br&gt;我在教學的過程中，自已也會成</summary>
      
    
    
    
    
    <category term="生活筆記" scheme="https://blog.marsen.me/tags/%E7%94%9F%E6%B4%BB%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] GCP Armor 設定</title>
    <link href="https://blog.marsen.me/2023/12/14/2023/gcp_armor_setting/"/>
    <id>https://blog.marsen.me/2023/12/14/2023/gcp_armor_setting/</id>
    <published>2023-12-14T11:40:23.000Z</published>
    <updated>2024-06-23T15:25:45.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>在加入負載平衡（load balancer）後，我們發現防火牆的某些規則失效了，<br>尤其是那些僅允許公司內網存取站台的規則。<br>這是相當重要的規則，因為我們的部分開發資訊與半成品儲存在這些機器上。  </p><p>之所以建立了負載平衡(load balancer)，有兩個原因<br>首先，我需要作後端 API 的版本切換，而因為使用的程式語言不同並部署在不同主機，<br>而 load balancer 透過路由規則將流量導向不同的機器群的機制非常適合。<br>第二，我們的正式環境一直有 load balancer，而測試環境沒有，趁這個機會將沙盒&#x2F;測試環境的配置調整成一致。  </p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>本來有設定某些防火牆的規則，在掛載 load balancer 後就失效了。<br>原因是規則會識別流量的 IP，而掛載後，所有的流量對於機器來說，所有流量都來自 load balancer 的 IP 了。<br>這樣的規則形同虛設，這個時候 Google Armor 就是一個不錯的替代方案</p><h2 id="Google-Armor-Tips"><a href="#Google-Armor-Tips" class="headerlink" title="Google Armor Tips"></a>Google Armor Tips</h2><p>設定上十分簡單，在 Cloud Armor 頁面上選擇 policies，<br>我的情況是在建立 load balancer 後，就已經自動建立，<br>所以就直接修改。</p><p>參考規則如下</p><table><thead><tr><th>Action</th><th>Type</th><th>IP Addresses&#x2F;Ranges</th><th>Priority</th></tr></thead><tbody><tr><td>Allow</td><td>IP addresses&#x2F;ranges</td><td>5*.1**.***.205&#x2F;32</td><td>999</td></tr><tr><td></td><td></td><td>10.140.0.0&#x2F;20</td><td></td></tr><tr><td>Deny</td><td>IP addresses&#x2F;ranges</td><td>0.0.0.0&#x2F;0</td><td>1,000</td></tr><tr><td></td><td></td><td>(block all)</td><td></td></tr></tbody></table><p>一個是對指定來源 IP 與內網允許流量進來，一個是拒絕所有流量，這裡的設定與防火牆蠻像的。<br>接下來是目標的部份，要設定你的機器群，設定好套用，大約 10 分鐘內就會生效(實測不到3分鐘就生效了)</p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>Google Armor的主要優勢之一是其簡單易用的設定。<br>在Cloud Armor頁面上，我們可以輕鬆地設定我們的安全策略，包括允許特定IP範圍的流量進入，同時拒絕不受歡迎的流量。<br>這些設定反映在我們的參考規則中，確保了對特定IP和內部網路的控制，同時阻止不受歡迎的流量。  </p><p>特別是對於我們使用負載平衡器進行後端API版本切換和環境配置調整的需求，Google Armor提供了一個理想的解決方案。<br>其能夠在不同機器群之間巧妙地分發流量，確保我們的應用程式在不同版本之間平穩運作，同時維持良好的安全性。  </p><p>這樣的調整不僅解決了我們遇到的具體問題，也提升了整體系統的安全性和可靠性。  </p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;在加入負載平衡（load balancer）後，我們發現防火牆的某些規則失效了，&lt;br&gt;尤其是那些僅允許公司內網存取站台的規</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title> [實作筆記] Hexo 7 升級的錯誤處理心得</title>
    <link href="https://blog.marsen.me/2023/11/19/2023/hexo_7_update_logs/"/>
    <id>https://blog.marsen.me/2023/11/19/2023/hexo_7_update_logs/</id>
    <published>2023-11-19T17:31:32.000Z</published>
    <updated>2024-06-23T15:25:45.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>最近在對Hexo進行升級至7.0版本的過程中，遇到了一些錯誤與問題。<br>這篇部落格將記錄下這次升級的過程中所遇到的問題以及解決方法，希望對有需要的讀者有所幫助。</p><h2 id="錯誤記錄"><a href="#錯誤記錄" class="headerlink" title="錯誤記錄"></a>錯誤記錄</h2><h3 id="Hexo-Action-錯誤"><a href="#Hexo-Action-錯誤" class="headerlink" title="Hexo Action 錯誤"></a>Hexo Action 錯誤</h3><p>升級後，遇到了Hexo Action報錯的問題，錯誤訊息如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">node:internal/modules/cjs/loader:1051</span><br><span class="line">  throw err;</span><br><span class="line">  ^</span><br><span class="line"></span><br><span class="line">Error: Cannot find module &#x27;hexo-util/lib/spawn&#x27;</span><br><span class="line">Require stack:</span><br></pre></td></tr></table></figure><p>解決方式是查找相應的模組，更新配置文件，在本案中，hexo-util&#x2F;lib&#x2F;spawn 路徑不存在，應該改為 hexo-util&#x2F;dist&#x2F;spawn。</p><h3 id="地端執行-Hexo-d-時-Permission-Denied"><a href="#地端執行-Hexo-d-時-Permission-Denied" class="headerlink" title="地端執行 Hexo d 時 Permission Denied"></a>地端執行 Hexo d 時 Permission Denied</h3><p>在地端執行Hexo d時，遇到了權限問題，無法提交到GitHub的問題。<br>暫時解決方式是將repository的協議由ssh改為https，暫時繞過了問題。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/marsen/marsen.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>後來因 https 需要提供帳號密碼，而這些資訊不適合簽入版本控制，故改回了 ssh，<br>為了解決相應的 SSH 連線問題，需配置 SSH 連線 .ssh&#x2F;config<br>參考：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  HostName github.com</span><br><span class="line">  User git</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h3 id="YouTube-Tag-無法處理"><a href="#YouTube-Tag-無法處理" class="headerlink" title="YouTube Tag 無法處理"></a>YouTube Tag 無法處理</h3><p>升級至Hexo 7.0後，發現內建的YouTube標籤無法使用，原因是Hexo 7.0中刪除了這些內建的標籤。<br>解決方式是引入安裝 hexo-tag-embed package。  </p><h3 id="Hexo-部署錯誤快取"><a href="#Hexo-部署錯誤快取" class="headerlink" title="Hexo 部署錯誤快取"></a>Hexo 部署錯誤快取</h3><p>在部署過程中，遇到了Hexo的快取問題，導致地端和CI都出現異常。<br>解決方式是清除 Hexo 的快取 <code>hexo clean</code>，完整 SOP 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf .deploy_git</span><br><span class="line">hexo clean </span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="使用-Docker-偵錯"><a href="#使用-Docker-偵錯" class="headerlink" title="使用 Docker 偵錯"></a>使用 Docker 偵錯</h3><p><a href="https://github.com/marsen/hexo-action">Hexo Action</a>本身是以容器去運行的，可以在本地端執行測試，不需推版<br>使用 Docker 進行 Hexo Action 時，進行偵錯的方法：</p><p>建置與執行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t hexo-action .</span><br><span class="line">docker run -d hexo-action</span><br></pre></td></tr></table></figure><p>觀察 logs 與 files 去偵錯，Docker Desktop 是很好的工具。</p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>這次Hexo 7.0的升級過程中，遇到了不少問題，但通過查找相應的解決方案，一一解決了這些問題。<br>在升級過程中，需要留意Hexo的官方文檔以及相關插件的更新，以確保能夠順利完成升級。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://rs11.xyz/articles/2.html">https://rs11.xyz/articles/2.html</a></li><li><a href="https://hexo.io/docs/tag-plugins.html#google_vignette">https://hexo.io/docs/tag-plugins.html#google_vignette</a></li><li><a href="https://github.com/hexojs/hexo-tag-embed">https://github.com/hexojs/hexo-tag-embed</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;最近在對Hexo進行升級至7.0版本的過程中，遇到了一些錯誤與問題。&lt;br&gt;這篇部落格將記錄下這次升級的過程中所遇到的問題以</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title> [實作筆記] Gitlab CI/CD 與 GCP - 錯誤處理</title>
    <link href="https://blog.marsen.me/2023/11/16/2023/gitlab_ci_error_handle/"/>
    <id>https://blog.marsen.me/2023/11/16/2023/gitlab_ci_error_handle/</id>
    <published>2023-11-16T08:32:09.000Z</published>
    <updated>2024-06-23T15:25:45.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>在持續整合&#x2F;持續交付 (CI&#x2F;CD) 的過程中，我們常常會遇到一個問題：<br>當發生錯誤時，系統並不總是會拋出 exit 1 的錯誤碼。<br>這種情況下，即使發生錯誤，CI&#x2F;CD 仍然會繼續執行，這可能導致部署了錯誤的版本上線，增加系統的不穩定性。</p><h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>為了解決這個問題，我們可以採取一些措施，確保在發生錯誤時 CI&#x2F;CD 立即停止，並拋出 exit 1 錯誤碼。</p><h3 id="1-記錄錯誤信息到-output-log"><a href="#1-記錄錯誤信息到-output-log" class="headerlink" title="1. 記錄錯誤信息到 output.log"></a>1. 記錄錯誤信息到 output.log</h3><p>  首先，我們可以將所有的執行日誌輸出到一個文件，例如 output.log。這樣一來，<br>  不管是哪個階段出現了問題，我們都能夠查閱這個文件，以便更好地理解錯誤的發生原因。  </p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Copy code</span><br><span class="line"><span class="comment"># 在腳本中添加以下命令，將所有輸出寫入 output.log 文件</span></span><br><span class="line">./your_script.sh &gt; output.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h3 id="2-使用-grep-檢查錯誤"><a href="#2-使用-grep-檢查錯誤" class="headerlink" title="2. 使用 grep 檢查錯誤"></a>2. 使用 grep 檢查錯誤</h3><p>  其次，我們可以使用 grep 命令來檢查 output.log 文件，查找關鍵字或錯誤模式。<br>  如果發現了任何錯誤，我們可以採取相應的措施。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Copy code</span><br><span class="line"><span class="comment"># 使用 grep 查找關鍵字，並在發現錯誤時執行相應的操作</span></span><br><span class="line"><span class="keyword">if</span> grep -q <span class="string">&quot;error&quot;</span> output.log; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Error found in output.log&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="3-發現錯誤時丟出-exit-1"><a href="#3-發現錯誤時丟出-exit-1" class="headerlink" title="3. 發現錯誤時丟出 exit 1"></a>3. 發現錯誤時丟出 exit 1</h3><p>  最後，在檢查完錯誤後，如果發現了問題，我們應該明確地拋出 exit 1，這會通知 CI&#x2F;CD 停止進一步的運行，<br>  確保不會將有問題的版本部署上線。  </p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Copy code</span><br><span class="line"><span class="comment"># 在發現錯誤時，明確地拋出 exit 1</span></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Error occurred. Exiting with code 1.&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>透過這些步驟，我們可以更好地管理 CI&#x2F;CD 中的錯誤，確保系統的穩定性和可靠性。<br>同時，我們能夠更快速地響應和解決問題，減少部署錯誤版本的風險。  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">generate-qa:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">generate-qa</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">generate:qa</span> <span class="string">|</span> <span class="string">tee</span> <span class="string">output.log</span>  <span class="comment"># 可能出錯的命令，將輸出寫到文件</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">grep</span> <span class="string">-q</span> <span class="string">&quot;Error.*\[500\]&quot;</span> <span class="string">output.log</span> <span class="string">&amp;&amp;</span> <span class="string">echo</span> <span class="string">-e</span> <span class="string">&quot;\e[31m生成異常！ Prerendering 發生 500 Error\e[0m&quot;</span> <span class="string">&amp;&amp;</span> <span class="string">exit</span> <span class="number">1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;generated successfully&quot;</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./.output/public</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">&#x27;$CI_COMMIT_BRANCH == &quot;qa&quot;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>這些方法不僅有助於提高系統的穩定性和可靠性，還能夠加速問題的識別和解決過程，減少了部署錯誤版本的風險。<br>透過這些實踐，我們可以更加信心滿滿地運用 Gitlab CI&#x2F;CD 與 GCP，確保順暢的開發和部署流程。  </p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li>[實作筆記] Gitlab CI&#x2F;CD 與 GCP 相關文章<ul><li><a href="https://blog.marsen.me/2023/04/13/2023/gitlab_ci_and_gcp_vm/">架構全貌</a></li><li><a href="https://blog.marsen.me/2023/04/14/2023/gitlab_ci_and_gcp_vm_create_server/">建立 Web Server VM</a></li><li><a href="https://blog.marsen.me/2023/04/14/2023/gitlab_ci_and_gcp_vm_cretae_runner/">建立 Gitlab Runner VM</a></li><li><a href="https://blog.marsen.me/2023/04/14/2023/gitlab_ci_and_gcp_vm_firewall/">防火牆設定</a></li><li><a href="https://blog.marsen.me/2023/04/24/2023/gitlab_ci_and_gcp_vm_account/">Linux User 與資料夾權限</a></li><li><a href="https://blog.marsen.me/2023/05/29/2023/gitlab_ci_and_gcp_vm_secret_config/">機敏資料的處理</a></li><li><a href="https://blog.marsen.me/2023/11/16/2023/gitlab_ci_error_handle/">錯誤處理</a></li><li><a href="https://blog.marsen.me/2024/03/13/2024/gitlab_ci_and_gcp_workload_federation/">Workload Identity Federation</a></li><li><a href="https://blog.marsen.me/2024/04/17/2024/gitlab_ci_and_gcp_cloud_run/">Cloud Run</a></li></ul></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;在持續整合&amp;#x2F;持續交付 (CI&amp;#x2F;CD) 的過程中，我們常常會遇到一個問題：&lt;br&gt;當發生錯誤時，系統並不總</summary>
      
    
    
    
    
    <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
    <category term="CI/CD" scheme="https://blog.marsen.me/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title> [工作筆記] 退出 Azure DevOps 的組織</title>
    <link href="https://blog.marsen.me/2023/11/05/2023/azure_devops_leave_organization/"/>
    <id>https://blog.marsen.me/2023/11/05/2023/azure_devops_leave_organization/</id>
    <published>2023-11-05T11:27:29.000Z</published>
    <updated>2024-06-23T15:25:45.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>Azure DevOps 是一個由微軟開發的服務，提供開發團隊協作和快速交付軟體的解決方案。<br>它包含了版控、工作追蹤、持續整合&#x2F;持續部署 (CI&#x2F;CD) 等功能。<br>其中，我將重點使用其 Board 功能來進行工作項目的管理和追蹤。<br>然而，有一天我發現自己被不知名的人邀請進了一個 Azure DevOps 的 Organizations，<br>所以我開始尋找如何自行退出的方法。</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>首先進入 dev.azure.com，點擊 user setting icon (這在畫面的右上角，是一個人的右下角有齒輪的圖案)。<br>點擊 Profile 進到以下頁面，可以看到提示如下:  </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">You are currently subscribed to other communication regarding Visual Studio and/or Visual Studio Subscriptions.   </span><br><span class="line">Please visit the complete Azure DevOps Profile Page to change those settings.</span><br></pre></td></tr></table></figure><p>點擊連結到 <a href="https://aex.dev.azure.com/me">Azure DevOps Profile Page</a>  </p><p>這裡就可以看到你的 Organization 並選擇離開</p><h2 id="誤區"><a href="#誤區" class="headerlink" title="誤區"></a>誤區</h2><p>在 <a href="https://myaccount.microsoft.com/organizations">my account</a> 也有 Organization 但是不可以隨意離開。<br>簡單來說，在微軟的 my account 中，<code>Organizations</code> 代表的是你所屬於的 Azure Active Directory (Azure AD) 組織。<br>這些組織可能是你的工作場所、學校或其他團體，他們使用 Azure AD 來管理員工或成員的身份和訪問權限。<br>這裡的組織並不等同於 Azure DevOps 中的 Organizations，並且不能隨意離開。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://learn.microsoft.com/en-us/entra/external-id/leave-the-organization">https://learn.microsoft.com/en-us/entra/external-id/leave-the-organization</a></li></ul><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;Azure DevOps 是一個由微軟開發的服務，提供開發團隊協作和快速交付軟體的解決方案。&lt;br&gt;它包含了版控、工作追蹤、</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>[踩雷筆記] 解決 GitHub 帳戶在 VS Code 中的管理問題</title>
    <link href="https://blog.marsen.me/2023/10/27/2023/github_account_management_in_vs_code/"/>
    <id>https://blog.marsen.me/2023/10/27/2023/github_account_management_in_vs_code/</id>
    <published>2023-10-27T11:08:57.000Z</published>
    <updated>2024-06-23T15:25:45.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>當我使用 VS Code 時，我需要同時存取多個 GitHub 帳戶，<br>自已的 Github - 主要存取 VS Code 一些地端的設定值<br>公司的 Github - 有免費的 Copilot 這很好用。<br>兩個都我需要，我要作出大人的選擇。</p><h2 id="實務上的困境"><a href="#實務上的困境" class="headerlink" title="實務上的困境"></a>實務上的困境</h2><p>我可以同時登入兩組帳戶，但是無法達到我要的需求</p><h3 id="登入兩組帳戶的方法"><a href="#登入兩組帳戶的方法" class="headerlink" title="登入兩組帳戶的方法"></a>登入兩組帳戶的方法</h3><ol><li>確保安裝了 Github Copilot 與 Github Pull Request and Issues 套件  </li><li>如果有其它 Github 帳號已經在登入狀態的，都先登出，並重啟 VS Code  </li><li>準備好兩個瀏覽器，分別登入公司與自已的 Github Account  </li><li>點擊在左下的頭像 Icon (沒有頭像 Icon 的話在左側欄任一處點右鍵，將<code>帳戶</code>打勾)  </li><li>選擇”使用 Github 登入，以使用 Github Copilot”  </li><li>選擇登入公司帳戶的瀏覽器，此時會提示要開啟 VS Code，選擇開啟  </li><li>回到 VS Code，重複第 4 步  </li><li>選擇”使用 Github 登入，以使用 Github 提取要求和問題”  </li><li>選擇登入自已帳戶的瀏覽器，此時會提示要開啟 VS Code，選擇開啟</li></ol><p>如果你的預設瀏覽器是登入公司 Github 的帳號，就複製網址，貼到登入自已的 Github 帳號瀏覽器，反之亦然。<br>但是這個作法，實際上沒有什麼幫助，<em>備份與同步設定與 Copilot 會共用同一組帳號</em>。<br>我並不需要 Github Pull Request and Issues 相關功能。  </p><h3 id="手動組態同步"><a href="#手動組態同步" class="headerlink" title="手動組態同步"></a>手動組態同步</h3><p>早期 VSCode 有人寫了組態同步的擴充套件，但是目前內建在 VSCode 內部後不再維護了。<br>但是我需要的就是自已長期以來的使用的設定，所以可以先登入自已的帳號。<br>再登出後，登入公司帳號。缺點是需要手動處理。</p><h3 id="安裝第二個-VSCode"><a href="#安裝第二個-VSCode" class="headerlink" title="安裝第二個 VSCode"></a>安裝第二個 VSCode</h3><p>這個方法也有很多不同的實作方式。<br>簡單說一個官方直接支援的方式。 VS Code Insider<br>這算是一個搶先試用版的 VSCode，也有其對應的風險。<br>但是你就可以在系統上安裝兩個 VSCode，並登入不同的帳戶。  </p><h3 id="花錢為自已的帳戶買-Copilot"><a href="#花錢為自已的帳戶買-Copilot" class="headerlink" title="花錢為自已的帳戶買 Copilot"></a>花錢為自已的帳戶買 Copilot</h3><p>這或許才是最大人的解法。<br>我們要的是”同步組態設定”與”Copilot”使用權。<br>根帳號本身其實沒有什麼關係。<br>資本主義大好，但就失去了一些童趣了。  </p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p>-<a href="https://tutorials.tinkink.net/zh-hant/vscode/copilot-usage-and-shortcut.html">https://tutorials.tinkink.net/zh-hant/vscode/copilot-usage-and-shortcut.html</a><br>-<a href="https://code.visualstudio.com/docs/?dv=osx&amp;build=insiders">https://code.visualstudio.com/docs/?dv=osx&amp;build=insiders</a></p><p>(fin)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;當我使用 VS Code 時，我需要同時存取多個 GitHub 帳戶，&lt;br&gt;自已的 Github - 主要存取 VS Co</summary>
      
    
    
    
    
    <category term="踩雷筆記" scheme="https://blog.marsen.me/tags/%E8%B8%A9%E9%9B%B7%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
</feed>
